
# 2022-02-22 16:31:12.166040
+table users;

# 2022-02-22 16:31:22.090758
+select * from users limit 10;

# 2022-02-22 16:31:29.914464
+\q

# 2022-02-22 16:37:45.764915
+select * from users limit 10;

# 2022-02-22 16:38:50.713694
+\q

# 2022-02-23 11:37:29.421381
+\d

# 2022-02-23 11:37:32.863630
+\l

# 2022-02-23 11:38:22.398623
+ALTER ROLE riley with PASSWORD 'parrules1';

# 2022-02-23 11:38:46.463606
+ROLE riley;

# 2022-02-23 11:38:51.489804
+SELECT ROLE riley;

# 2022-02-23 11:39:11.623219
+SELECT * FROM pg_roles;

# 2022-02-23 11:39:34.941059
+\x

# 2022-02-23 11:39:36.183849
+SELECT * FROM pg_roles;

# 2022-02-23 11:39:47.582333
+\q

# 2022-02-23 11:42:31.083540
+\l

# 2022-02-23 11:42:47.477576
+\q

# 2022-02-23 11:43:41.604893
+\l

# 2022-02-23 11:43:47.389023
+ALTER ROLE riley with PASSWORD 'parrules1';

# 2022-02-23 11:43:56.710859
+SELECT * FROM pg_roles;

# 2022-02-23 11:44:07.943416
+\x

# 2022-02-23 11:44:12.653844
+ALTER ROLE riley with PASSWORD 'parrules1';

# 2022-02-23 11:44:25.411649
+\q

# 2022-02-23 11:48:40.220787
+q

# 2022-02-23 11:48:40.945120
+\q

# 2022-02-24 12:46:56.101309
+\l

# 2022-02-24 12:47:01.109582
+\c freewill_dev

# 2022-02-24 12:47:16.260667
+select * from organization_custom_urls;

# 2022-02-24 12:48:11.126248
+\q

# 2022-02-25 14:05:14.215039
+e

# 2022-02-25 14:05:15.692880
+\q

# 2022-02-25 19:38:49.588864
+\l

# 2022-02-25 19:39:15.566637
+\host

# 2022-02-25 19:39:17.974046
+\h

# 2022-02-25 19:39:23.684969
+\q

# 2022-02-25 19:39:50.474555
+\l

# 2022-02-25 19:39:55.292197
+\q

# 2022-02-25 19:40:09.310664
+\l

# 2022-02-25 19:40:16.090949
+\q

# 2022-02-25 19:48:51.312866
+select * from organization_custom_urls;

# 2022-02-25 19:49:08.179833
+\d

# 2022-02-25 19:49:42.352388
+\d+ users

# 2022-02-25 19:57:09.204485
+select * from users;'

# 2022-02-25 19:57:12.583212
+select * from users;

# 2022-02-25 19:57:18.471979
+\x

# 2022-02-25 19:57:20.095160
+select * from users;

# 2022-02-25 19:58:43.683476
+\q

# 2022-02-25 19:58:49.347801
+select * from users;

# 2022-02-25 19:58:56.968592
+\d

# 2022-02-25 19:59:27.642104
+select * from advance_health_care_directives;

# 2022-02-28 13:22:46.471061
+
+

# 2022-02-28 17:31:19.653279
+\q

# 2022-03-02 14:27:50.284470
+\d traffic

# 2022-03-02 14:28:10.882643
+select * from traffic limit 1;

# 2022-03-02 14:29:12.019058
+select meta_info from traffic where id = 7839391;

# 2022-03-02 14:29:21.507197
+\x

# 2022-03-02 14:29:22.762879
+select meta_info from traffic where id = 7839391;

# 2022-03-02 14:29:25.818073
+\x auto

# 2022-03-02 14:29:26.758940
+select meta_info from traffic where id = 7839391;

# 2022-03-02 14:30:05.266918
+select jsonb_object_keys(meta_info) from traffic where id = 7839391;

# 2022-03-02 14:30:22.342251
+select meta_info->location from traffic where id = 7839391;

# 2022-03-02 14:30:29.570394
+select meta_info->'location' from traffic where id = 7839391;

# 2022-03-02 14:30:52.189326
+select meta_info->'browser' from traffic where id = 7839391;

# 2022-03-02 14:31:11.548905
+select meta_info->'device' from traffic where id = 7839391;

# 2022-03-02 14:31:18.708849
+select meta_info->'query' from traffic where id = 7839391;

# 2022-03-02 14:31:24.841708
+select meta_info->'query' from traffic limit 1 offset 1;

# 2022-03-02 14:31:31.413068
+select meta_info->'query' from traffic limit 1 offset 2;

# 2022-03-02 14:31:32.636003
+select meta_info->'query' from traffic limit 1 offset 3;

# 2022-03-02 14:31:33.965848
+select meta_info->'query' from traffic limit 1 offset 10;

# 2022-03-02 14:32:12.625831
+select meta_info->'query', meta_info->'device', meta_info->'browser', meta_info->'location' from traffic limit 1 offset 10;

# 2022-03-02 15:22:24.581788
+\d

# 2022-03-02 15:22:45.972423
+\d featureships

# 2022-03-02 15:22:56.396570
+select * from organization limit 1;

# 2022-03-02 15:23:01.868724
+\d featureships

# 2022-03-02 15:24:15.313514
+select organization_id from featureships limit 10;

# 2022-03-02 15:24:21.417742
+\d

# 2022-03-02 15:24:34.153053
+table contacts;

# 2022-03-02 15:24:39.595634
+select * from contacts limit 1;

# 2022-03-02 15:24:47.763124
+select * from contacts limit 1 offset 100;

# 2022-03-02 15:26:29.050430
+\d+

# 2022-03-02 15:26:53.874099
+/dn

# 2022-03-02 15:26:55.385170
+\dn

# 2022-03-02 15:27:18.071706
+select * from pg_catalog ;

# 2022-03-02 15:27:24.209743
+select * from pg_catalog.pg_namespace' ;

# 2022-03-02 15:27:25.794077
+select * from pg_catalog.pg_namespace ;

# 2022-03-02 15:27:50.408997
+select * from information_Schema.columns;

# 2022-03-02 15:28:25.628393
+select * from information_Schema.columns where table_name = 'featureships';

# 2022-03-02 15:29:41.388174
+select * from information_Schema.row;

# 2022-03-02 15:29:42.885682
+select * from information_Schema.rows;

# 2022-03-02 15:30:05.019563
+select * from information_Schema.tables;

# 2022-03-02 15:30:29.001632
+select * from information_Schema.parameters;

# 2022-03-02 17:00:11.354094
+\q

# 2022-03-03 16:47:46.505471
+select legal_name from organizations;

# 2022-03-03 16:48:17.741007
+select legal_name from organizations where legal_name ilike '%animals%';

# 2022-03-03 16:48:55.222936
+select legal_name from organizations where legal_name ilike '%autism%';

# 2022-03-03 16:49:25.683371
+\q

# 2022-03-03 16:50:51.740594
+\d

# 2022-03-07 13:00:09.214430
+\d users

# 2022-03-07 13:00:15.758174
+\d profiles

# 2022-03-07 13:00:29.339199
+\d estate_plans

# 2022-03-07 13:05:22.740412
+\d programs

# 2022-03-07 13:05:34.569724
+select legal_name from programs limit 10;

# 2022-03-07 13:05:56.551403
+\d estate_charitable_gifts

# 2022-03-07 13:06:24.321043
+select profile_id from estate_charitable_gifts limit 1;

# 2022-03-07 13:06:46.040443
+select estate_plan_id from estate_charitable_gifts limit 1;

# 2022-03-07 13:06:57.434509
+select estate_id from estate_charitable_gifts limit 1;

# 2022-03-07 13:07:12.329615
+select profile_id from estates where estate_id = knxWA106;

# 2022-03-07 13:07:18.033002
+select profile_id from estate_plans where estate_id = knxWA106;

# 2022-03-07 13:07:24.490178
+\d estate_plans

# 2022-03-07 13:07:35.574767
+select profile_id from estate_plans where id = 'knxWA106';

# 2022-03-07 13:07:44.325033
+select profile_id from estate_plans where id = knxWA106;

# 2022-03-07 13:07:46.109601
+\d estate_plans

# 2022-03-07 13:07:53.215773
+select profile_id from estate_plans where rand_id = 'knxWA106';

# 2022-03-07 13:07:57.339203
+select from estate_plans where rand_id = 'knxWA106';

# 2022-03-07 13:08:05.034401
+\d estate_charitable_gifts

# 2022-03-07 13:28:26.236320
+select count(*) from profiles;

# 2022-03-07 13:28:31.782482
+select count(*) from estate_plans;

# 2022-03-07 13:28:35.262872
+select count(*) from estate_charitable_gifts;

# 2022-03-07 13:32:22.262827
+select count(*) from rand_ids;

# 2022-03-07 13:32:26.151883
+select count(*) from rand_ids_in_use;

# 2022-03-07 13:36:18.465628
+select id from profiles join estate_charitable_gifts ON estate_charitable_gifts.profile_id = profiles.rand_id;

# 2022-03-07 13:36:22.329222
+select profiles.id from profiles join estate_charitable_gifts ON estate_charitable_gifts.profile_id = profiles.rand_id;

# 2022-03-07 13:36:48.602140
+select profiles.id from profiles join estate_plans ON estate_plans.profile_id = profiles.rand_id join estate_charitable_gifts ON estate_charitable_gifts.estate_id = estate_plans.rand_id;

# 2022-03-07 13:46:50.157116
+select profiles.id from profiles join estate_plans ON estate_plans.profile_id = profiles.rand_id join estate_charitable_gifts ON estate_charitable_gifts.estate_id = estate_plans.rand_id where estate_charitable_gifts.id = 1234;;

# 2022-03-07 13:46:52.449224
+select profiles.id from profiles join estate_plans ON estate_plans.profile_id = profiles.rand_id join estate_charitable_gifts ON estate_charitable_gifts.estate_id = estate_plans.rand_id where estate_charitable_gifts.id = 1234;

# 2022-03-07 13:47:57.118400
+select profiles.id from profiles join estate_charitable_gifts ON estate_charitable_gifts.profile_id = profiles.rand_id where estate_charitable_gifts.id = 1234;

# 2022-03-07 13:49:23.237199
+select estate_charitable_gifts.id from estate_charitable_gifts join profiles on profiles.rand_id = estate_charitable_gifts.profile_id where profile = 1234;

# 2022-03-07 13:49:25.556648
+select estate_charitable_gifts.id from estate_charitable_gifts join profiles on profiles.rand_id = estate_charitable_gifts.profile_id where profile.id = 1234;

# 2022-03-07 13:49:38.100533
+select estate_charitable_gifts.id from estate_charitable_gifts join profiles on profiles.rand_id = estate_charitable_gifts.profile_id where profiles.id = 1234;

# 2022-03-07 13:49:43.914216
+select id from profiles limit 10;

# 2022-03-07 13:49:48.276735
+select estate_charitable_gifts.id from estate_charitable_gifts join profiles on profiles.rand_id = estate_charitable_gifts.profile_id where profiles.id = 564021;

# 2022-03-07 13:50:37.587809
+select profile.id, count(estate_charitable_gifts.id) from estate_charitable_gifts join profiles on profiles.rand_id = estate_charitable_gifts.profile_id group by profile.id;

# 2022-03-07 13:50:40.443430
+select profile.id, count(estate_charitable_gifts.id) from estate_charitable_gifts join profiles on profiles.rand_id = estate_charitable_gifts.profile_id group by profiles.id;

# 2022-03-07 13:50:44.235471
+select profiles.id, count(estate_charitable_gifts.id) from estate_charitable_gifts join profiles on profiles.rand_id = estate_charitable_gifts.profile_id group by profiles.id;

# 2022-03-07 13:50:50.845446
+select estate_charitable_gifts.id from estate_charitable_gifts join profiles on profiles.rand_id = estate_charitable_gifts.profile_id where profiles.id = 34;

# 2022-03-07 13:51:16.723868
+select profiles.id from profiles join estate_charitable_gifts ON estate_charitable_gifts.profile_id = profiles.rand_id where estate_charitable_gifts.id = 18346;

# 2022-03-07 13:51:23.835743
+select estate_charitable_gifts.id from estate_charitable_gifts join profiles on profiles.rand_id = estate_charitable_gifts.profile_id where profiles.id = 34;

# 2022-03-07 13:51:55.011937
+select estate_charitable_gifts.id from estate_charitable_gifts join estate_plans on estate_plans.rand_id = estate_charitable_gifts.estate_id join profiles on profiles.rand_id = estate_plans.profile_id where profiles.id = 34;

# 2022-03-08 15:28:32.677632
+\d charity

# 2022-03-08 15:29:24.018924
+\d estate_charitable_gifts

# 2022-03-08 15:47:07.034839
+select * from profiles where rand_id = 'uCmrPgXa';

# 2022-03-08 15:47:19.776157
+\d financial_power_of_attorneys

# 2022-03-08 15:47:34.392883
+select * from financial_power_of_attorneys where profile_id = 'uCmrPgXa';

# 2022-03-09 16:28:49.738529
+table bad_words;

# 2022-03-09 16:29:10.127823
+\q

# 2022-03-14 11:44:42.192852
+select * from estate_plans limit 1;

# 2022-03-14 11:44:52.419718
+\d estate_plans.rand_id

# 2022-03-14 11:44:54.539791
+\d estate_plans

# 2022-03-14 11:45:54.235375
+select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ON estate_charitable_gifts.estate_id = ep.rand_id group by ep.rand_id;

# 2022-03-14 11:46:07.315976
+select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id group by ep.rand_id;

# 2022-03-14 11:46:16.364171
+select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id group by ep.rand_id where count > 7;

# 2022-03-14 11:46:29.348142
+select * FROM (select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id group by ep.rand_id) query where count > 7;;

# 2022-03-14 11:46:31.035813
+select * FROM (select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id group by ep.rand_id) query where count > 7;

# 2022-03-14 11:46:39.749073
+select count(*) FROM (select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id group by ep.rand_id) query where count > 7;

# 2022-03-14 11:48:28.733550
+\d estate_plans

# 2022-03-14 11:50:19.494317
+select count(*) FROM (select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id group by ep.rand_id) query where count > 7;

# 2022-03-14 11:50:27.381637
+\q

# 2022-03-14 11:51:28.802873
+select count(*) FROM (select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id group by ep.rand_id) query where count > 7;

# 2022-03-14 11:51:40.306806
+select count(*) FROM (select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id group by ep.rand_id) query where count >= 7;

# 2022-03-14 11:52:46.695090
+\q

# 2022-03-14 11:52:54.600574
+select count(*) FROM (select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id group by ep.rand_id) query where count >= 7;

# 2022-03-14 12:36:35.341048
+\d estate_charitable_gifts

# 2022-03-14 12:36:44.494662
+\d estate_plans

# 2022-03-14 12:38:50.935881
+\d financial_power_of_attorneys

# 2022-03-14 12:44:29.137855
+select * from estate_validity_reasons limit 10;

# 2022-03-14 12:44:44.462061
+\d estate_validity_reasons

# 2022-03-14 12:45:11.049559
+select * from estate_validity_reasons limit 10;

# 2022-03-14 14:44:52.611303
+select * from estate_plans where rand_id = 'x8A0wjA2';

# 2022-03-14 14:45:04.113582
+select * from estate_plans where rand_id = 'x8AOwjA2';

# 2022-03-14 14:45:34.923483
+select * from estate_validity_reasons where estate_id = 'x8AOwjA2';

# 2022-03-14 14:49:40.277721
+select * from estate_validity_reasons where estate_id = 'OxFhUfbo';

# 2022-03-14 15:33:45.928970
+select * from estate_validity_reasons where estate_id = 'G7jWRLNf';

# 2022-03-14 15:36:39.449156
+\q

# 2022-03-14 15:37:08.184921
+select * from estate_validity_reasons order by created_at desc limit 1;

# 2022-03-14 15:37:19.692416
+select * from estate_plans order by created_at desc limit 1;

# 2022-03-14 15:37:54.562404
+select * from profiles where rand_id = 'KgB0yQup';

# 2022-03-14 15:38:10.280468
+select * from estate_plans order by created_at desc limit 1;

# 2022-03-14 15:38:33.166512
+select * from estate_validity_reasons where estate_id = 'FhYAntR8';

# 2022-03-14 16:05:18.747459
+\q

# 2022-03-14 16:05:39.861775
+select rand_id from estate_plans order by created_at limit 1;

# 2022-03-14 16:05:44.997874
+select rand_id from estate_plans order by created_at desc limit 1;

# 2022-03-14 16:06:03.126078
+select * from estate_charitable_gifts where estate_id = '3gVqX7DY';

# 2022-03-14 16:06:39.573014
+select * from organizations where rand_id = 'Th7qEYTH';

# 2022-03-14 16:07:14.750142
+select * from estate_charitable_gifts where estate_id = '3gVqX7DY';

# 2022-03-14 16:37:45.503469
+select rand_id from estate_plans order by created_at desc limit 1;

# 2022-03-14 16:38:02.597672
+select * from estate_validity_reasons where estate_id = 'qCDJ1zZy';

# 2022-03-15 12:15:30.435673
+select rand_id from estate_plans order by created_at desc limit 1;

# 2022-03-15 12:15:40.210483
+select * from estate_validity_reasons where estate_id = 'oesUL48a';

# 2022-03-15 12:23:13.968753
+select * from estate_validity_reasons where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-03-15 13:20:34.333730
+\q

# 2022-03-15 13:20:46.511972
+select * from estate_validity_reasons where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-03-15 13:22:22.309026
+select * from profiles where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-03-15 13:22:34.156097
+select * from profiles where profile_id in (select profile_id from estate_plans order by created_at desc limit 1);

# 2022-03-15 13:22:41.156352
+\d estate_plans

# 2022-03-15 13:22:50.516373
+select * from profiles where rand_id in (select profile_id from estate_plans order by created_at desc limit 1);

# 2022-03-15 13:23:00.198451
+select * from estate_validity_reasons where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-03-15 13:23:04.468663
+select reason from estate_validity_reasons where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-03-15 15:15:17.828240
+select * from profiles where rand_id in (select profile_id from estate_plans order by created_at desc limit 1);

# 2022-03-16 13:22:27.184060
+selelct count(*) from information_schema.tables;

# 2022-03-16 13:22:29.971556
+select count(*) from information_schema.tables;

# 2022-03-16 13:22:41.126330
+select * from information_schema.tables limit 1;

# 2022-03-16 13:22:51.576676
+select count(*) from information_schema.tables where table_schema = 'freewill';

# 2022-03-16 13:23:09.538148
+select distinct table_schema from information_schema.tables;

# 2022-03-16 13:23:23.515055
+select count(*) from information_schema.tables where table_schema = 'public';

# 2022-03-16 13:23:47.784969
+\d information_schema

# 2022-03-16 13:23:50.706411
+\d information_schema.tables

# 2022-03-16 13:23:57.609814
+select * from information_schema.tables limit 1;

# 2022-03-16 13:24:15.217581
+select * from information_schema.tables where table_schema = 'public'  limit 1;

# 2022-03-16 13:24:50.970929
+\d+ estate_charitable_gifts

# 2022-03-16 15:37:51.078726
+select * from find_dfpoa_by_profile_id();

# 2022-03-16 15:38:09.725681
+select * from profiles where f_name->first = 'Riley';

# 2022-03-16 15:38:12.958889
+select * from profiles where f_name->'first' = 'Riley';

# 2022-03-16 15:38:26.067724
+select fn_name from profiles limit 1;

# 2022-03-16 15:38:29.183767
+select f_name from profiles limit 1;

# 2022-03-16 15:38:33.957485
+select f_name->last from profiles limit 1;

# 2022-03-16 15:38:40.458704
+select f_name->'last' from profiles limit 1;

# 2022-03-16 15:38:46.248287
+select f_name->'last' = 'Kenny' from profiles limit 1;

# 2022-03-16 15:38:50.751816
+select f_name->'last' = 'Kenny'::json from profiles limit 1;

# 2022-03-16 15:38:59.560944
+select f_name->'last' = '\"Kenny\"'::json from profiles limit 1;

# 2022-03-16 15:39:02.824622
+select f_name->'last' = '\"Kenny\"' from profiles limit 1;

# 2022-03-16 15:39:07.386494
+select f_name->'last' = '{Kenny}' from profiles limit 1;

# 2022-03-16 15:39:15.864886
+select f_name->'last'::varchar from profiles limit 1;

# 2022-03-16 15:39:20.627485
+select f_name->'last'::varchar = 'Kenny' from profiles limit 1;

# 2022-03-16 15:39:26.880572
+select f_name->'last'::varchar = 'Kenny'::varchar from profiles limit 1;

# 2022-03-16 15:39:33.128202
+select f_name->'last'::varchar = 'Kenny'::json from profiles limit 1;

# 2022-03-16 15:39:38.121035
+select f_name->'last'::varchar = '[Kenny]'::json from profiles limit 1;

# 2022-03-16 15:39:43.969445
+select f_name->'last'::varchar = "[Kenny]"::json from profiles limit 1;

# 2022-03-16 15:39:48.201388
+select f_name->'last'::varchar = "Kenny"::json from profiles limit 1;

# 2022-03-16 15:39:54.560481
+select "Kenny";

# 2022-03-16 15:39:58.477904
+select 'Kenny';

# 2022-03-16 15:40:02.835639
+select "'Kenny"';

# 2022-03-16 15:40:05.608837
+select '"Kenny"';

# 2022-03-16 15:40:15.010213
+select f_name->'last'::varchar = '"Kenny"' from profiles limit 1;

# 2022-03-16 15:40:28.067093
+select * from profiles where f_name->'first' = '"Riley"';

# 2022-03-16 15:40:36.877594
+select * from profiles where f_name->'last' = '"Voor"';

# 2022-03-16 15:41:01.156821
+select * from find_dfpoa_by_profile_id(uCmrPgXa);

# 2022-03-16 15:41:04.587695
+select * from find_dfpoa_by_profile_id('uCmrPgXa');

# 2022-03-16 15:41:29.139213
+\ef find_dfpoa_by_profile_id

# 2022-03-16 15:43:05.015189
+select * from financial_power_of_attorneys where rand_id = 'zr0lc68y';

# 2022-03-16 15:44:34.801597
+select * from find_dfpoa_by_profile_id('uCmrPgXa');

# 2022-03-16 15:44:43.087540
+select response from find_dfpoa_by_profile_id('uCmrPgXa');

# 2022-03-16 15:44:47.695503
+select response->'state' from find_dfpoa_by_profile_id('uCmrPgXa');

# 2022-03-18 13:05:01.089960
+select * from find_dfpoa_by_profile_id('uCmrPgXa');

# 2022-03-18 13:05:06.246436
+select response from find_dfpoa_by_profile_id('uCmrPgXa');

# 2022-03-18 13:05:28.858341
+select json_pretty(response) from find_dfpoa_by_profile_id('uCmrPgXa');

# 2022-03-18 13:05:31.394892
+select jsonb_pretty(response) from find_dfpoa_by_profile_id('uCmrPgXa');

# 2022-03-18 13:06:22.618368
+select jsonb_pretty('{"a":1,"b":2}');

# 2022-03-18 13:06:26.730049
+select jsonb_pretty('{"a":1,"b":2}'::json);

# 2022-03-18 13:06:30.795996
+select jsonb_pretty('{"a":1,"b":2}'::jsonb);

# 2022-03-18 13:06:36.619620
+select jsonb_pretty(response) from find_dfpoa_by_profile_id('uCmrPgXa');

# 2022-03-18 13:06:40.570459
+select jsonb_pretty(response::jsonb) from find_dfpoa_by_profile_id('uCmrPgXa');

# 2022-03-23 12:42:01.270339
+select * from profiles where rand_id in (select profile_id from estate_plans order by created_at desc limit 1);

# 2022-03-23 13:32:42.822217
+select reason from estate_validity_reasons where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-03-23 13:33:04.748561
+select rand_id from estate_plans order by created_at desc limit 1;

# 2022-03-23 13:33:08.914363
+select * from estate_plans order by created_at desc limit 1;

# 2022-03-23 13:33:19.915823
+select profile_id from estate_plans order by created_at desc limit 1;

# 2022-03-23 13:33:30.098127
+select * from profiles where rand_id in (select profile_id from estate_plans order by created_at desc limit 1);

# 2022-03-23 13:33:37.076312
+select reason from estate_validity_reasons where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-03-23 13:35:58.645501
+select * from estate_charitable_gifts where estate_id in (select rand_id from estate_plans order by created_at desc limit 1)

# 2022-03-23 13:45:32.331203
+select reason from estate_validity_reasons where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-03-23 14:02:10.738696
+\q

# 2022-03-23 14:02:42.632383
+select * from estate_validity_reasons limit 1;

# 2022-03-23 14:02:56.595469
+select * from estate_validity_reasons limit 1 where reason = 'GIFT_MESSAGE_TEST';

# 2022-03-23 14:03:01.458550
+select * from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST';

# 2022-03-23 14:03:36.004230
+select * from estate_plans where rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST');

# 2022-03-23 14:03:57.002967
+select * from estate_plans where not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST');

# 2022-03-23 14:04:02.669183
+select count(*) from estate_plans where not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST');

# 2022-03-23 14:04:26.873540
+select count(*) from estate_plans where not is_fake rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST');

# 2022-03-23 14:04:31.865586
+select count(*) from estate_plans where not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST');

# 2022-03-23 14:05:06.788696
+select count(*) from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST');

# 2022-03-23 14:05:12.370796
+select * from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST');

# 2022-03-23 14:05:23.189716
+select meta_info from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST');

# 2022-03-23 14:05:28.565604
+select * from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST');

# 2022-03-23 14:05:52.499377
+select * from estate_charitable_gifts where estate_id in (select rand_id from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'));

# 2022-03-23 14:05:58.843959
+select message from estate_charitable_gifts where estate_id in (select rand_id from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'));

# 2022-03-23 14:07:02.044096
+select message from estate_charitable_gifts where where deleted_at is null andestate_id in (select rand_id from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'));

# 2022-03-23 14:07:05.708552
+select message from estate_charitable_gifts where where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'));

# 2022-03-23 14:07:13.724129
+select message from estate_charitable_gifts where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'));

# 2022-03-23 14:07:36.141316
+select message ilike '%test%' from estate_charitable_gifts where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'));

# 2022-03-23 14:07:47.814328
+select message, message ilike '%test%' from estate_charitable_gifts where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'));

# 2022-03-23 14:08:11.636601
+select message from (select message, message ilike '%test%' as test from estate_charitable_gifts where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'))) query where test;

# 2022-03-23 14:08:19.211307
+select message from (select message, message ilike '%test%' as test from estate_charitable_gifts where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at > now() - '1 month'::interval  and not is_fake and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'))) query where not test;

# 2022-03-23 14:10:19.487706
+select message from (select message, message ilike '%test%' as test from estate_charitable_gifts where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at > now() - '1 month'::interval  and (not is_fake or is_fake is null) and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'))) query where not test;

# 2022-03-23 14:12:02.388064
+select message from (select message, message ilike '%test%' as test from estate_charitable_gifts where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at > '2022-03-02'::timestamp  and (not is_fake or is_fake is null) and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'))) query where not test;

# 2022-03-23 14:12:14.856423
+select message from (select message, message ilike '%test%' as test from estate_charitable_gifts where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at > '2022-03-02'::timestamp  and (not is_fake or is_fake is null) and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'))) query;

# 2022-03-23 14:13:01.966216
+select message from (select message, message ilike '%test%' as test from estate_charitable_gifts where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at < '2022-03-02'::timestamp and created_at > '2022-02-01'::timestamp and (not is_fake or is_fake is null) and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'))) query;

# 2022-03-23 14:13:43.497556
+select message from (select message, message ilike '%test%' as test from estate_charitable_gifts where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at > '2022-02-14'::timestamp and (not is_fake or is_fake is null) and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'))) query;

# 2022-03-23 14:14:09.087395
+select message from (select message, message ilike '%test%' as test from estate_charitable_gifts where deleted_at is null and estate_id in (select rand_id from estate_plans where created_at > '2022-02-14'::timestamp and (not is_fake or is_fake is null) and rand_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST'))) query where length(message) > 0;

# 2022-03-23 14:15:17.097611
+select * from estate_charitable_gifts where message = 'Small donation, please keep up the good work';

# 2022-03-23 14:15:39.008255
+select * from estate_plan where rand_id in (select estate_id from estate_charitable_gifts where message = 'Small donation, please keep up the good work');

# 2022-03-23 14:15:42.613337
+select * from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message = 'Small donation, please keep up the good work');

# 2022-03-23 14:16:04.704506
+select * from estate_validity_reasons where estate_id in (select rand_id from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message = 'Small donation, please keep up the good work'));

# 2022-03-23 14:24:00.074179
+select estate_id, array_agg(reason) from estate_validity_reasons where estate_id in (select rand_id from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message = 'Small donation, please keep up the good work')) group by estate_id;

# 2022-03-23 14:28:13.098393
+select now() - '29 days'::interval;

# 2022-03-23 14:30:41.205949
+select ecg.message, evr.created_at from estate_charitable_gifts ecg join estate_validity_reasons evr on evr.estate_id = ecg.estate_id where evr.reason = 'GIFT_MESSAGE_TEST' and evr.created_at > '2022-02-22'::timestamp;

# 2022-03-23 14:31:01.775501
+select ecg.message, evr.created_at from estate_charitable_gifts ecg join estate_validity_reasons evr on evr.estate_id = ecg.estate_id where evr.reason = 'GIFT_MESSAGE_TEST' and evr.created_at > '2022-02-22'::timestamp and ecg.message not ilike '%test%';

# 2022-03-23 14:31:41.267908
+select ecg.message, evr.created_at from estate_charitable_gifts ecg join estate_validity_reasons evr on evr.estate_id = ecg.estate_id where evr.reason = 'GIFT_MESSAGE_TEST' and evr.created_at > '2022-02-22'::timestamp and ecg.message not ilike '%test%' and ecg.message not ilike '%fake%';

# 2022-03-23 14:32:37.174195
+select ecg.message, evr.created_at from estate_charitable_gifts ecg join estate_validity_reasons evr on evr.estate_id = ecg.estate_id join estate_plans ep on ep.rand_id = ecg.estate_id where evr.reason = 'GIFT_MESSAGE_TEST' and evr.created_at > '2022-02-22'::timestamp and ecg.message not ilike '%test%' and ecg.message not ilike '%fake%' and not ep.is_fake;

# 2022-03-23 14:33:14.325935
+select * from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%';

# 2022-03-23 14:33:32.925813
+select * from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%' limit 1;

# 2022-03-23 14:33:46.789979
+select * from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%' limit 1);

# 2022-03-23 14:34:13.782551
+select * from estate_validity_reasons where estate_id in (select estate_id from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%' limit 1);

# 2022-03-23 14:35:53.428720
+select * from estate_validity_reasons where estate_id in (select estate_id from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%' limit);

# 2022-03-23 14:35:55.653951
+select * from estate_validity_reasons where estate_id in (select estate_id from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%');

# 2022-03-23 14:36:15.990091
+select * from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%');

# 2022-03-23 14:36:49.438346
+select created_at from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%');

# 2022-03-23 14:36:59.606388
+select updated_at from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%');

# 2022-03-23 14:37:50.589867
+select * from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%');

# 2022-03-23 14:39:11.977037
+select * from estate_charitable_gifts where estate_id in (select rand_id from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%'));

# 2022-03-23 14:41:08.065456
+select * from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message ilike '%my family has been plagued by cancer for so long.%');

# 2022-03-23 15:30:09.763442
+WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC;

# 2022-03-23 15:30:48.197248
+\q

# 2022-03-23 15:30:54.057501
+WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC;

# 2022-03-23 15:32:19.016580
+WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.display_bequest_message not ilike '%test%' and estate_charitable_gifts.display_bequest_message not ilike '%fake%';
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC;

# 2022-03-23 15:32:25.151994
+WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.display_bequest_message not ilike '%test%' and estate_charitable_gifts.display_bequest_message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC;

# 2022-03-23 15:33:02.671672
+WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC;

# 2022-03-23 15:34:27.241754
+select mirror_of from estate_plan where estate_id in (WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_plans.rand_id
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC);

# 2022-03-23 15:34:40.301667
+select mirror_of from estate_plans where estate_id in (WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_plans.rand_id
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC);

# 2022-03-23 15:34:54.352073
+select mirror_of from estate_plans where estate_id in (WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_plans.rand_id
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+ORDE BY
+    3 DESC);

# 2022-03-23 15:35:06.384210
+select mirror_of from estate_plans where estate_id in (WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_plans.rand_id
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,4,
+);

# 2022-03-23 15:35:10.648051
+select mirror_of from estate_plans where estate_id in (WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_plans.rand_id
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,4
+);

# 2022-03-23 15:35:18.010345
+select mirror_of from estate_plans where estate_id in (WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_plans.rand_id
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1
+);

# 2022-03-23 15:35:31.132405
+select mirror_of from estate_plans where rand_id in (WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_plans.rand_id
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1
+);

# 2022-03-23 15:35:54.798753
+WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC;

# 2022-03-23 15:36:06.834205
+(WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC);

# 2022-03-23 15:36:24.304972
+(WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message", estate_plans.rand_id as "estate_id
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC);

# 2022-03-23 15:36:30.802471
+(WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message", estate_plans.rand_id as "estate_id"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC);

# 2022-03-23 15:36:36.121030
+(WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message", estate_plans.rand_id as "estate_id"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4, 5
+ORDER BY
+    3 DESC);

# 2022-03-23 15:37:04.989439
+(WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    3 DESC);

# 2022-03-23 15:37:28.868023
+(WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message", distinct estate_plans.rand_id as "estate_id"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4, 5
+ORDER BY
+    3 DESC);

# 2022-03-23 15:37:37.527287
+(WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message", estate_plans.rand_id as "estate_id"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4, 5
+ORDER BY
+    3 DESC);

# 2022-03-23 15:37:55.961119
+select estate_plan from (WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message", estate_plans.rand_id as "estate_id"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4, 5
+ORDER BY
+    3 DESC) query;

# 2022-03-23 15:38:07.501158
+select estate_id from (WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message", estate_plans.rand_id as "estate_id"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4, 5
+ORDER BY
+    3 DESC) query;

# 2022-03-23 15:38:15.797105
+select distinct estate_id from (WITH estate_charitable_gifts AS ((SELECT * FROM public.estate_charitable_gifts WHERE deleted_at IS NULL))
+SELECT
+    estate_validity_reasons."reason"  AS "estate_validity_reasons.reason",
+    estate_validity_reasons."created_source"  AS "estate_validity_reasons.created_source",
+        (DATE(estate_validity_reasons."created_at" )) AS "estate_validity_reasons.created_date",
+    (CASE
+        WHEN (DATE(estate_charitable_gifts."created_at" )) >= '2020-08-20' THEN estate_charitable_gifts."message"
+        ELSE ''
+      END
+      )  AS "estate_charitable_gifts.display_bequest_message", estate_plans.rand_id as "estate_id"
+FROM public.estate_plans  AS estate_plans
+LEFT JOIN estate_charitable_gifts ON estate_plans.rand_id = estate_charitable_gifts.estate_id
+INNER JOIN public.profiles  AS profiles ON estate_plans.profile_id = (profiles."rand_id")
+LEFT JOIN public.estate_validity_reasons  AS estate_validity_reasons ON (estate_validity_reasons."estate_id") = estate_plans.rand_id
+WHERE (estate_plans."created_at" ) >= (TIMESTAMP '2022-02-14') AND (NOT (estate_plans.is_fake ) OR (estate_plans.is_fake ) IS NULL) AND (LENGTH(estate_validity_reasons."created_by" ) = 0 OR (estate_validity_reasons."created_by" ) IS NULL) AND (( estate_validity_reasons."reason"  ) ILIKE  'GIFT_MESSAGE_TEST') AND ((profiles."deleted_at") is null ) and estate_charitable_gifts.message not ilike '%test%' and estate_charitable_gifts.message not ilike '%fake%'
+GROUP BY
+    1,
+    2,
+    3,
+    4, 5
+ORDER BY
+    3 DESC) query;

# 2022-03-23 15:40:11.597552
+select mirror_of is not null from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message not ilike '%test%' and not ilike '%fake%' and estate_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST' and created_at > '2022-02-22'::timestamp));

# 2022-03-23 15:40:21.215470
+select mirror_of is not null from estate_plans where rand_id in (select estate_id from estate_charitable_gifts where message not ilike '%test%' and message not ilike '%fake%' and estate_id in (select estate_id from estate_validity_reasons where reason = 'GIFT_MESSAGE_TEST' and created_at > '2022-02-22'::timestamp));

# 2022-03-23 16:50:34.736901
+\q

# 2022-03-23 16:51:15.425413
+select reason from estate_validity_reasons where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-03-24 12:47:00.346558
+select * from estate_beneficiaries limit 1;

# 2022-03-24 12:47:09.758529
+\d estate_beneficiaries

# 2022-03-24 12:49:34.180639
+\d estate_charitable_gifts

# 2022-03-24 12:51:03.088539
+select count(*) from estate_charitable_gifts where message = '';

# 2022-03-24 12:51:05.679058
+select count(*) from estate_charitable_gifts where message is null;

# 2022-03-24 12:51:07.338223
+select count(*) from estate_charitable_gifts where message = '';

# 2022-03-24 14:56:57.352791
+select reason from estate_validity_reasons where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-03-24 15:22:08.660079
+select * from bad_words limit 1;

# 2022-03-24 15:22:54.184326
+select count(*) from bad_words where 'I do not want a funeral or service.' ilike word;

# 2022-03-24 15:23:00.159146
+select count(*) from bad_words where 'I do not want a funeral or servicepee.' ilike word;

# 2022-03-24 15:23:03.055243
+select count(*) from bad_words where 'I do not want a funeral or servicepoop.' ilike word;

# 2022-03-24 15:23:05.615469
+select count(*) from bad_words where 'I do not want a funeral or servicefuck.' ilike word;

# 2022-03-24 15:23:09.463750
+select count(*) from bad_words where 'I do not want a funeral or fuck service.' ilike word;

# 2022-03-24 15:23:13.192339
+select count(*) from bad_words where 'I do not want a funeral or service.' ilike word;

# 2022-03-24 15:23:18.632594
+select count(*) from bad_words where 'fuck' ilike word;

# 2022-03-24 15:23:32.335859
+select count(*) from bad_words where 'fuck' ilike '%' . word '%';

# 2022-03-24 15:23:35.552552
+select count(*) from bad_words where 'fuck' ilike '%' . word . '%';

# 2022-03-24 15:23:56.081860
+select count(*) from bad_words where 'fuck' ilike '%' || word || '%';

# 2022-03-24 15:24:04.169101
+select count(*) from bad_words where 'I do not want a funeral or service.' ilike '%' || word || '%';

# 2022-03-24 15:24:45.424419
+select count(*) from bad_words where 'I do not want a funeral or servicfucke.' ilike '%' || word || '%';

# 2022-03-24 15:25:20.953100
+select count(*) from bad_words where 'Burla or Cremation. No preference.' ilike '%' || word || '%';

# 2022-03-24 15:25:26.265247
+select count(*) from bad_words where 'Burial or Cremation. No preference.' ilike '%' || word || '%';

# 2022-03-24 15:27:42.123119
+select count(*) from estate_plans where rand_id in (select estate_id from estate_validity_reasons where reason = 'FUNERAL_WISHES_VULGAR') and rand_id not in (select estate_id from );

# 2022-03-24 15:27:47.915125
+\d estate_plans

# 2022-03-24 15:29:38.178690
+select * from estate_plans limit 1;

# 2022-03-24 15:30:43.767437
+\d funeral_instructions

# 2022-03-24 15:31:17.247166
+\d funeral_instructions_gifts

# 2022-03-24 15:31:28.039210
+\d funeral_instructions

# 2022-03-24 15:34:45.930916
+select count(*) from estate_plans where rand_id in (select estate_id from estate_validity_reasons where reason = 'FUNERAL_WISHES_VULGAR') and rand_id not in (select estate_id from profiles p join funeral_instructions fi on p.rand_id = fi.profile_id left join bad_words bw on true where fi.funeral_wishes ilike '%' || bw.word || '%');

# 2022-03-24 15:34:59.667512
+select count(*) from estate_plans where rand_id in (select estate_id from estate_validity_reasons where reason = 'FUNERAL_WISHES_VULGAR') and rand_id not in (select p.estate_id from profiles p join funeral_instructions fi on p.rand_id = fi.profile_id left join bad_words bw on true where fi.funeral_wishes ilike '%' || bw.word || '%');

# 2022-03-24 15:35:29.409876
+select count(*) from estate_plans where rand_id in (select estate_id from estate_validity_reasons where reason = 'FUNERAL_WISHES_VULGAR') and rand_id not in (select ep.rand_id from estate_plans ep join profiles p on ep.profile_id = p.rand_id join funeral_instructions fi on p.rand_id = fi.profile_id left join bad_words bw on true where fi.funeral_wishes ilike '%' || bw.word || '%');

# 2022-03-24 15:38:36.046633
+select fi.funeral_wishes from funeral_instructions fi join profiles p on p.rand_id = fi.profile_id join estate_plans ep on ep.profile_id = p.rand_id where ep.rand_id in (select estate_id from estate_validity_reasons where reason = 'FUNERAL_WISHES_VULGAR') and ep.rand_id not in (select ep.rand_id from estate_plans ep join profiles p on ep.profile_id = p.rand_id join funeral_instructions fi on p.rand_id = fi.profile_id left join bad_words bw on true where fi.funeral_wishes ilike '%' || bw.word || '%');

# 2022-03-24 16:27:18.010863
+select pg_database_size('freewill_dev')

# 2022-03-24 16:27:21.868293
+\q

# 2022-03-24 16:27:38.009746
+select pg_database_size('freewill_dev')

# 2022-03-24 16:27:42.889356
+select pg_database_size('thanos')

# 2022-03-24 16:27:57.242602
+select pg_size_pretty(pg_database_size('thanos'));

# 2022-03-24 16:28:02.116672
+\q

# 2022-03-24 16:28:08.243727
+select pg_size_pretty(pg_database_size('thanos'));

# 2022-03-24 16:28:13.092300
+select pg_size_pretty(pg_database_size('freewill_dev'));

# 2022-03-25 12:38:01.224530
+select reason from estate_validity_reasons where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-03-25 14:13:51.519299
+\q

# 2022-03-25 14:14:03.982087
+select * from estate_validity_reasons limit 1;

# 2022-03-25 14:14:26.412489
+select * from estate_validity_reasons where created_source = 'USER';

# 2022-03-25 14:14:33.541889
+select * from estate_validity_reasons where created_source = 'SYSTEM';

# 2022-03-25 14:14:40.093171
+select * from estate_validity_reasons where created_source = 'USER';

# 2022-03-28 12:21:47.008876
+\q

# 2022-03-28 12:40:35.211174
+select * from users limit 1;

# 2022-03-28 12:40:43.302153
+select * from users where deleted_at is not null;

# 2022-03-28 12:41:01.863214
+select * from users where deleted_at is not null and deleted_at > now() - '30 days'::interval;

# 2022-03-28 12:41:05.718118
+select count(*) from users where deleted_at is not null and deleted_at > now() - '30 days'::interval;

# 2022-03-28 12:41:08.437221
+select count(*) from users where deleted_at is not null and deleted_at > now() - '90 days'::interval;

# 2022-03-28 12:41:13.166587
+select count(*) from users where deleted_at is not null;

# 2022-03-28 12:41:21.336063
+select count(*) from users where deleted_at > now() - '90 days'::interval;

# 2022-03-28 12:41:28.742331
+select count(*) from users where delete_at is not null;

# 2022-03-28 12:41:33.091874
+select count(*) from users where null > now() - '90 days'::interval;

# 2022-03-28 12:41:35.479508
+select count(*) from users where deleted_at > now() - '90 days'::interval;

# 2022-03-28 13:43:06.083196
+select * from users limit 1;

# 2022-03-28 13:43:14.228110
+select * from users where email = 'riley@freewill.com';

# 2022-03-28 14:13:56.913289
+\q

# 2022-03-28 14:14:13.569212
+select * from users where email = 'ljmaillet@gmail.com';

# 2022-03-28 14:14:32.362627
+\d profiels

# 2022-03-28 14:14:33.720701
+\d profiles

# 2022-03-28 14:14:52.184951
+\d accounts

# 2022-03-28 14:14:56.561539
+\d profiles

# 2022-03-28 14:15:28.842596
+select p.* from profiles p join users u on p.account_id = u.rand_id where u.email = 'ljmaillet@gmail.com';

# 2022-03-29 11:37:31.829070
+select eb.* from estate_beneficiaries eb join profiles p on p.rand_id = eb.profile_id join users u on p.account_id = u.rand_id where u.email = 'ljmaillet@gmail.com';

# 2022-03-29 11:38:00.098772
+select eb.allocation_percent, eb.cash_amount from estate_beneficiaries eb join profiles p on p.rand_id = eb.profile_id join users u on p.account_id = u.rand_id where u.email = 'ljmaillet@gmail.com';

# 2022-03-29 11:38:07.836047
+select eb.rand_id, eb.allocation_percent, eb.cash_amount from estate_beneficiaries eb join profiles p on p.rand_id = eb.profile_id join users u on p.account_id = u.rand_id where u.email = 'ljmaillet@gmail.com';

# 2022-03-29 11:38:20.076464
+select * from estate_beneficiaries where rand_id = 'RDcaoe70';

# 2022-03-29 11:38:50.051741
+\d estate_beneficiaries

# 2022-03-29 11:43:42.003719
+select p.* from profiles p join users u on p.account_id = u.rand_id where u.email = 'ljmaillet@gmail.com';

# 2022-03-29 11:45:31.574688
+select * from estate_beneficiaries where rand_id = 'RDcaoe70';

# 2022-03-29 11:53:08.845028
+select p.* from profiles p join users u on p.account_id = u.rand_id where u.email = 'ljmaillet@gmail.com';

# 2022-03-29 12:35:27.911333
+\d estate_plans

# 2022-04-04 11:27:50.836494
+\q

# 2022-04-04 11:28:05.753296
+select * from estate_beneficiaries where rand_id = 'RDcaoe70';

# 2022-04-04 11:33:00.588008
+\q

# 2022-04-04 11:35:01.133950
+select reason from estate_validity_reasons where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-04-04 11:35:18.132241
+select * from estate_beneficiaries where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-04-04 11:36:07.913404
+select * from profiles where rand_id in (select profile_id from estate_plans order by created_at desc limit 1);

# 2022-04-04 11:36:15.755293
+select * from estate_beneficiaries where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-04-04 11:41:05.436787
+\q

# 2022-04-04 11:41:19.161954
+select p.* from profiles p join users u on p.account_id = u.rand_id where u.email = 'ljmaillet@gmail.com';

# 2022-04-04 11:42:16.629463
+select eb.* from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join profiles p on p.rand_id = ep.profile_id join users u on p.account_id = u.rand_id where u.email = 'ljmaillet@gmail.com';

# 2022-04-04 11:48:13.312287
+\q

# 2022-04-04 11:48:41.673545
+select * from estate_beneficiaries where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-04-04 12:56:56.019028
+\q

# 2022-04-04 12:57:05.043259
+select eb.* from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join profiles p on p.rand_id = ep.profile_id join users u on p.account_id = u.rand_id where u.email = 'ljmaillet@gmail.com';

# 2022-04-04 12:57:22.809262
+select eb.* from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join profiles p on p.rand_id = ep.profile_id join users u on p.account_id = u.rand_id where u.email = 'ljmaillet@gmail.com' and eb.allocation_percent is null and eb.cash_amount is null and eb.cash_amount_currency is null;

# 2022-04-04 12:58:12.753017
+select * from estate_charitable_gifts where rand_id = 'p0VsqTv0';

# 2022-04-04 12:58:58.449754
+select eb.* from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join profiles p on p.rand_id = ep.profile_id join users u on p.account_id = u.rand_id where u.email = 'ljmaillet@gmail.com' and eb.allocation_percent is null and eb.cash_amount is null and eb.cash_amount_currency is null;

# 2022-04-04 13:06:30.510205
+select * from estate_beneficiaries where rand_id = 'p0VsqTv0';

# 2022-04-04 13:06:45.670747
+select * from estate_beneficiaries where rand_id = '2SWO5AdK
+';

# 2022-04-04 13:06:47.772623
+select * from estate_beneficiaries where rand_id = '2SWO5AdK';

# 2022-04-04 13:07:48.429115
+\q

# 2022-04-04 13:07:55.229402
+select * from estate_beneficiaries where estate_id in (select rand_id from estate_plans order by created_at desc limit 1);

# 2022-04-05 12:55:50.177743
+select * from estate_beneficiaries limit 1;

# 2022-04-05 12:56:52.180383
+select * from estate_beneficiaries where charitable_gift_id is not null limit 1;

# 2022-04-05 12:57:11.741453
+select * from estate_charitable_gifts where rand_id in (select charitable_gift_id from estate_beneficiaries where charitable_gift_id is not null limit 1);

# 2022-04-06 12:25:29.154308
+\q

# 2022-04-07 12:08:15.130732
+select evr.reason from estate_validity_reasons evr join estate_plans ep ON ep.rand_id = evr.estate_id join funeral_instructions fi on fi.estate_portion;;;

# 2022-04-07 12:08:20.013705
+select * from funeral_instructions limit 1;

# 2022-04-07 12:09:44.336468
+select evr.reason from estate_validity_reasons evr join estate_plans ep ON ep.rand_id = evr.estate_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where fi.funeral_wishes ilike ANY((select * from bad_words));

# 2022-04-07 12:10:30.310073
+select fi.funeral_wishes from funeral_instructions fi join profiles p on p.rand_id = fi.profile_id join estate_plans ep on ep.profile_id = p.rand_id where ep.rand_id in (select estate_id from estate_validity_reasons where reason = 'FUNERAL_WISHES_VULGAR') and ep.rand_id not in (select ep.rand_id from estate_plans ep join profiles p on ep.profile_id = p.rand_id join funeral_instructions fi on p.rand_id = fi.profile_id left join bad_words bw on true where fi.funeral_wishes ilike '%' || bw.word || '%');

# 2022-04-07 12:11:50.779968
+select fi.funeral_wishes from funeral_instructions fi join profiles p on p.rand_id = fi.profile_id join estate_plans ep on ep.profile_id = p.rand_id where ep.rand_id in (select estate_id from estate_validity_reasons where reason = 'FUNERAL_WISHES_VULGAR') and ep.rand_id not in (select ep.rand_id from estate_plans ep join profiles p on ep.profile_id = p.rand_id join funeral_instructions fi on p.rand_id = fi.profile_id left join bad_words bw on true where fi.funeral_wishes ilike '%' || bw.word || '%' and fi.resting_place ilike '%' || bw.word || '%');

# 2022-04-07 12:11:59.192071
+select fi.funeral_wishes from funeral_instructions fi join profiles p on p.rand_id = fi.profile_id join estate_plans ep on ep.profile_id = p.rand_id where ep.rand_id in (select estate_id from estate_validity_reasons where reason = 'FUNERAL_WISHES_VULGAR') and ep.rand_id not in (select ep.rand_id from estate_plans ep join profiles p on ep.profile_id = p.rand_id join funeral_instructions fi on p.rand_id = fi.profile_id left join bad_words bw on true where fi.funeral_wishes ilike '%' || bw.word || '%' || fi.resting_place ilike '%' || bw.word || '%');

# 2022-04-07 12:12:03.815202
+select fi.funeral_wishes from funeral_instructions fi join profiles p on p.rand_id = fi.profile_id join estate_plans ep on ep.profile_id = p.rand_id where ep.rand_id in (select estate_id from estate_validity_reasons where reason = 'FUNERAL_WISHES_VULGAR') and ep.rand_id not in (select ep.rand_id from estate_plans ep join profiles p on ep.profile_id = p.rand_id join funeral_instructions fi on p.rand_id = fi.profile_id left join bad_words bw on true where fi.funeral_wishes ilike '%' || bw.word || '%' or fi.resting_place ilike '%' || bw.word || '%');

# 2022-04-07 12:15:45.785006
+select * from bad_words limit 1;

# 2022-04-07 12:15:59.660018
+select array_agg(word) from bad_words;

# 2022-04-07 12:16:31.997296
+select fi.* from funeral_instructions where funeral_wishes ilike ANY (select array_agg('%' || word || '%') from bad_words);

# 2022-04-07 12:16:37.911466
+select fi.* from funeral_instructions fi where fi.funeral_wishes ilike ANY (select array_agg('%' || word || '%') from bad_words);

# 2022-04-07 12:16:47.251941
+select fi.* from funeral_instructions fi where fi.funeral_wishes ilike ANY(select array_agg('%' || word || '%') from bad_words);

# 2022-04-07 12:17:11.278305
+select fi.* from funeral_instructions fi where fi.funeral_wishes ilike ANY(ARRAY(select array_agg('%' || word || '%') from bad_words));

# 2022-04-07 12:18:52.988566
+select fi.* from funeral_instructions fi where fi.funeral_wishes ilike ANY(ARRAY(select array_agg('%' || word || '%') from bad_words)) limit 10;

# 2022-04-07 12:19:22.999113
+select fi.* from funeral_instructions fi where fi.funeral_wishes ilike ANY(ARRAY(select array_agg('%' || word || '%') from bad_words)) and fi.created_at > now() - '3 months'::interval ;

# 2022-04-07 12:21:54.983733
+select count(ep.*) from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id where evr.reason = 'FUNERAL_INSTRUCTIONS_VULGAR';

# 2022-04-07 12:22:04.848751
+select * from estate_validity_reasons limit 10;

# 2022-04-07 12:22:15.075247
+select * from estate_validity_reasons where reason ilike '%funeral%';

# 2022-04-07 12:22:21.918843
+select count(ep.*) from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR';

# 2022-04-07 12:24:59.110801
+select count(ep.*) from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%' from bad_words bw)));

# 2022-04-07 12:25:13.952927
+select count(ep.*) from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw));

# 2022-04-07 12:28:10.110763
+select count(ep.*) from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and (fi.resting_place ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) or fi.funeral_wishes ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)));

# 2022-04-07 12:28:26.459546
+select count(ep.*) from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw));

# 2022-04-07 12:33:14.490082
+select 'blahblahblahfuckblahblah' ilike '%fuck%';

# 2022-04-07 12:33:18.209219
+select 'blahblahblahfuckblahblah' not ilike '%fuck%';

# 2022-04-07 12:33:21.183587
+select 'blahblahblahfuckblahblah' ilike '%fuck%';

# 2022-04-07 12:33:25.772486
+select 'blahblahblahfuck blahblah' ilike '%fuck%';

# 2022-04-07 12:33:46.770063
+select 'blahblahblahFuck blahblah' ilike '%fuck%';

# 2022-04-07 12:33:51.947469
+select count(ep.*) from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw));

# 2022-04-07 12:35:02.391269
+select ep.created_at from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) order by ep.created_at desc limit 1;

# 2022-04-07 12:35:14.452084
+select ep.rand_id, ep.created_at from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) order by ep.created_at desc limit 1;

# 2022-04-07 12:35:44.836489
+select evr.reason from estate_validity_reasons evr where ep.estate_id = 'DQifxZNN'

# 2022-04-07 12:35:49.251427
+select evr.reason from estate_validity_reasons evr where evr.estate_id = 'DQifxZNN'

# 2022-04-07 12:36:52.221995
+select fi.* from funeral_wishes fi where fi.profile_id in (select ep.profile_id from estate_plans ep where ep.rand_id = 'DQifxZNN');

# 2022-04-07 12:36:58.791550
+select fi.* from funeral_instructions fi where fi.profile_id in (select ep.profile_id from estate_plans ep where ep.rand_id = 'DQifxZNN');

# 2022-04-07 12:37:18.434280
+select fi.rand_id, fi.funeral_wishes, fi.resting_place from funeral_instructions fi where fi.profile_id in (select ep.profile_id from estate_plans ep where ep.rand_id = 'DQifxZNN');

# 2022-04-07 12:45:28.334541
+select fi.funeral_wishes from funeral_instructions fi where fi.profile_id in (select ep.profile_id from estate_plans ep where ep.rand_id = 'DQifxZNN');

# 2022-04-07 12:50:01.444337
+select ep.rand_id, ep.created_at from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) order by ep.created_at desc limit 20;

# 2022-04-07 12:50:40.232004
+select count(*) from estate_plans where created_at > now() - '5 days'::interval;

# 2022-04-07 12:57:14.049173
+select count(ep.*) from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ANY(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw));

# 2022-04-07 12:58:37.581430
+select 'blahblahblahfuckblah' ilike ANY(ARRAY(select array_agg('%'||bw.word||'%') from bad_words bw));

# 2022-04-07 12:58:42.710533
+select 'blahblahblahfuckblah' not ilike ANY(ARRAY(select array_agg('%'||bw.word||'%') from bad_words bw));

# 2022-04-07 12:58:48.603269
+select 'blahblahblahfuckblah' ilike ANY(ARRAY(select array_agg('%'||bw.word||'%') from bad_words bw));

# 2022-04-07 12:58:57.245125
+select 'blahblahblahfuckblah' ilike ANY(ARRAY(select '%'||bw.word||'%' from bad_words bw));

# 2022-04-07 12:59:02.165424
+select 'blahblahblahfuckblah' not ilike ANY(ARRAY(select '%'||bw.word||'%' from bad_words bw));

# 2022-04-07 12:59:03.165256
+select 'blahblahblahfuckblah' ilike ANY(ARRAY(select '%'||bw.word||'%' from bad_words bw));

# 2022-04-07 12:59:04.575498
+select 'blahblahblahfuckblah' not ilike ANY(ARRAY(select '%'||bw.word||'%' from bad_words bw));

# 2022-04-07 12:59:13.012232
+select 'blahblahblahfuckblah' not ilike ANY(select '%'||bw.word||'%' from bad_words bw));

# 2022-04-07 12:59:22.708354
+select 'blahblahblahfuckblah' not ilike ANY(select '%'||bw.word||'%' from bad_words bw);

# 2022-04-07 12:59:41.307256
+select * from bad_words where word ilike '%fuck%';

# 2022-04-07 12:59:47.473251
+select * from bad_words where word ilike 'fuck';

# 2022-04-07 12:59:50.252365
+select 'blahblahblahfuckblah' not ilike ANY(select '%'||bw.word||'%' from bad_words bw);

# 2022-04-07 13:00:01.399142
+select 'blahfuckblah' not ilike ANY(select '%'||bw.word||'%' from bad_words bw);

# 2022-04-07 13:00:09.450233
+select 'blahfuckblah' ilike '%fuck%';

# 2022-04-07 13:00:14.885952
+select 'blahfuckblah' not ilike '%fuck%';

# 2022-04-07 13:00:18.506217
+select 'blahfuckblah' not ilike ANY(select '%'||bw.word||'%' from bad_words bw);

# 2022-04-07 13:00:27.121947
+select 'blahfuckblah' not ilike ANY(select array_agg('%'||bw.word||'%') from bad_words bw);

# 2022-04-07 13:00:34.800161
+select 'blahfuckblah' not ilike (select array_agg('%'||bw.word||'%') from bad_words bw);

# 2022-04-07 13:00:40.352554
+select 'blahfuckblah' not ilike ANY(select array_agg('%'||bw.word||'%') from bad_words bw);

# 2022-04-07 13:00:46.890718
+select 'blahfuckblah' not ilike ANY(select '%'||bw.word||'%' from bad_words bw);

# 2022-04-07 13:01:30.597932
+select 'blahfuckblah' not in (select 'blahfuckblah' from bad_words bw where 'blahfuckblah' ilike '%' || bw.word || '%');

# 2022-04-07 13:01:35.039759
+select 'blahfuckblah' in (select 'blahfuckblah' from bad_words bw where 'blahfuckblah' ilike '%' || bw.word || '%');

# 2022-04-07 13:01:36.893331
+select 'blahfuckblah' not in (select 'blahfuckblah' from bad_words bw where 'blahfuckblah' ilike '%' || bw.word || '%');

# 2022-04-07 13:28:52.621330
+select count(bw.word) from bad_words where '%' || bw.word || '%' ilike 'blahfuckblah';

# 2022-04-07 13:30:59.162400
+\q

# 2022-04-07 13:31:06.060830
+select count(bw.word) from bad_words where '%' || bw.word || '%' ilike 'blahfuckblah';

# 2022-04-07 13:31:10.115330
+select count(bw.word) from bad_words bw where '%' || bw.word || '%' ilike 'blahfuckblah';

# 2022-04-07 13:31:24.845365
+select count(bw.word) from bad_words bw where 'blahfuckblah' ilike '%' || bw.word || '%';

# 2022-04-07 13:34:46.369356
+select count(*) from (select 'blahfuckblah' as col) query where query.col ilike '%fuck%';

# 2022-04-07 13:35:54.070339
+select count(*) from (select funeral_wishes as col from funeral_instructions limit 10) query where query.col ilike '%fuck%';

# 2022-04-07 13:35:57.355006
+select count(*) from (select funeral_wishes as col from funeral_instructions limit 10) query where query.col ilike '%%';

# 2022-04-07 13:35:59.342846
+select count(*) from (select funeral_wishes as col from funeral_instructions limit 10) query where query.col ilike '%a%';

# 2022-04-07 13:36:00.943554
+select count(*) from (select funeral_wishes as col from funeral_instructions limit 10) query where query.col ilike '%aa%';

# 2022-04-07 13:36:02.700901
+select count(*) from (select funeral_wishes as col from funeral_instructions limit 10) query where query.col ilike '%b%';

# 2022-04-07 13:46:16.614606
+select 'fuck' ilike ANY(ARRAY['a','b','fuck']);

# 2022-04-07 13:46:20.056874
+select 'fuck' not ilike ANY(ARRAY['a','b','fuck']);

# 2022-04-07 13:48:10.318394
+select 'fuck' not ilike ALL(ARRAY['a','b','fuck']);

# 2022-04-07 13:48:15.480315
+select 'fuck' ilike ALL(ARRAY['a','b','fuck']);

# 2022-04-07 13:48:19.142749
+select 'fuck' ilike ANY(ARRAY['a','b','fuck']);

# 2022-04-07 13:48:25.838250
+select 'fuck' not ilike ALL(ARRAY['a','b','fuck']);

# 2022-04-07 13:48:54.691605
+select count(ep.*) from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw));

# 2022-04-07 13:51:29.206917
+select count(ep.*) from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) order by ep.created_at desc limit 1;

# 2022-04-07 13:51:47.026055
+select ep.created_at from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) order by ep.created_at desc limit 1;

# 2022-04-07 13:53:15.531746
+select ep.created_at from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) order by ep.created_at desc limit 10;

# 2022-04-08 13:39:42.632592
+select * from bad_words where word ilike 'f%u%c%k%';

# 2022-04-08 13:53:38.114086
+select count(ep.*) from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw));

# 2022-04-08 13:53:54.290730
+select fi.funeral_wishes, fi.resting_place from estate_plans ep join estate_validity_reasons evr on evr.estate_id = ep.rand_id join profiles p on p.rand_id = ep.profile_id join funeral_instructions fi on fi.profile_id = p.rand_id where evr.reason = 'FUNERAL_WISHES_VULGAR' and fi.resting_place not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw)) and fi.funeral_wishes not ilike ALL(ARRAY(select array_agg('%' || bw.word || '%') from bad_words bw));

# 2022-04-11 13:45:29.481730
+\q

# 2022-04-11 13:45:44.902529
+select profile_id from profiles limit 1;

# 2022-04-11 13:45:49.257165
+select rand_id from profiles limit 1;

# 2022-04-12 13:32:32.120796
+\q

# 2022-04-12 13:32:47.096114
+select * from users where rand_id = '3ad94187';

# 2022-04-12 13:32:55.357360
+select * from profiles where rand_id = '3ad94187';

# 2022-04-14 14:12:32.751776
+\q

# 2022-04-14 14:12:51.016463
+select * from profiles where rand_id = '3d24af75';

# 2022-04-14 14:12:55.238741
+select count(*) from profiles where rand_id = '3d24af75';

# 2022-04-14 14:13:00.886863
+select count(*) > 0 from profiles where rand_id = '3d24af75';

# 2022-04-14 14:13:25.376119
+select count(*) > 0 from users where rand_id = '3d24af75';

# 2022-04-14 14:13:27.911536
+select count(*) > 0 from profiles where rand_id = '3d24af75';

# 2022-04-14 14:13:28.639770
+select count(*) > 0 from users where rand_id = '3d24af75';

# 2022-04-14 14:16:55.631412
+select count(*) > 0 from users where rand_id = '81609251';

# 2022-04-14 14:17:01.504791
+select count(*) > 0 from profiles where rand_id = '81609251';

# 2022-04-14 14:17:07.817203
+select count(*) > 0 from profiles where rand_id = 'e746159a';

# 2022-04-14 14:17:11.980333
+select count(*) > 0 from users where rand_id = 'e746159a';

# 2022-04-14 14:18:20.385053
+select rand_id from users where email = 'riley+hotjartesting@freewill.com';

# 2022-04-14 14:18:42.142505
+select * from profiles limit 1;

# 2022-04-14 14:18:59.237704
+select * from users limit 1;

# 2022-04-14 14:19:07.176792
+\d profiles

# 2022-04-14 14:19:36.890948
+select rand_id from profiles where account_id = '';

# 2022-04-14 14:19:40.482892
+select rand_id from profiles where account_id = 'McGVk7Cn';

# 2022-04-14 14:24:27.890867
+select LENGTH( rand_id ) from profiles limit 1;

# 2022-04-14 14:24:37.200308
+select MAX(LENGTH( rand_id )) from profiles;

# 2022-04-14 14:26:57.792103
+select rand_id from profiles where account_id = 'McGVk7Cn';

# 2022-04-14 14:28:30.438476
+select * from profiles where account_id = 'McGVk7Cn';

# 2022-04-14 14:33:40.803684
+select rand_id from users where email = 'riley+hotjartesting@freewill.com';

# 2022-04-14 14:33:56.769360
+select f_name, rand_id from profiles where account_id = 'McGVk7Cn';

# 2022-04-14 14:34:01.834753
+select name, rand_id from profiles where account_id = 'McGVk7Cn';

# 2022-04-14 14:34:10.065974
+select f_name->first, rand_id from profiles where account_id = 'McGVk7Cn';

# 2022-04-14 14:34:13.394163
+select f_name->'first', rand_id from profiles where account_id = 'McGVk7Cn';

# 2022-04-14 14:34:19.785029
+select f_name->'first' as first_name, rand_id from profiles where account_id = 'McGVk7Cn';

# 2022-04-14 14:45:12.534382
+select f_name->'first' as first_name, rand_id from profiles where account_id in (select rand_id from users where email='riley+hotjartesting1@freewill.com');

# 2022-04-14 14:55:08.805079
+select count(*) from estate_plans where created_at > now() - '20 minutes'::interval;

# 2022-04-14 14:55:38.846357
+select p.rand_id from profiles p join estate_plans ep on ep.profile_id = p.rand_id where ep.created_at > now() - '20 minutes'::interval;

# 2022-04-14 14:59:10.939701
+select p.rand_id from profiles p join estate_plans ep on ep.profile_id = p.rand_id where ep.created_at > now() - '20 minutes'::interval and p.rand_id ilike 'q%';

# 2022-04-14 14:59:21.027861
+select p.rand_id from profiles p join estate_plans ep on ep.profile_id = p.rand_id where ep.created_at > now() - '20 minutes'::interval and p.rand_id like 'q%';

# 2022-04-14 14:59:31.370805
+select p.rand_id from profiles p join estate_plans ep on ep.profile_id = p.rand_id where ep.created_at > now() - '2 hours'::interval and p.rand_id like 'q%';

# 2022-04-14 14:59:57.399096
+select p.rand_id from profiles p join estate_plans ep on ep.profile_id = p.rand_id where ep.created_at > now() - '3 hours'::interval and p.rand_id like 'q%';

# 2022-04-14 15:00:26.968387
+select * from users limit 1;

# 2022-04-14 15:00:40.124568
+select * from profiles where f_name->'last' = '"Durrett"';

# 2022-04-14 15:00:55.821651
+select * from profiles where f_name->'last' = '"Durrett"' and f_name->'first' = '"Erin"';

# 2022-04-14 15:08:16.338065
+select * from profiles where rand_id = 'qJCf7TPu'

# 2022-04-14 15:08:19.123566
+select * from profiles where rand_id = 'qJCf7TPu';

# 2022-04-14 15:10:42.077688
+select * from profiles where rand_id = '2CEcPxvN';

# 2022-04-15 12:37:38.702067
+\d profiles

# 2022-04-15 19:46:56.126870
+\q

# 2022-04-18 11:35:38.299559
+select * from profiles where rand_id = '123456';

# 2022-04-18 14:28:56.813962
+\q

# 2022-04-26 11:35:48.177151
+\d will_metrics

# 2022-04-26 11:36:48.560640
+\d estate_charity_impressions

# 2022-04-26 11:37:00.285675
+select metrics from  estate_charity_impressions limit 10;

# 2022-04-26 11:37:04.736046
+select metrics from estate_charity_impressions limit 10;

# 2022-04-26 11:37:16.543575
+select metrics->"displayedCategory" from estate_charity_impressions limit 10;

# 2022-04-26 11:37:20.279813
+select metrics->'displayedCategory' from estate_charity_impressions limit 10;

# 2022-04-26 11:37:41.623333
+select count(*) from estate_charity_impressions where metrics->'displayedCategory' is null;

# 2022-04-26 11:37:51.991053
+select distinct metrics->'displayedCategory' from estate_charity_impressions;

# 2022-04-26 11:38:10.171877
+select metrics->'displayedCategory', count(*) from estate_charity_impressions group by metrics->'displayedCategory';

# 2022-04-26 11:38:13.735875
+\q

# 2022-04-26 11:38:21.760558
+select metrics->'displayedCategory', count(*) from estate_charity_impressions group by metrics->'displayedCategory';

# 2022-04-26 12:14:34.659944
+select metrics from estate_charity_impressions limit 20;

# 2022-04-26 12:14:45.687319
+select * from estate_charity_impressions limit 20;

# 2022-04-26 12:15:07.346523
+select * from estate_charitable_gifts limit 10;

# 2022-04-26 12:15:22.667319
+select * from estate_charitable_gifts where impression_id is not null;

# 2022-04-26 12:15:39.895590
+select metrics from estate_charitable_gifts where impression_id is not null;

# 2022-04-26 12:15:58.790381
+select metrics from estate_charitable_gifts where impression_id is not null and metics->'displayedCategory' is null;

# 2022-04-26 12:16:03.676269
+select metrics from estate_charitable_gifts where impression_id is not null and metrics->'displayedCategory' is null;

# 2022-04-26 12:16:17.778644
+select metrics->'giftSource' from estate_charitable_gifts where impression_id is not null and metrics->'displayedCategory' is null;

# 2022-04-26 12:17:06.091876
+select ecg.metrics->'giftSource' from estate_charitable_gifts ecg join estate_charity_impressions eci ON eci.id = ecg.impression_id where eci.metrics->'displayedCategory' is null;

# 2022-04-26 12:17:17.747624
+select count(*) from estate_charitable_gifts ecg join estate_charity_impressions eci ON eci.id = ecg.impression_id where eci.metrics->'displayedCategory' is null;

# 2022-04-26 12:17:36.482955
+select metrics from estate_charity_impressions;

# 2022-04-26 12:17:40.535121
+select metrics from estate_charity_impressions limit 1;

# 2022-04-26 12:17:52.497996
+select metrics from estate_charity_impressions where metrics->'displayedCategory' is null;

# 2022-04-26 12:21:42.533020
+select count(*) from estate_charitable_gifts where metrics->'giftSource' = 'charity';

# 2022-04-26 12:21:53.598161
+select metrics from estate_charitable_gifts limit 1;

# 2022-04-26 12:21:55.225933
+select metrics from estate_charitable_gifts limit 10;

# 2022-04-26 12:22:16.181228
+select distinct metrics->'giftSource' from estate_charitable_gifts;

# 2022-04-26 12:23:17.570992
+select distinct metrics->'giftSource' from estate_charitable_gifts ecg join estate_plans ep on ep.rand_id = ecg.estate_id join estate_charity_impressions eci on eci.estate_id = ep.rand_id;

# 2022-04-26 12:23:22.216987
+select distinct ecg.metrics->'giftSource' from estate_charitable_gifts ecg join estate_plans ep on ep.rand_id = ecg.estate_id join estate_charity_impressions eci on eci.estate_id = ep.rand_id;

# 2022-04-26 12:23:41.144348
+select ecg.metrics->'giftSource', count(*) from estate_charitable_gifts ecg join estate_plans ep on ep.rand_id = ecg.estate_id join estate_charity_impressions eci on eci.estate_id = ep.rand_id group by ecg.metrics->'giftSource';

# 2022-04-26 12:24:08.156055
+select ecg.metrics->'giftSource', count(*) from estate_charitable_gifts ecg join estate_plans ep on ep.rand_id = ecg.estate_id join estate_charity_impressions eci on eci.estate_id = ep.rand_id where eci.metrics->'displayCategory' is null group by ecg.metrics->'giftSource';

# 2022-04-29 13:30:41.094508
+fj

# 2022-05-05 12:55:16.275318
+select * from estate_nominees where rand_id = 'TDCDkCsN';

# 2022-05-05 12:55:29.184749
+\d estate_nominees

# 2022-05-05 12:55:38.634597
+select contact_id from estate_nominees where rand_id = 'TDCDkCsN';

# 2022-05-05 12:55:44.953015
+select * from contacts where rand_id in (select contact_id from estate_nominees where rand_id = 'TDCDkCsN');

# 2022-05-09 13:55:35.272323
+select * from non_probate_assets limit 1;

# 2022-05-09 13:55:43.643375
+select * from non_probate_assets where profile_id = 'pWC0WXw4';

# 2022-05-09 13:55:47.853136
+\q

# 2022-05-09 13:55:59.763073
+select * from non_probate_assets where profile_id = 'pWC0WXw4';

# 2022-05-09 13:56:07.100239
+\q

# 2022-05-16 12:22:46.817518
+select * from organizations limit 1;

# 2022-05-16 12:27:42.903725
+\d organizations

# 2022-05-16 12:28:12.915283
+select * from featureships limit 1;

# 2022-05-16 12:28:25.926459
+select distinct featured_tab from featureships;

# 2022-05-16 12:41:46.080627
+select * from organizations limit 1;

# 2022-05-16 12:41:56.536994
+select category from organizations limit 1;

# 2022-05-16 12:42:01.008986
+select * from programs limit 1;

# 2022-05-16 12:42:17.720425
+select distinct category from programs limit 1;

# 2022-05-16 12:42:22.369667
+\q

# 2022-05-16 12:42:26.953293
+select distinct category from programs limit 1;

# 2022-05-16 12:44:49.645562
+select distinct category from programs;

# 2022-05-17 12:15:04.171747
+select distinct ntee_family from organizations;

# 2022-05-17 12:15:45.098580
+select ntee_family, count(*) from organizations group by ntee_family;

# 2022-05-23 14:58:09.537598
+select * FROM organizations where rand_id is null;

# 2022-05-25 12:42:09.724373
+SELECT
+    (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN 'Yes' ELSE 'No' END) AS "estate_plans.is_valid_finished",
+    COUNT(DISTINCT estate_charitable_gifts.rand_id ) AS "estate_charitable_gifts.count_gifts"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('',','))
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-25 12:42:12.699295
+\e

# 2022-05-25 12:44:55.388446
+SELECT
+    (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN 'Yes' ELSE 'No' END) AS "estate_plans.is_valid_finished",
+    COUNT(DISTINCT estate_charitable_gifts.rand_id ) AS "estate_charitable_gifts.count_gifts"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('',','))
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-25 12:44:57.691788
+\e

# 2022-05-25 12:45:14.428088
+SELECT
+    (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN 'Yes' ELSE 'No' END) AS "estate_plans.is_valid_finished",
+    COUNT(DISTINCT estate_charitable_gifts.rand_id ) AS "estate_charitable_gifts.count_gifts"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('',','))
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-25 12:45:16.188322
+\e

# 2022-05-25 12:45:27.572902
+SELECT
+    (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN 'Yes' ELSE 'No' END) AS "estate_plans.is_valid_finished",
+    COUNT(DISTINCT estate_charitable_gifts.rand_id ) AS "estate_charitable_gifts.count_gifts"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-25 12:45:41.208039
+select * from programs limit 1;

# 2022-05-25 12:45:51.490721
+\d programs

# 2022-05-25 12:46:03.228544
+SELECT
+    (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN 'Yes' ELSE 'No' END) AS "estate_plans.is_valid_finished",
+    COUNT(DISTINCT estate_charitable_gifts.rand_id ) AS "estate_charitable_gifts.count_gifts"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('',','))
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-25 12:46:04.314631
+\e

# 2022-05-25 12:46:33.565276
+SELECT
+    (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN 'Yes' ELSE 'No' END) AS "estate_plans.is_valid_finished",
+    COUNT(DISTINCT estate_charitable_gifts.rand_id ) AS "estate_charitable_gifts.count_gifts"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-25 12:46:44.103535
+SELECT
+    (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN 'Yes' ELSE 'No' END) AS "estate_plans.is_valid_finished",
+    COUNT(DISTINCT estate_charitable_gifts.rand_id ) AS "estate_charitable_gifts.count_gifts"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('',','))
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-25 12:46:45.117330
+\e

# 2022-05-25 12:57:10.806987
+select rand_id from organizations limit 10;

# 2022-05-25 12:58:07.417995
+\q

# 2022-05-25 12:58:14.523851
+select rand_id from organizations limit 10;

# 2022-05-25 12:58:22.556194
+select rand_id from organizations limit 1 offset 100;

# 2022-05-26 13:20:48.237415
+\q

# 2022-05-26 13:21:10.293892
+select distinct count(*) from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL

# 2022-05-26 13:21:21.707752
+select distinct count(*) from estate_charitable_gifts;

# 2022-05-26 13:21:49.579345
+\d estate_charitable_gifts

# 2022-05-26 13:26:58.107850
+select distinct count(ecg.*) from estate_charitable_gifts ecg left join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id and o.rand_id = ANY(STRING_TO_ARRAY('VQ8bfZWh',','));

# 2022-05-26 13:28:38.989207
+select distinct count(ecg.*) from estate_charitable_gifts ecg left join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id and o.rand_id = ANY(STRING_TO_ARRAY('VQ8bfZWh',',')) join estate_plans ep on ecg.estate_id = ep.rand_id where ep.is_fake = false or ep.is_fake is null;

# 2022-05-26 13:28:51.568085
+select distinct count(ecg.*) from estate_charitable_gifts ecg left join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id and o.rand_id = ANY(STRING_TO_ARRAY('VQ8bfZWh',',')) join estate_plans ep on ecg.estate_id = ep.rand_id where (ep.is_fake = false or ep.is_fake is null);

# 2022-05-26 13:29:11.873620
+select distinct count(ecg.*) from estate_charitable_gifts ecg left join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id and o.rand_id = ANY(STRING_TO_ARRAY('VQ8bfZWh',',')) join estate_plans ep on ecg.estate_id = ep.rand_id join profiles p on ecg.profile_id = p.rand_id where (ep.is_fake = false or ep.is_fake is null) and p.deleted_at is null;

# 2022-05-26 13:29:22.640422
+select distinct count(ecg.*) from estate_charitable_gifts ecg left join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id and o.rand_id = ANY(STRING_TO_ARRAY('VQ8bfZWh',',')) join estate_plans ep on ecg.estate_id = ep.rand_id join profiles profiles on ecg.profile_id = p.rand_id where (ep.is_fake = false or ep.is_fake is null) and profiles.deleted_at is null;

# 2022-05-26 13:29:33.146644
+select distinct count(ecg.*) from estate_charitable_gifts ecg left join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id and o.rand_id = ANY(STRING_TO_ARRAY('VQ8bfZWh',',')) join estate_plans ep on ecg.estate_id = ep.rand_id join profiles on ecg.profile_id = profiles.rand_id where (ep.is_fake = false or ep.is_fake is null) and profiles.deleted_at is null;

# 2022-05-26 13:36:47.765482
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+    COALESCE(will_and_trust_charitable_gifts.cash_amount_currency, (((CASE
+    -- USD
+    WHEN wills.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN wills.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+)
+)) AS "will_and_trust_charitable_gifts.currency",
+    (CASE
+    -- USD
+    WHEN wills.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN wills.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)  AS "wills.currency",
+    ((CASE
+          WHEN (COALESCE(will_and_trust_charitable_gifts.cash_amount_currency, (((CASE
+    -- USD
+    WHEN wills.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN wills.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+)
+))
+) = 'USD' THEN '$'
+          WHEN (COALESCE(will_and_trust_charitable_gifts.cash_amount_currency, (((CASE
+    -- USD
+    WHEN wills.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN wills.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+)
+))
+) = 'CAD' THEN 'CA$'
+          ELSE CONCAT((COALESCE(will_and_trust_charitable_gifts.cash_amount_currency, (((CASE
+    -- USD
+    WHEN wills.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN wills.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN wills.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN wills.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+)
+))
+), ' ')
+          END)
+) AS "will_and_trust_charitable_gifts.currency_symbol",
+    COALESCE(SUM(CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN ( (CASE
+        WHEN amount_type = 1 THEN will_and_trust_charitable_gifts.amount
+        WHEN amount_type = 0 THEN (((CASE
+    -- USD
+    WHEN wills.asset_value_range = 'gt-10mm-usd'       THEN 12500000
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-usd'  THEN 7500000
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-usd'   THEN 3500000
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-usd'   THEN 1500000
+    WHEN wills.asset_value_range = 'btw-500k-1mm-usd'  THEN 750000
+    WHEN wills.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN wills.asset_value_range = 'lt-200k-usd'       THEN 100000
+
+    -- CAD
+    WHEN wills.asset_value_range = 'gt-10mm-cad'       THEN 12500000
+    WHEN wills.asset_value_range = 'btw-5mm-10mm-cad'  THEN 7500000
+    WHEN wills.asset_value_range = 'btw-2mm-5mm-cad'   THEN 3500000
+    WHEN wills.asset_value_range = 'btw-1mm-2mm-cad'   THEN 1500000
+    WHEN wills.asset_value_range = 'btw-500k-1mm-cad'  THEN 750000
+    WHEN wills.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN wills.asset_value_range = 'lt-200k-cad'       THEN 100000
+    ELSE 0
+    END)
+)
+) * will_and_trust_charitable_gifts.amount/100
+        ELSE 0
+        END)  )  ELSE NULL END), 0) AS "will_and_trust_charitable_gifts.bequest_sum"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'American Heart Association') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1,
+    2,
+    3
+FETCH NEXT 500 ROWS ONLY

# 2022-05-26 13:37:04.030271
+SELECT
+    COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))  AS "estate_beneficiaries.estimated_gift_value_currency",
+    (CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)  AS "estate_plans.currency",
+    (CASE
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'USD' THEN '$'
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'CAD' THEN 'CA$'
+      ELSE CONCAT((COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+), ' ')
+      END
+) AS "estate_beneficiaries.estimated_gift_value_currency_symbol",
+        (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN 'Yes' ELSE 'No' END) AS "estate_plans.is_valid_finished",
+    COALESCE(SUM(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END), 0) AS "estate_beneficiaries.charitable_gift_completed_sum_no_link"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    5 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-26 13:39:56.444150
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (( organizations.display_name  ) ILIKE  'American Heart Association') AND ((profiles."deleted_at") is null )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-26 13:40:23.317270
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (( organizations.display_name  ) ILIKE  'American Heart Association') AND ((profiles."deleted_at") is null ) AND public.estate_plans.last_section_completed = 'review'
+FETCH NEXT 500 ROWS ONLY

# 2022-05-26 13:40:32.803686
+\e

# 2022-05-26 13:41:02.227231
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+        and ep.last_section_completed = 'review'
+            )
+SELECT
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (( organizations.display_name  ) ILIKE  'American Heart Association') AND ((profiles."deleted_at") is null )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-26 13:41:10.305758
+\e

# 2022-05-26 13:41:16.037420
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+        and ep.last_section_completed = 'review'
+            )
+SELECT
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (( organizations.display_name  ) ILIKE  'American Heart Association') AND ((profiles."deleted_at") is null )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-26 13:41:38.024844
+\e

# 2022-05-26 13:42:15.235988
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+        and ep.last_section_completed = 'review'
+        and (not ep.is_fake or ep.is_fake is null)
+            )
+SELECT
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (( organizations.display_name  ) ILIKE  'American Heart Association') AND ((profiles."deleted_at") is null )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-26 13:42:16.863516
+\e

# 2022-05-26 13:43:52.144272
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+        and ep.last_section_completed = 'review'
+        and (not ep.is_fake or ep.is_fake is null)
+       and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+            )
+SELECT
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (( organizations.display_name  ) ILIKE  'American Heart Association') AND ((profiles."deleted_at") is null )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-26 13:43:56.090099
+\e

# 2022-05-26 13:44:34.788874
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+        and ep.last_section_completed = 'review'
+        and (not ep.is_fake or ep.is_fake is null)
+       and (COALESCE(eb.cash_amount,(eb.allocation_percent/100)*((CASE
+    -- USD
+    WHEN ep.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN ep.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN ep.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN ep.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN ep.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN ep.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN ep.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN ep.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN ep.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN ep.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN ep.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN ep.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN ep.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN ep.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+            )
+SELECT
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (( organizations.display_name  ) ILIKE  'American Heart Association') AND ((profiles."deleted_at") is null )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-26 13:46:05.072999
+\e

# 2022-05-26 13:46:42.927670
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+        and ep.last_section_completed = 'review'
+        and (not ep.is_fake or ep.is_fake is null)
+       and (COALESCE(eb.cash_amount,(eb.allocation_percent/100)*((CASE
+    -- USD
+    WHEN ep.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN ep.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN ep.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN ep.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN ep.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN ep.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN ep.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN ep.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN ep.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN ep.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN ep.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN ep.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN ep.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN ep.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    AND ((ecg.created_at) <= NOW() - interval '24 hours') = 'yes'
+            )
+SELECT
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (( organizations.display_name  ) ILIKE  'American Heart Association') AND ((profiles."deleted_at") is null )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-26 14:26:46.148545
+select rand_id from organizations where display_name = 'Luterhan World Relief';

# 2022-05-26 14:27:00.943634
+select rand_id from organizations where display_name = 'Lutheran World Relief';

# 2022-05-31 11:32:03.086331
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 11:32:06.593835
+\e

# 2022-05-31 11:32:30.933330
+select bequest_source from estate_charitable_gifts limit 10;

# 2022-05-31 11:32:45.434318
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 11:32:46.705391
+\e

# 2022-05-31 11:33:01.510838
+select * from estate_charitable_gifts limit 1;

# 2022-05-31 11:33:19.626851
+select metrics from estate_charitable_gifts where metrics != {} limit 1;

# 2022-05-31 11:33:30.441867
+select metrics from estate_charitable_gifts where metrics != '{}'::json limit 1;

# 2022-05-31 11:33:33.208048
+select metrics from estate_charitable_gifts where metrics != '{}'::jsonb limit 1;

# 2022-05-31 11:33:42.346743
+select metrics->>'giftSource' from estate_charitable_gifts where metrics != '{}'::jsonb limit 1;

# 2022-05-31 11:33:49.929689
+select distinct metrics->>'giftSource' from estate_charitable_gifts where metrics != '{}'::jsonb;

# 2022-05-31 11:34:41.231521
+select distinct metrics->>'giftSource', count(*) from estate_charitable_gifts where metrics != '{}'::jsonb group by metrics->>'giftSource';

# 2022-05-31 11:37:05.216483
+select distinct ecg.metrics->>'giftSource', count(ecg.*) from estate_charitable_gifts ecg join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = programs.rand_id join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id and o.rand_id = 'X88V1zK1' where metrics != '{}'::jsonb group by metrics->>'giftSource';

# 2022-05-31 11:37:22.357290
+select distinct ecg.metrics->>'giftSource', count(ecg.*) from estate_charitable_gifts ecg join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id and o.rand_id = 'X88V1zK1' where metrics != '{}'::jsonb group by metrics->>'giftSource';

# 2022-05-31 11:37:26.861518
+\e

# 2022-05-31 11:37:30.764190
+\q

# 2022-05-31 11:37:37.847849
+select distinct ecg.metrics->>'giftSource', count(ecg.*) from estate_charitable_gifts ecg join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id and o.rand_id = 'X88V1zK1' where metrics != '{}'::jsonb group by metrics->>'giftSource';

# 2022-05-31 11:37:55.597102
+select distinct ecg.metrics->>'giftSource', count(ecg.*) from estate_charitable_gifts ecg join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id and o.rand_id = any(string_to_array('X88V1zK1', '')) where metrics != '{}'::jsonb group by metrics->>'giftSource';

# 2022-05-31 11:38:21.765455
+select distinct ecg.metrics->>'giftSource', count(ecg.*) from estate_charitable_gifts ecg join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id and o.rand_id = any(string_to_array('X88V1zK1', '')) group by metrics->>'giftSource';

# 2022-05-31 11:38:27.725086
+\e

# 2022-05-31 11:39:17.609763
+select distinct ecg.metrics->>'giftSource', count(ecg.*)
+  from estate_charitable_gifts ecg
+  join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', '')) group by metrics->>'giftSource';

# 2022-05-31 11:40:17.288013
+\e

# 2022-05-31 11:40:25.616750
+select distinct ecg.metrics->>'giftSource', count(ecg.*)
+  from estate_charitable_gifts ecg
+  join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+ group by metrics->>'giftSource';

# 2022-05-31 11:40:31.490626
+\e

# 2022-05-31 11:43:00.863899
+select distinct ecg.metrics->>'giftSource', count(ecg.*)
+  from estate_charitable_gifts ecg
+  join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+  join estate_plans ep on ecg.estate_id = ep.rand_id
+  join profiles on ecg.estate_id = ep.rand_id
+ where ep.last_section_completed = 'review'
+   and ( ep.is_fake = false or rp.is_fake is null ) and profiles.deleted_at is null
+ group by metrics->>'giftSource';

# 2022-05-31 11:43:05.400767
+\e

# 2022-05-31 11:43:11.779113
+select distinct ecg.metrics->>'giftSource', count(ecg.*)
+  from estate_charitable_gifts ecg
+  join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+  join estate_plans ep on ecg.estate_id = ep.rand_id
+  join profiles on ecg.estate_id = ep.rand_id
+ where ep.last_section_completed = 'review'
+   and ( ep.is_fake = false or ep.is_fake is null ) and profiles.deleted_at is null
+ group by metrics->>'giftSource';

# 2022-05-31 11:43:57.799362
+\e

# 2022-05-31 11:44:59.877764
+select distinct ecg.metrics->>'giftSource', count(ecg.*)
+  from estate_charitable_gifts ecg
+  join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+  join estate_plans ep on ecg.estate_id = ep.rand_id
+  join profiles on ecg.estate_id = ep.rand_id
+ where ep.last_section_completed = 'review'
+   and ( ep.is_fake = false or ep.is_fake is null ) and profiles.deleted_at is null
+   and ecg.deleted_at is null
+   and ( not ep.is_fake or ep.is_fake is null )
+   and ( ecg.created_at <= NOW() - interval '24 hours' ) = 'yes'
+ group by metrics->>'giftSource';

# 2022-05-31 11:45:13.037754
+e\

# 2022-05-31 11:45:13.956050
+\e

# 2022-05-31 11:45:19.492537
+select distinct ecg.metrics->>'giftSource', count(ecg.*)
+  from estate_charitable_gifts ecg
+  join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+  join estate_plans ep on ecg.estate_id = ep.rand_id
+  join profiles on ecg.estate_id = ep.rand_id
+ where ep.last_section_completed = 'review'
+   and ( ep.is_fake = false or ep.is_fake is null ) and profiles.deleted_at is null
+   and ecg.deleted_at is null
+   and ( not ep.is_fake or ep.is_fake is null )
+   and ( ecg.created_at <= NOW() - interval '24 hours' ) = 'yes'
+ group by metrics->>'giftSource';

# 2022-05-31 11:45:20.594603
+\e

# 2022-05-31 11:45:30.739202
+select distinct ecg.metrics->>'giftSource', count(ecg.*)
+  from estate_charitable_gifts ecg
+  join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+  join estate_plans ep on ecg.estate_id = ep.rand_id
+  join profiles on ecg.estate_id = ep.rand_id
+ where ep.last_section_completed = 'review'
+   and ( ep.is_fake = false or ep.is_fake is null ) and profiles.deleted_at is null
+   and ecg.deleted_at is null
+   and ( not ep.is_fake or ep.is_fake is null )
+   and ( ecg.created_at <= NOW() - interval '24 hours' ) = 'yes'
+ group by metrics->>'giftSource'
+ fetch next 500 rows only;

# 2022-05-31 11:45:42.377946
+\e

# 2022-05-31 11:45:52.874163
+select distinct ecg.metrics->>'giftSource', count(ecg.*)
+  from estate_charitable_gifts ecg
+  join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+  join estate_plans ep on ecg.estate_id = ep.rand_id
+  join profiles on ecg.estate_id = ep.rand_id
+ where ep.last_section_completed = 'review'
+   and ( ep.is_fake = false or ep.is_fake is null ) and profiles.deleted_at is null
+   and ecg.deleted_at is null
+   and ( not ep.is_fake or ep.is_fake is null )
+   and ( ecg.created_at <= NOW() - interval '24 hours' ) = 'yes'
+ group by 1
+ order by 2 desc
+ fetch next 500 rows only;

# 2022-05-31 11:46:47.637949
+\e

# 2022-05-31 11:47:09.278135
+select distinct ecg.metrics->>'giftSource', count(ecg.*)
+  from estate_charitable_gifts ecg
+  left join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+  join estate_plans ep on ecg.estate_id = ep.rand_id
+  join profiles on ecg.estate_id = ep.rand_id
+ where ep.last_section_completed = 'review'
+   and ( ep.is_fake = false or ep.is_fake is null ) and profiles.deleted_at is null
+   and ecg.deleted_at is null
+   and ( not ep.is_fake or ep.is_fake is null )
+   and ( ecg.created_at <= NOW() - interval '24 hours' ) = 'yes'
+ group by 1
+ order by 2 desc
+ fetch next 500 rows only;

# 2022-05-31 11:47:50.131362
+\e

# 2022-05-31 11:47:52.005018
+select distinct ecg.metrics->>'giftSource', count(ecg.*)
+  from estate_charitable_gifts ecg
+  left join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+  join estate_plans ep on ecg.estate_id = ep.rand_id
+  join profiles on ecg.estate_id = ep.rand_id
+ where ep.last_section_completed = 'review'
+   and ( ep.is_fake = false or ep.is_fake is null ) and profiles.deleted_at is null
+   and ecg.deleted_at is null
+   and ( not ep.is_fake or ep.is_fake is null )
+   and ( ecg.created_at <= NOW() - interval '24 hours' ) = 'yes'
+ group by 1
+ order by 2 desc
+ fetch next 500 rows only;

# 2022-05-31 11:47:52.776262
+\e

# 2022-05-31 11:50:02.040508
+select
+  CASE
+  WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+       and (organization_custom_urls."url_name") is null
+       then 'freewill_feature'
+  WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+       BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+       )) IN (
+           SELECT CONCAT('/', (organization_custom_urls."url_name"))
+       )
+       then 'partner_site'
+  WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+           AND ((
+       BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+       )) is not null
+           AND ((
+       BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+       )) NOT IN (
+           SELECT CONCAT('/', (organization_custom_urls."url_name"))
+       )
+       then 'partner_feature'
+  WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+  ELSE 'other'
+  END AS "estate_charitable_gifts.bequest_source",
+  count(ecg.*)
+  from estate_charitable_gifts ecg
+  left join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+  join estate_plans ep on ecg.estate_id = ep.rand_id
+  join profiles on ecg.estate_id = ep.rand_id
+ where ep.last_section_completed = 'review'
+   and ( ep.is_fake = false or ep.is_fake is null ) and profiles.deleted_at is null
+   and ecg.deleted_at is null
+   and ( not ep.is_fake or ep.is_fake is null )
+   and ( ecg.created_at <= NOW() - interval '24 hours' ) = 'yes'
+ group by 1
+ order by 2 desc
+ fetch next 500 rows only;

# 2022-05-31 11:50:06.590933
+\e

# 2022-05-31 11:50:35.527699
+select
+  CASE
+  WHEN LOWER((ecg."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+       and (organization_custom_urls."url_name") is null
+       then 'freewill_feature'
+  WHEN LOWER((ecg."metrics")  ->> 'giftSource') != 'write_in' AND ((
+       BTRIM(LOWER((ep."meta_info") -> 'location' -> 'path' ->> 0), '/')
+       )) IN (
+           SELECT CONCAT('/', (organization_custom_urls."url_name"))
+       )
+       then 'partner_site'
+  WHEN LOWER((ecg."metrics")  ->> 'giftSource') != 'write_in'
+           AND ((
+       BTRIM(LOWER((ep."meta_info") -> 'location' -> 'path' ->> 0), '/')
+       )) is not null
+           AND ((
+       BTRIM(LOWER((ep."meta_info") -> 'location' -> 'path' ->> 0), '/')
+       )) NOT IN (
+           SELECT CONCAT('/', (organization_custom_urls."url_name"))
+       )
+       then 'partner_feature'
+  WHEN LOWER((ecg."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+  ELSE 'other'
+  END AS "estate_charitable_gifts.bequest_source",
+  count(ecg.*)
+  from estate_charitable_gifts ecg
+  left join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+  join estate_plans ep on ecg.estate_id = ep.rand_id
+  join profiles on ecg.estate_id = ep.rand_id
+ where ep.last_section_completed = 'review'
+   and ( ep.is_fake = false or ep.is_fake is null ) and profiles.deleted_at is null
+   and ecg.deleted_at is null
+   and ( not ep.is_fake or ep.is_fake is null )
+   and ( ecg.created_at <= NOW() - interval '24 hours' ) = 'yes'
+ group by 1
+ order by 2 desc
+ fetch next 500 rows only;

# 2022-05-31 11:50:37.258071
+\e

# 2022-05-31 11:51:13.968399
+select
+  CASE
+  WHEN LOWER((ecg."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+       and (organization_custom_urls."url_name") is null
+       then 'freewill_feature'
+  WHEN LOWER((ecg."metrics")  ->> 'giftSource') != 'write_in' AND ((
+       BTRIM(LOWER((ep."meta_info") -> 'location' -> 'path' ->> 0), '/')
+       )) IN (
+           SELECT CONCAT('/', (organization_custom_urls."url_name"))
+       )
+       then 'partner_site'
+  WHEN LOWER((ecg."metrics")  ->> 'giftSource') != 'write_in'
+           AND ((
+       BTRIM(LOWER((ep."meta_info") -> 'location' -> 'path' ->> 0), '/')
+       )) is not null
+           AND ((
+       BTRIM(LOWER((ep."meta_info") -> 'location' -> 'path' ->> 0), '/')
+       )) NOT IN (
+           SELECT CONCAT('/', (organization_custom_urls."url_name"))
+       )
+       then 'partner_feature'
+  WHEN LOWER((ecg."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+  ELSE 'other'
+  END AS "estate_charitable_gifts.bequest_source",
+  count(ecg.*)
+  from estate_charitable_gifts ecg
+  left join programs p on coalesce(ecg.reassociated_program_id, ecg.program_id) = p.rand_id
+  join organizations o on coalesce(p.organization_id, ecg.organization_id) = o.rand_id
+   and o.rand_id = any(string_to_array('X88VlzK1', ''))
+  join estate_plans ep on ecg.estate_id = ep.rand_id
+  join profiles on ecg.estate_id = ep.rand_id
+ where ep.last_section_completed = 'review'
+   and ( ep.is_fake = false or ep.is_fake is null ) and profiles.deleted_at is null
+   and ecg.deleted_at is null
+   and ( not ep.is_fake or ep.is_fake is null )
+   and ( ecg.created_at <= NOW() - interval '24 hours' ) = 'yes'
+ group by 1
+ order by 2 desc
+ fetch next 500 rows only;

# 2022-05-31 11:51:23.601119
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 11:51:28.348682
+\e

# 2022-05-31 11:52:11.382729
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 11:52:13.532936
+\e

# 2022-05-31 11:52:21.990189
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 11:52:23.277852
+\e

# 2022-05-31 11:52:28.677721
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 11:52:54.414134
+\e

# 2022-05-31 11:53:04.988596
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 11:53:24.988326
+\e

# 2022-05-31 11:54:26.986945
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review') and (estate_plans.is_fake = false or estate_plans.is_fake is null))
+  AND ((profiles."deleted_at") is null
+        and (estate_charitable_gifts."deleted_at") is null
+        and (not estate_plans.is_fake or estate_plans.is_fake is null)
+      )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 11:54:28.722171
+\e

# 2022-05-31 11:55:18.557401
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+WHERE ((estate_plans.last_section_completed = 'review') and (estate_plans.is_fake = false or estate_plans.is_fake is null))
+  AND ((profiles."deleted_at") is null
+        and (estate_charitable_gifts."deleted_at") is null
+        and (not estate_plans.is_fake or estate_plans.is_fake is null)
+      )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 11:56:59.858986
+select distinct metrics->>'giftSource' from estate_charitable_gifts;

# 2022-05-31 11:57:59.236016
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+WHERE ((estate_plans.last_section_completed = 'review') and (estate_plans.is_fake = false or estate_plans.is_fake is null))
+  AND ((profiles."deleted_at") is null
+        and (estate_charitable_gifts."deleted_at") is null
+        and (not estate_plans.is_fake or estate_plans.is_fake is null)
+      )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 11:58:00.136080
+\e

# 2022-05-31 11:58:20.146687
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    array_agg(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+WHERE ((estate_plans.last_section_completed = 'review') and (estate_plans.is_fake = false or estate_plans.is_fake is null))
+  AND ((profiles."deleted_at") is null
+        and (estate_charitable_gifts."deleted_at") is null
+        and (not estate_plans.is_fake or estate_plans.is_fake is null)
+      )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 11:58:33.771200
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+    CASE
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+      END AS "will_and_trust_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 11:58:37.057673
+\e

# 2022-05-31 11:58:46.552055
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+    CASE
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+      END AS "will_and_trust_charitable_gifts.bequest_source",
+    array_agg(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 11:59:08.281774
+select * from estate_charitable_gifts ecg where ecg.rand_id = '0ebxTuw7';e

# 2022-05-31 11:59:10.408296
+select * from estate_charitable_gifts ecg where ecg.rand_id = '0ebxTuw7';

# 2022-05-31 12:00:17.727152
+select * from organizations where rand_id = 'X88VlzK1';

# 2022-05-31 12:00:33.181804
+select * from organization_custom_urls where organization_id = 'X88VlzK1';

# 2022-05-31 12:04:11.849368
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+    CASE
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+      END AS "will_and_trust_charitable_gifts.bequest_source",
+    array_agg(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:04:25.636360
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:04:26.704625
+\e

# 2022-05-31 12:04:40.350159
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:04:57.456308
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+    CASE
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+      END AS "will_and_trust_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:04:59.330748
+\e

# 2022-05-31 12:05:07.360411
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+    CASE
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+      END AS "will_and_trust_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+inner JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:08:19.211581
+\e

# 2022-05-31 12:08:24.219847
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+            )
+SELECT
+    CASE
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+      END AS "will_and_trust_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+inner JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:11:50.431847
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:11:51.353344
+\e

# 2022-05-31 12:11:58.247529
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:12:07.332302
+\e

# 2022-05-31 12:13:15.830928
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:13:49.927073
+\e

# 2022-05-31 12:14:17.459630
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',',')) AND organizations.display_name = 'Lutheran World Relief'
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:14:21.614969
+\e

# 2022-05-31 12:14:34.571232
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 12:15:00.390059
+\e

# 2022-05-31 12:16:09.219330
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics->>'giftSource' is null)) AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 12:16:11.587255
+\e

# 2022-05-31 12:16:21.466305
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics->>'giftSource') is null) AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 12:16:27.786500
+\e

# 2022-05-31 12:20:34.618170
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (
+                 LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR
+                 LOWER(metrics->>'giftSource') is null
+             )
+             AND
+             ( BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/') ) IN (
+                 SELECT CONCAT('/', (organization_custom_urls."url_name"))
+             )
+        then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name") AND organization_custom_urls.url_name is not null
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 12:20:46.488988
+\e

# 2022-05-31 12:21:01.762714
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (
+                 LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR
+                 LOWER(metrics->>'giftSource') is null
+             )
+             AND
+             ( BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/') ) IN (
+                 SELECT CONCAT('/', (organization_custom_urls."url_name"))
+             )
+        then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name") AND organization_custom_urls.url_name is not null
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 12:21:04.607434
+\e

# 2022-05-31 12:21:12.646438
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (
+                 LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR
+                 LOWER(metrics->>'giftSource') is null
+             )
+             AND
+             ( BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/') ) IN (
+                 SELECT CONCAT('/', (organization_custom_urls."url_name"))
+             )
+        then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 12:21:58.113758
+\e

# 2022-05-31 12:22:04.521669
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (
+                 LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR
+                 LOWER(metrics->>'giftSource') is null
+             )
+             AND
+             ( BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/') ) IN (
+                 SELECT CONCAT('/', (organization_custom_urls."url_name"))
+             )
+        then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 12:22:09.681801
+\e

# 2022-05-31 12:22:21.736700
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (
+                 LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR
+                 LOWER(metrics->>'giftSource') is null
+             )
+             AND
+             ( BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/') ) IN (
+                 SELECT CONCAT('/', (organization_custom_urls."url_name"))
+             )
+        then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 12:22:29.504484
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:22:34.190845
+\e

# 2022-05-31 12:24:22.092826
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:24:24.415094
+\e

# 2022-05-31 12:25:10.612498
+SELECT
+  organization_custom_urls.url_name
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;p

# 2022-05-31 12:25:11.732496
+SELECT
+  organization_custom_urls.url_name
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 12:25:17.932825
+SELECT
+  organization_custom_urls.url_name
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+
+FETCH NEXT 500 ROWS ONLY;

# 2022-05-31 12:25:31.927145
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+    CASE
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+      END AS "will_and_trust_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:25:33.083722
+\e

# 2022-05-31 12:25:50.597448
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+  organization_custom_urls.url_name
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:27:15.947860
+\e

# 2022-05-31 12:27:20.877571
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+  organization_custom_urls.url_name
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:27:27.191024
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:27:28.475831
+\e

# 2022-05-31 12:27:35.932718
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:27:37.011096
+\e

# 2022-05-31 12:29:03.715222
+SELECT
+    LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:29:07.220205
+\e

# 2022-05-31 12:29:28.264792
+SELECT
+    LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:29:52.738928
+\e

# 2022-05-31 12:31:53.192607
+SELECT
+    LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    organization_custom_urls.url_name
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:32:10.287507
+\e

# 2022-05-31 12:32:51.023768
+SELECT
+    LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    organization_custom_urls.url_name
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:32:55.933524
+\e

# 2022-05-31 12:33:21.317354
+SELECT
+    LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    concat( '/', organization_custom_urls.url_name )
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:33:33.053418
+\e

# 2022-05-31 12:33:57.513896
+SELECT
+    LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    concat( '/', organization_custom_urls.url_name )
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:34:00.376752
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:34:01.821522
+\e

# 2022-05-31 12:34:11.966314
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT organization_custom_urls."url_name"
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:34:25.509593
+\e

# 2022-05-31 12:34:30.604104
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT organization_custom_urls."url_name"
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:35:29.888186
+SELECT
+    LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    concat( '/', organization_custom_urls.url_name )
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:35:36.141382
+\e

# 2022-05-31 12:35:42.534355
+SELECT
+    LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    organization_custom_urls.url_name
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:35:57.432491
+\e

# 2022-05-31 12:36:48.016815
+SELECT
+    LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    organization_custom_urls.url_name
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  and btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') in (select organization_custom_urls.url_name)
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:36:51.840417
+\e

# 2022-05-31 12:37:05.073522
+SELECT
+    LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    organization_custom_urls.url_name
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  and btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') = organization_custom_urls.url_name
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:37:08.960426
+\e

# 2022-05-31 12:40:07.383830
+SELECT
+    LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    organization_custom_urls.url_name
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  and btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') = organization_custom_urls.url_name
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:40:20.009486
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:40:20.901244
+\e

# 2022-05-31 12:40:42.166625
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:40:50.763672
+\e

# 2022-05-31 12:42:50.180611
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) != organization_custom_urls."url_name"
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:42:53.167361
+\e

# 2022-05-31 12:42:59.593684
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) != organization_custom_urls."url_name"
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:43:00.859833
+\e

# 2022-05-31 12:43:12.412977
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:43:14.006685
+\e

# 2022-05-31 12:43:22.757898
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT organization_custom_urls."url_name"
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:43:39.469706
+\e

# 2022-05-31 12:44:36.201325
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:44:38.301032
+\e

# 2022-05-31 12:44:45.595023
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:44:48.834764
+\e

# 2022-05-31 12:45:21.266542
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:45:23.379674
+\e

# 2022-05-31 12:45:57.452535
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:46:00.329869
+\e

# 2022-05-31 12:46:44.922167
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  and btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') != organization_custom_urls.url_name
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:46:46.492136
+\e

# 2022-05-31 12:46:55.068515
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:47:06.594644
+\e

# 2022-05-31 12:47:30.116710
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:47:41.226781
+select 'thing' != null;

# 2022-05-31 12:47:48.266550
+select 'thing' != 'aaa';

# 2022-05-31 12:47:54.089568
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:47:55.931797
+\e

# 2022-05-31 12:48:20.603129
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') != COALESCE(organization_custom_urls.url_name, '')
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:48:44.891192
+\e

# 2022-05-31 12:49:06.940224
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') != COALESCE(concat( '/', organization_custom_urls.url_name), '')
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:49:11.433423
+\e

# 2022-05-31 12:49:20.802597
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') != COALESCE(concat( '/', organization_custom_urls.url_name), '')
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:49:26.788700
+select concat('aaa', null)

# 2022-05-31 12:49:31.095475
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') != COALESCE(concat( '/', organization_custom_urls.url_name), '')
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:49:33.540432
+\e

# 2022-05-31 12:49:37.244776
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') != COALESCE(concat( '/', organization_custom_urls.url_name), '')
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:49:46.005591
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:49:47.137985
+\e

# 2022-05-31 12:50:23.025912
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT coalesce(organization_custom_urls."url_name", '')
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT coalesce(organization_custom_urls."url_name", '')
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:50:25.443505
+\e

# 2022-05-31 12:51:05.786561
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = coalesce(organization_custom_urls."url_name", '')
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) != coalesce(organization_custom_urls."url_name", '')
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:51:12.449384
+\e

# 2022-05-31 12:51:23.830553
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) != coalesce(organization_custom_urls."url_name", '')
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:51:33.065907
+\e

# 2022-05-31 12:51:36.770653
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) != coalesce(organization_custom_urls."url_name", '')
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:51:45.920301
+\e

# 2022-05-31 12:52:07.817997
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) != coalesce(organization_custom_urls."url_name", '')
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = coalesce(organization_custom_urls."url_name", '')
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:52:10.674602
+\e

# 2022-05-31 12:52:50.931775
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) != coalesce(organization_custom_urls."url_name", '')
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = coalesce(organization_custom_urls."url_name", '')
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:52:52.798922
+\e

# 2022-05-31 12:53:59.161803
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) != coalesce(organization_custom_urls."url_name", '')
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = coalesce(organization_custom_urls."url_name", '')
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:54:47.103170
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') != COALESCE(concat( '/', organization_custom_urls.url_name), '')
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:54:49.815609
+\e

# 2022-05-31 12:55:14.683665
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') != COALESCE(organization_custom_urls.url_name, '')
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:55:20.711269
+\e

# 2022-05-31 12:56:20.059901
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') != COALESCE(organization_custom_urls.url_name, '')
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:56:29.958691
+\e

# 2022-05-31 12:56:43.117929
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') not in (select organization_custom_urls.url_name)
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:56:45.094499
+\e

# 2022-05-31 12:56:55.771182
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') not in (select COALESCE(organization_custom_urls.url_name, ''))
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:57:55.669559
+\e

# 2022-05-31 12:58:25.117399
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') not in (select COALESCE(organization_custom_urls.url_name, ''))
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:58:28.825272
+\e

# 2022-05-31 12:58:33.585188
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') not in (select COALESCE(organization_custom_urls.url_name, ''))
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:58:35.940195
+\e

# 2022-05-31 12:59:40.773510
+SELECT
+        LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource'),
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+            organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND lower(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND btrim(lower(estate_plans.meta_info->'location'->'path'->>0), '/') not in (select COALESCE(organization_custom_urls.url_name, ''))
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:59:42.309841
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 12:59:43.385276
+\e

# 2022-05-31 13:00:18.987491
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT organization_custom_urls."url_name"
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT COALESCE(organization_custom_urls."url_name", '')
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:00:24.242495
+\e

# 2022-05-31 13:00:37.170244
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:00:38.547644
+\e

# 2022-05-31 13:00:47.755261
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT organization_custom_urls."url_name"
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:00:58.699726
+\e

# 2022-05-31 13:02:00.031761
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT organization_custom_urls."url_name"
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:02:01.698988
+\e

# 2022-05-31 13:02:21.730807
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) != organization_custom_urls."url_name"
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:02:23.138104
+\e

# 2022-05-31 13:02:34.322477
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) != COALESCE( organization_custom_urls."url_name", '' )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:02:35.912244
+\e

# 2022-05-31 13:03:03.322386
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) != COALESCE( organization_custom_urls."url_name", '' )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:03:04.392797
+\e

# 2022-05-31 13:03:15.103374
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     is not null
+            AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     != COALESCE( organization_custom_urls."url_name", '' )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:03:16.378188
+\e

# 2022-05-31 13:03:23.191769
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     is not null
+            AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     != COALESCE( organization_custom_urls."url_name", '' )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:03:24.257137
+\e

# 2022-05-31 13:04:25.192540
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     is not null
+            AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     != COALESCE( organization_custom_urls."url_name", '' )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:04:33.872253
+\e

# 2022-05-31 13:04:42.296197
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     is not null
+            AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     != COALESCE( organization_custom_urls."url_name", '' )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:04:43.522209
+\e

# 2022-05-31 13:05:03.728944
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     != COALESCE( organization_custom_urls."url_name", '' )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:05:05.955621
+\e

# 2022-05-31 13:05:50.345716
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND
+    ( BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     != organization_custom_urls."url_name" OR organization_custom_urls.url_name is null )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:05:58.562515
+\e

# 2022-05-31 13:07:36.072094
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     != organization_custom_urls."url_name"
+            and organization_custom_urls.url_name is null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:07:37.295565
+\e

# 2022-05-31 13:09:28.775756
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+     = organization_custom_urls."url_name"
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND
+    (
+      select count(*) from organization_custom_urls ocu where ocu.organization_id = organization_custom_urls.organization_id and ocu.url_name = BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ) = 0 and organization_custom_urls.url_name is not null
+            and organization_custom_urls.url_name is null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:09:30.542677
+\e

# 2022-05-31 13:09:38.364458
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND
+    (
+      select count(*) from organization_custom_urls ocu where ocu.organization_id = organization_custom_urls.organization_id and ocu.url_name = BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ) = 0 and organization_custom_urls.url_name is not null
+            and organization_custom_urls.url_name is null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:09:40.689519
+\e

# 2022-05-31 13:11:11.390059
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' or lower(estate_charitable_gifts.metrics->>'giftSource' is null))
+            AND
+    (
+      select count(*) from organization_custom_urls ocu where ocu.organization_id = organization_custom_urls.organization_id and ocu.url_name = BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ) = 0 and organization_custom_urls.url_name is not null
+            and organization_custom_urls.url_name is null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:11:14.918004
+\e

# 2022-05-31 13:11:27.258005
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' or lower(estate_charitable_gifts.metrics->>'giftSource') is null)
+            AND
+    (
+      select count(*) from organization_custom_urls ocu where ocu.organization_id = organization_custom_urls.organization_id and ocu.url_name = BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ) = 0 and organization_custom_urls.url_name is not null
+            and organization_custom_urls.url_name is null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:11:35.196741
+\e

# 2022-05-31 13:11:51.949419
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' or lower(estate_charitable_gifts.metrics->>'giftSource') is null)
+            AND
+    (
+      select count(*) from organization_custom_urls ocu where ocu.organization_id = organization_custom_urls.organization_id and ocu.url_name = BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ) = 0
+            and organization_custom_urls.url_name is null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:11:58.291198
+\e

# 2022-05-31 13:12:07.649058
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' or lower(estate_charitable_gifts.metrics->>'giftSource') is null)
+            AND
+    (
+      select count(*) from organization_custom_urls ocu where ocu.organization_id = organization_custom_urls.organization_id and ocu.url_name = BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ) = 0 and organization_custom_urls.url_name is not null
+            and organization_custom_urls.url_name is null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:12:09.164577
+\e

# 2022-05-31 13:15:39.931352
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+
+        WHEN (
+                 LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' or
+                 lower(estate_charitable_gifts.metrics->>'giftSource') is null
+             )
+             AND
+             BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/') != organization_custom_urls.url_name
+             AND
+             organization_custom_urls.url_name is not null
+             THEN 'partner_feature'
+
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:15:42.123445
+\e

# 2022-05-31 13:15:52.121915
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+
+        WHEN (
+                 LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' or
+                 lower(estate_charitable_gifts.metrics->>'giftSource') is null
+             )
+             AND
+             BTRIM(LOWER(estate_plans.meta_info -> 'location' -> 'path' ->> 0), '/') != organization_custom_urls.url_name
+             AND
+             organization_custom_urls.url_name is not null
+             THEN 'partner_feature'
+
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:15:53.385631
+\e

# 2022-05-31 13:16:23.398352
+SELECT
+  estate_plans.rand_id
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:16:48.970786
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+    CASE
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+      END AS "will_and_trust_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:16:50.023588
+\e

# 2022-05-31 13:17:03.721808
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+  estate_plans.rand_id
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:17:04.389880
+\e

# 2022-05-31 13:17:07.750191
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+  estate_plans.rand_id
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:17:09.471759
+\e

# 2022-05-31 13:17:24.608912
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+  will_and_trust_charitable_gifts.estate_id
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:18:17.543935
+select | wxpoRqc4  |
+| 8SKeLxPL  |
+| XlzoyJJH  |
+| y3axVCc9  |
+| OMQElQfa  |
+| UXhgYpwu  |
+| n9u3jGYj  |
+| 8qjxy7Bw  |
+| NkxPtvYZ  |
+| qT9dUs53  |
+| E9al4Vy1  |
+| OQ8iOVC9  |
+| 819p88MV  |
+| 1JFHnDF8  |
+| Thi8MozT  |
+| cATj9PMx  |
+| OYMvBCVP  |
+| ry9W9ykg  |
+| kvJXbTui  |
+| e2HE7CfG  |
+| CI6Gf8Bh  |
+| LLockpEL  |
+| ws3xIUFZ  |
+| zfVO7Fzr  |
+| qsoEOjHC  |
+| yhohW1ah  |
+| Y7ZqcWX1  |
+| VvR0E6R0  |
+| upgOyaRb  |
+| GRfqxOqP  |
+| v62bbHOk  |
+| JKh06Wse  |
+| hX4swfYT  |
+| 192GHcuo  |
+| DkZAJCMU  |
+| 39bJb4jN  |
+| bcVufPKB  |
+| xDsllo6V  |
+| K3qCUJU3  |
+| 3Ianlkye  |
+| ciPwFd02  |
+| GApSdAKj  |
+| io24MQ7g  |
+| vRae5b3y  |
+| Ow9luxQr  |
+| VMZY8cjj  |
+| bOA2OFMe  |
+| szdRif2e  |
+| e6qba46g  |
+| XKCYiC8b  |
+| bcSRlJz6  |
+| ZYkVjg8r  |
+| qUgSk61K  |
+| v5PdV3IJ  |
+| PvvjctYi  |
+| n2UVCR6f  |
+| awC26u2R  |
+| DrL1oTGn  |
+| r6xojX2h  |
+| 442qczvE  |
+| fIiPdREq  |
+| VAdR5rII  |
+| 70i0EBTn  |
+| e7023lyP  |
+| 6y8L7Pkx  |
+| Yye9sZv0  |
+| 1Dd1I9XP  |
+| 7TorISTb  |
+| xh5WEXn2  |
+| TNFAi9Ed  |
+| 5CQyCwXw  |
+| gdjNkI7J  |
+| w11SuAdM  |
+| MXtse2u5  |
+| W2hP8SvS  |
+| 1ewmFdcY  |
+| 3IYxfGYM  |
+| cG0OKZny  |
+| c7vffW2Y  |
+| jEf1TD3k  |
+| 2jyIRdHB  |
+| WP1QJEND  |
+| g3aRJU3y  |
+| SE0KdS2U  |
+| D1jj5TE9  |
+| Varypma4  |
+| OmeHjWId  |
+| dwVARezj  |
+| JLLcUcA9  |
+| OkcC9dnJ  |
+| GQ9eBZf9  |
+| aOxfo2v2  |
+| yZpbdIph  |
+| bkMW38ou  |
+| p1tNZfEH  |
+| Dl0tI3Ho  |
+| pIfOYLKd  |
+| Xw9nyrem  |
+| CKjNx7V4  |
+| DPs9loqE  |
+| XzCqNBCb  |
+| Dfu6o1tF  |
+| AtyQVnf5  |
+| witNXO3U  |
+| SPOGZwAD  |
+| LSN6YTdf  |
+| RbgtNlzq  |
+| IPNi85Xd  |
+| i0d0HtEf  |
+| 0dPdLXWl  |
+| 03XaRdyQ  |
+| FFCeMFBh  |
+| ptKeYkCm  |
+| 57eSDqkK  |
+| xkDS2xQu  |
+| d4TjKQoD  |
+| XAGzGcSO  |
+| sSv085HX  |
+| f0KsE2Gh  |
+| 0SAneY8o  |
+| n7zGyD0u  |
+| 9Il4M6oJ  |
+| SPNhNVyP  |
+| 9iFdR3J3  |
+| zLPeSD1F  |
+| pPEfHmUg  |
+

# 2022-05-31 13:18:19.785081
+\e

# 2022-05-31 13:19:21.469212
+select array(wxpoRqc4, 8SKeLxPL, XlzoyJJH, y3axVCc9, OMQElQfa, UXhgYpwu, n9u3jGYj, 8qjxy7Bw, NkxPtvYZ, qT9dUs53, E9al4Vy1, OQ8i,OVC9 819p88MV, 1JFHnDF8, Thi8MozT, cATj9PMx, OYMvBCVP, ry9W9ykg, kvJXbTui, e2HE7CfG, CI6Gf8Bh, LLockpEL, ws3xIUFZ, zfVO7Fzr, q,soEOjHC yhohW1ah, Y7ZqcWX1, VvR0E6R0, upgOyaRb, GRfqxOqP, v62bbHOk, JKh06Wse, hX4swfYT, 192GHcuo, DkZAJCMU, 39bJb4jN, bcVufPKB, xDsllo6V, K3qCUJU3, 3Ianlkye, ciPwFd02, GApSdAKj, io24MQ7g, vRae5b3y, Ow9luxQr, VMZY8cjj, bOA2OFMe, szdRif2e, e6qba46g, XKCYi,C8b bcSRlJz6, ZYkVjg8r, qUgSk61K, v5PdV3IJ, PvvjctYi, n2UVCR6f, awC26u2R, DrL1oTGn, r6xojX2h, 442qczvE, fIiPdREq, VAdR5rII, 70,i0EBTn e7023lyP, 6y8L7Pkx, Yye9sZv0, 1Dd1I9XP, 7TorISTb, xh5WEXn2, TNFAi9Ed, 5CQyCwXw, gdjNkI7J, w11SuAdM, MXtse2u5, W2hP8SvS, 1ewmFdcY, 3IYxfGYM, cG0OKZny, c7vffW2Y, jEf1TD3k, 2jyIRdHB, WP1QJEND, g3aRJU3y, SE0KdS2U, D1jj5TE9, Varypma4, OmeHjWId, dwVARe,zj JLLcUcA9, OkcC9dnJ, GQ9eBZf9, aOxfo2v2, yZpbdIph, bkMW38ou, p1tNZfEH, Dl0tI3Ho, pIfOYLKd, Xw9nyrem, CKjNx7V4, DPs9loqE, XzC,qNBCb Dfu6o1tF, AtyQVnf5, witNXO3U, SPOGZwAD, LSN6YTdf, RbgtNlzq, IPNi85Xd, i0d0HtEf, 0dPdLXWl, 03XaRdyQ, FFCeMFBh, ptKeYkCm, ,57eSDqkK xkDS2xQu, d4TjKQoD, XAGzGcSO, sSv085HX, f0KsE2Gh, 0SAneY8o, n7zGyD0u, 9Il4M6oJ, SPNhNVyP, 9iFdR3J3, zLPeSD1F, pPEfHmU,g)

# 2022-05-31 13:19:24.951746
+\e

# 2022-05-31 13:20:55.728351
+select array(
+  'wxpoRqc4',
+  '8SKeLxPL',
+  'XlzoyJJH', 'y3axVCc9', 'OMQElQfa', 'UXhgYpwu', 'n9u3jGYj', '8qjxy7Bw', 'NkxPtvYZ', 'qT9dUs53', 'E9al4Vy1', 'OQ8i','OVC9' '819p88MV', '1JFHnDF8', 'Thi8MozT', 'cATj9PMx', 'OYMvBCVP', 'ry9W9ykg', 'kvJXbTui', 'e2HE7CfG', 'CI6Gf8Bh', 'LLockpEL', 'ws3xIUFZ', 'zfVO7Fzr', 'q','soEOjHC' 'yhohW1ah', 'Y7ZqcWX1', 'VvR0E6R0', 'upgOyaRb', 'GRfqxOqP', 'v62bbHOk', 'JKh06Wse', 'hX4swfYT', '192GHcuo', 'DkZAJCMU', '39bJb4jN', 'bcVufPKB', 'xDsllo6V', 'K3qCUJU3', '3Ianlkye', 'ciPwFd02', 'GApSdAKj', 'io24MQ7g', 'vRae5b3y', 'Ow9luxQr', 'VMZY8cjj', 'bOA2OFMe', 'szdRif2e', 'e6qba46g', 'XKCYi','C8b' 'bcSRlJz6', 'ZYkVjg8r', 'qUgSk61K', 'v5PdV3IJ', 'PvvjctYi', 'n2UVCR6f', 'awC26u2R', 'DrL1oTGn', 'r6xojX2h', '442qczvE', 'fIiPdREq', 'VAdR5rII', '70','i0EBTn' 'e7023lyP', '6y8L7Pkx', 'Yye9sZv0', '1Dd1I9XP', '7TorISTb', 'xh5WEXn2', 'TNFAi9Ed', '5CQyCwXw', 'gdjNkI7J', 'w11SuAdM', 'MXtse2u5', 'W2hP8SvS', '1ewmFdcY', '3IYxfGYM', 'cG0OKZny', 'c7vffW2Y', 'jEf1TD3k', '2jyIRdHB', 'WP1QJEND', 'g3aRJU3y', 'SE0KdS2U', 'D1jj5TE9', 'Varypma4', 'OmeHjWId', 'dwVARe','zj' 'JLLcUcA9', 'OkcC9dnJ', 'GQ9eBZf9', 'aOxfo2v2', 'yZpbdIph', 'bkMW38ou', 'p1tNZfEH', 'Dl0tI3Ho', 'pIfOYLKd', 'Xw9nyrem', 'CKjNx7V4', 'DPs9loqE', 'XzC','qNBCb' 'Dfu6o1tF', 'AtyQVnf5', 'witNXO3U', 'SPOGZwAD', 'LSN6YTdf', 'RbgtNlzq', 'IPNi85Xd', 'i0d0HtEf', '0dPdLXWl', '03XaRdyQ', 'FFCeMFBh', 'ptKeYkCm', ',''57eSDqkK' 'xkDS2xQu', 'd4TjKQoD', 'XAGzGcSO', 'sSv085HX', 'f0KsE2Gh', '0SAneY8o', 'n7zGyD0u', '9Il4M6oJ', 'SPNhNVyP', '9iFdR3J3', 'zLPeSD1F', 'pPEfHmU')

# 2022-05-31 13:20:58.686197
+\e

# 2022-05-31 13:21:10.583080
+select [
+  'wxpoRqc4',
+  '8SKeLxPL',
+  'XlzoyJJH', 'y3axVCc9', 'OMQElQfa', 'UXhgYpwu', 'n9u3jGYj', '8qjxy7Bw', 'NkxPtvYZ', 'qT9dUs53', 'E9al4Vy1', 'OQ8i','OVC9' '819p88MV', '1JFHnDF8', 'Thi8MozT', 'cATj9PMx', 'OYMvBCVP', 'ry9W9ykg', 'kvJXbTui', 'e2HE7CfG', 'CI6Gf8Bh', 'LLockpEL', 'ws3xIUFZ', 'zfVO7Fzr', 'q','soEOjHC' 'yhohW1ah', 'Y7ZqcWX1', 'VvR0E6R0', 'upgOyaRb', 'GRfqxOqP', 'v62bbHOk', 'JKh06Wse', 'hX4swfYT', '192GHcuo', 'DkZAJCMU', '39bJb4jN', 'bcVufPKB', 'xDsllo6V', 'K3qCUJU3', '3Ianlkye', 'ciPwFd02', 'GApSdAKj', 'io24MQ7g', 'vRae5b3y', 'Ow9luxQr', 'VMZY8cjj', 'bOA2OFMe', 'szdRif2e', 'e6qba46g', 'XKCYi','C8b' 'bcSRlJz6', 'ZYkVjg8r', 'qUgSk61K', 'v5PdV3IJ', 'PvvjctYi', 'n2UVCR6f', 'awC26u2R', 'DrL1oTGn', 'r6xojX2h', '442qczvE', 'fIiPdREq', 'VAdR5rII', '70','i0EBTn' 'e7023lyP', '6y8L7Pkx', 'Yye9sZv0', '1Dd1I9XP', '7TorISTb', 'xh5WEXn2', 'TNFAi9Ed', '5CQyCwXw', 'gdjNkI7J', 'w11SuAdM', 'MXtse2u5', 'W2hP8SvS', '1ewmFdcY', '3IYxfGYM', 'cG0OKZny', 'c7vffW2Y', 'jEf1TD3k', '2jyIRdHB', 'WP1QJEND', 'g3aRJU3y', 'SE0KdS2U', 'D1jj5TE9', 'Varypma4', 'OmeHjWId', 'dwVARe','zj' 'JLLcUcA9', 'OkcC9dnJ', 'GQ9eBZf9', 'aOxfo2v2', 'yZpbdIph', 'bkMW38ou', 'p1tNZfEH', 'Dl0tI3Ho', 'pIfOYLKd', 'Xw9nyrem', 'CKjNx7V4', 'DPs9loqE', 'XzC','qNBCb' 'Dfu6o1tF', 'AtyQVnf5', 'witNXO3U', 'SPOGZwAD', 'LSN6YTdf', 'RbgtNlzq', 'IPNi85Xd', 'i0d0HtEf', '0dPdLXWl', '03XaRdyQ', 'FFCeMFBh', 'ptKeYkCm', ',''57eSDqkK' 'xkDS2xQu', 'd4TjKQoD', 'XAGzGcSO', 'sSv085HX', 'f0KsE2Gh', '0SAneY8o', 'n7zGyD0u', '9Il4M6oJ', 'SPNhNVyP', '9iFdR3J3', 'zLPeSD1F', 'pPEfHmU']

# 2022-05-31 13:21:11.961118
+\e

# 2022-05-31 13:21:20.822619
+select array(
+  'wxpoRqc4',
+  '8SKeLxPL',
+  'XlzoyJJH', 'y3axVCc9', 'OMQElQfa', 'UXhgYpwu', 'n9u3jGYj', '8qjxy7Bw', 'NkxPtvYZ', 'qT9dUs53', 'E9al4Vy1', 'OQ8i','OVC9' '819p88MV', '1JFHnDF8', 'Thi8MozT', 'cATj9PMx', 'OYMvBCVP', 'ry9W9ykg', 'kvJXbTui', 'e2HE7CfG', 'CI6Gf8Bh', 'LLockpEL', 'ws3xIUFZ', 'zfVO7Fzr', 'q','soEOjHC' 'yhohW1ah', 'Y7ZqcWX1', 'VvR0E6R0', 'upgOyaRb', 'GRfqxOqP', 'v62bbHOk', 'JKh06Wse', 'hX4swfYT', '192GHcuo', 'DkZAJCMU', '39bJb4jN', 'bcVufPKB', 'xDsllo6V', 'K3qCUJU3', '3Ianlkye', 'ciPwFd02', 'GApSdAKj', 'io24MQ7g', 'vRae5b3y', 'Ow9luxQr', 'VMZY8cjj', 'bOA2OFMe', 'szdRif2e', 'e6qba46g', 'XKCYi','C8b' 'bcSRlJz6', 'ZYkVjg8r', 'qUgSk61K', 'v5PdV3IJ', 'PvvjctYi', 'n2UVCR6f', 'awC26u2R', 'DrL1oTGn', 'r6xojX2h', '442qczvE', 'fIiPdREq', 'VAdR5rII', '70','i0EBTn' 'e7023lyP', '6y8L7Pkx', 'Yye9sZv0', '1Dd1I9XP', '7TorISTb', 'xh5WEXn2', 'TNFAi9Ed', '5CQyCwXw', 'gdjNkI7J', 'w11SuAdM', 'MXtse2u5', 'W2hP8SvS', '1ewmFdcY', '3IYxfGYM', 'cG0OKZny', 'c7vffW2Y', 'jEf1TD3k', '2jyIRdHB', 'WP1QJEND', 'g3aRJU3y', 'SE0KdS2U', 'D1jj5TE9', 'Varypma4', 'OmeHjWId', 'dwVARe','zj' 'JLLcUcA9', 'OkcC9dnJ', 'GQ9eBZf9', 'aOxfo2v2', 'yZpbdIph', 'bkMW38ou', 'p1tNZfEH', 'Dl0tI3Ho', 'pIfOYLKd', 'Xw9nyrem', 'CKjNx7V4', 'DPs9loqE', 'XzC','qNBCb' 'Dfu6o1tF', 'AtyQVnf5', 'witNXO3U', 'SPOGZwAD', 'LSN6YTdf', 'RbgtNlzq', 'IPNi85Xd', 'i0d0HtEf', '0dPdLXWl', '03XaRdyQ', 'FFCeMFBh', 'ptKeYkCm', ',''57eSDqkK' 'xkDS2xQu', 'd4TjKQoD', 'XAGzGcSO', 'sSv085HX', 'f0KsE2Gh', '0SAneY8o', 'n7zGyD0u', '9Il4M6oJ', 'SPNhNVyP', '9iFdR3J3', 'zLPeSD1F', 'pPEfHmU')

# 2022-05-31 13:21:23.345771
+\e

# 2022-05-31 13:21:29.047185
+select array(
+  'wxpoRqc4',
+  '8SKeLxPL',
+  'XlzoyJJH', 'y3axVCc9', 'OMQElQfa', 'UXhgYpwu', 'n9u3jGYj', '8qjxy7Bw', 'NkxPtvYZ', 'qT9dUs53', 'E9al4Vy1', 'OQ8i','OVC9' '819p88MV', '1JFHnDF8', 'Thi8MozT', 'cATj9PMx', 'OYMvBCVP', 'ry9W9ykg', 'kvJXbTui', 'e2HE7CfG', 'CI6Gf8Bh', 'LLockpEL', 'ws3xIUFZ', 'zfVO7Fzr', 'q','soEOjHC' 'yhohW1ah', 'Y7ZqcWX1', 'VvR0E6R0', 'upgOyaRb', 'GRfqxOqP', 'v62bbHOk', 'JKh06Wse', 'hX4swfYT', '192GHcuo', 'DkZAJCMU', '39bJb4jN', 'bcVufPKB', 'xDsllo6V', 'K3qCUJU3', '3Ianlkye', 'ciPwFd02', 'GApSdAKj', 'io24MQ7g', 'vRae5b3y', 'Ow9luxQr', 'VMZY8cjj', 'bOA2OFMe', 'szdRif2e', 'e6qba46g', 'XKCYi','C8b' 'bcSRlJz6', 'ZYkVjg8r', 'qUgSk61K', 'v5PdV3IJ', 'PvvjctYi', 'n2UVCR6f', 'awC26u2R', 'DrL1oTGn', 'r6xojX2h', '442qczvE', 'fIiPdREq', 'VAdR5rII', '70','i0EBTn' 'e7023lyP', '6y8L7Pkx', 'Yye9sZv0', '1Dd1I9XP', '7TorISTb', 'xh5WEXn2', 'TNFAi9Ed', '5CQyCwXw', 'gdjNkI7J', 'w11SuAdM', 'MXtse2u5', 'W2hP8SvS', '1ewmFdcY', '3IYxfGYM', 'cG0OKZny', 'c7vffW2Y', 'jEf1TD3k', '2jyIRdHB', 'WP1QJEND', 'g3aRJU3y', 'SE0KdS2U', 'D1jj5TE9', 'Varypma4', 'OmeHjWId', 'dwVARe','zj' 'JLLcUcA9', 'OkcC9dnJ', 'GQ9eBZf9', 'aOxfo2v2', 'yZpbdIph', 'bkMW38ou', 'p1tNZfEH', 'Dl0tI3Ho', 'pIfOYLKd', 'Xw9nyrem', 'CKjNx7V4', 'DPs9loqE', 'XzC','qNBCb' 'Dfu6o1tF', 'AtyQVnf5', 'witNXO3U', 'SPOGZwAD', 'LSN6YTdf', 'RbgtNlzq', 'IPNi85Xd', 'i0d0HtEf', '0dPdLXWl', '03XaRdyQ', 'FFCeMFBh', 'ptKeYkCm', ',''57eSDqkK' 'xkDS2xQu', 'd4TjKQoD', 'XAGzGcSO', 'sSv085HX', 'f0KsE2Gh', '0SAneY8o', 'n7zGyD0u', '9Il4M6oJ', 'SPNhNVyP', '9iFdR3J3', 'zLPeSD1F', 'pPEfHmU')

# 2022-05-31 13:21:35.522314
+select array('aaa','bbb')

# 2022-05-31 13:21:40.921991
+select array("aaa","bbb")

# 2022-05-31 13:22:03.914178
+\e

# 2022-05-31 13:22:35.114868
+select '{"aaa","bbb"}'::TEXT[]

# 2022-05-31 13:22:39.113536
+select array(
+  'wxpoRqc4',
+  '8SKeLxPL',
+  'XlzoyJJH', 'y3axVCc9', 'OMQElQfa', 'UXhgYpwu', 'n9u3jGYj', '8qjxy7Bw', 'NkxPtvYZ', 'qT9dUs53', 'E9al4Vy1', 'OQ8i','OVC9' '819p88MV', '1JFHnDF8', 'Thi8MozT', 'cATj9PMx', 'OYMvBCVP', 'ry9W9ykg', 'kvJXbTui', 'e2HE7CfG', 'CI6Gf8Bh', 'LLockpEL', 'ws3xIUFZ', 'zfVO7Fzr', 'q','soEOjHC' 'yhohW1ah', 'Y7ZqcWX1', 'VvR0E6R0', 'upgOyaRb', 'GRfqxOqP', 'v62bbHOk', 'JKh06Wse', 'hX4swfYT', '192GHcuo', 'DkZAJCMU', '39bJb4jN', 'bcVufPKB', 'xDsllo6V', 'K3qCUJU3', '3Ianlkye', 'ciPwFd02', 'GApSdAKj', 'io24MQ7g', 'vRae5b3y', 'Ow9luxQr', 'VMZY8cjj', 'bOA2OFMe', 'szdRif2e', 'e6qba46g', 'XKCYi','C8b' 'bcSRlJz6', 'ZYkVjg8r', 'qUgSk61K', 'v5PdV3IJ', 'PvvjctYi', 'n2UVCR6f', 'awC26u2R', 'DrL1oTGn', 'r6xojX2h', '442qczvE', 'fIiPdREq', 'VAdR5rII', '70','i0EBTn' 'e7023lyP', '6y8L7Pkx', 'Yye9sZv0', '1Dd1I9XP', '7TorISTb', 'xh5WEXn2', 'TNFAi9Ed', '5CQyCwXw', 'gdjNkI7J', 'w11SuAdM', 'MXtse2u5', 'W2hP8SvS', '1ewmFdcY', '3IYxfGYM', 'cG0OKZny', 'c7vffW2Y', 'jEf1TD3k', '2jyIRdHB', 'WP1QJEND', 'g3aRJU3y', 'SE0KdS2U', 'D1jj5TE9', 'Varypma4', 'OmeHjWId', 'dwVARe','zj' 'JLLcUcA9', 'OkcC9dnJ', 'GQ9eBZf9', 'aOxfo2v2', 'yZpbdIph', 'bkMW38ou', 'p1tNZfEH', 'Dl0tI3Ho', 'pIfOYLKd', 'Xw9nyrem', 'CKjNx7V4', 'DPs9loqE', 'XzC','qNBCb' 'Dfu6o1tF', 'AtyQVnf5', 'witNXO3U', 'SPOGZwAD', 'LSN6YTdf', 'RbgtNlzq', 'IPNi85Xd', 'i0d0HtEf', '0dPdLXWl', '03XaRdyQ', 'FFCeMFBh', 'ptKeYkCm', ',''57eSDqkK' 'xkDS2xQu', 'd4TjKQoD', 'XAGzGcSO', 'sSv085HX', 'f0KsE2Gh', '0SAneY8o', 'n7zGyD0u', '9Il4M6oJ', 'SPNhNVyP', '9iFdR3J3', 'zLPeSD1F', 'pPEfHmU')

# 2022-05-31 13:22:39.969570
+\e

# 2022-05-31 13:23:19.193730
+select '{
+  "wxpoRqc4",
+  "8SKeLxPL",
+  "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8i","OVC9" "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "q","soEOjHC" "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYi","C8b" "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70","i0EBTn" "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARe","zj" "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzC","qNBCb" "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", ",""57eSDqkK" "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"
+}'

# 2022-05-31 13:23:21.559017
+\e

# 2022-05-31 13:23:27.721766
+select '{
+  "wxpoRqc4",
+  "8SKeLxPL",
+  "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8i","OVC9" "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "q","soEOjHC" "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYi","C8b" "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70","i0EBTn" "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARe","zj" "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzC","qNBCb" "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", ",""57eSDqkK" "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"
+}'::TEXT[]

# 2022-05-31 13:23:31.481428
+\e

# 2022-05-31 13:23:43.856939
+select '{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8i","OVC9" "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "q","soEOjHC" "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYi","C8b" "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70","i0EBTn" "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARe","zj" "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzC","qNBCb" "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", ",""57eSDqkK" "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[]

# 2022-05-31 13:23:46.345271
+\e

# 2022-05-31 13:25:33.230959
+select '{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[]

# 2022-05-31 13:26:04.991991
+\e

# 2022-05-31 13:32:38.670579
+select '{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[],
+'{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]

# 2022-05-31 13:33:11.260118
+\e

# 2022-05-31 13:33:26.957527
+select '{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[] @>
+'{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]

# 2022-05-31 13:33:48.494279
+\

# 2022-05-31 13:33:50.541198
+select '{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[] @>
+'{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]

# 2022-05-31 13:33:51.197076
+\e

# 2022-05-31 13:33:57.235468
+select '{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[] <@
+'{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]

# 2022-05-31 13:34:54.502171
+\e

# 2022-05-31 13:36:52.829303
+select unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[]),
+'{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]

# 2022-05-31 13:37:00.316256
+\e

# 2022-05-31 13:38:01.979918
+select * from (select unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[])) first_query left join (select unnest('{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]))

# 2022-05-31 13:38:05.716033
+\e

# 2022-05-31 13:38:14.608270
+select * from (select unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[])) first_query left join (select unnest('{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[])) second_query

# 2022-05-31 13:38:18.851563
+\e

# 2022-05-31 13:38:25.897366
+select * from (select unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[])) first_query left join (select unnest('{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[])) second_query;

# 2022-05-31 13:38:27.684200
+\e

# 2022-05-31 13:40:11.910219
+select * from unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[]) as first, '{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[] second
+where first not in select( unnest(second) )

# 2022-05-31 13:40:20.051018
+\e

# 2022-05-31 13:41:18.129236
+select *
+  from unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[]) as first
+where first not in
+'{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]

# 2022-05-31 13:41:20.634827
+\e

# 2022-05-31 13:41:39.161881
+select *
+  from unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[]) as first
+where first not in
+'{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]

# 2022-05-31 13:41:48.457161
+\e

# 2022-05-31 13:42:13.889933
+select *
+  from unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[])
+where first not in '{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]

# 2022-05-31 13:42:17.921869
+\e

# 2022-05-31 13:42:44.849340
+select *
+  from unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[])
+where first not in (select unnest('{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]))

# 2022-05-31 13:42:47.817194
+\e

# 2022-05-31 13:42:52.664392
+select *
+  from unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[]) first
+where first not in (select unnest('{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]))

# 2022-05-31 13:44:36.654940
+\e

# 2022-05-31 13:45:13.734310
+select * unnest('{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[])) first
+where first not in (select unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[]))

# 2022-05-31 13:45:19.495619
+\e

# 2022-05-31 13:45:22.608058
+select * from unnest('{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[])) first
+where first not in (select unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[]))

# 2022-05-31 13:45:24.624008
+\e

# 2022-05-31 13:45:29.277863
+select * from unnest('{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]) first
+where first not in (select unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[]))

# 2022-05-31 13:46:08.319691
+select count(*) from estate_plans where rand_id = 'pPEfHmUg';

# 2022-05-31 13:46:10.092191
+select count(*) from estate_plans where rand_id = 'pPEfHmU';

# 2022-05-31 13:46:15.310777
+select * from unnest('{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]) first
+where first not in (select unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmU"}'::TEXT[]))

# 2022-05-31 13:46:16.057832
+\e

# 2022-05-31 13:46:20.949617
+select * from unnest('{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]) first
+where first not in (select unnest('{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]))

# 2022-05-31 13:46:24.303239
+\e

# 2022-05-31 13:46:46.494744
+select '{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[] @> '{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]

# 2022-05-31 13:46:50.485705
+\e

# 2022-05-31 13:46:56.071468
+select '{"wxpoRqc4", "8SKeLxPL", "8qjxy7Bw", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "XlzoyJJH", "n9u3jGYj", "NkxPtvYZ", "E9al4Vy1", "qT9dUs53", "819p88MV", "OQ8iOVC9", "Thi8MozT", "1JFHnDF8", "e2HE7CfG", "OYMvBCVP", "cATj9PMx", "CI6Gf8Bh", "LLockpEL", "ry9W9ykg", "kvJXbTui", "zfVO7Fzr", "upgOyaRb", "qsoEOjHC", "Y7ZqcWX1", "ws3xIUFZ", "yhohW1ah", "VvR0E6R0", "v62bbHOk", "GRfqxOqP", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "bcVufPKB", "3Ianlkye", "VMZY8cjj", "GApSdAKj", "io24MQ7g", "ciPwFd02", "xDsllo6V", "K3qCUJU3", "39bJb4jN", "Ow9luxQr", "e6qba46g", "bOA2OFMe", "vRae5b3y", "XKCYiC8b", "bcSRlJz6", "szdRif2e", "PvvjctYi", "qUgSk61K", "v5PdV3IJ", "ZYkVjg8r", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "fIiPdREq", "r6xojX2h", "6y8L7Pkx", "VAdR5rII", "1Dd1I9XP", "7TorISTb", "TNFAi9Ed", "Yye9sZv0", "xh5WEXn2", "70i0EBTn", "e7023lyP", "1ewmFdcY", "442qczvE", "gdjNkI7J", "W2hP8SvS", "5CQyCwXw", "w11SuAdM", "MXtse2u5", "3IYxfGYM", "2jyIRdHB", "cG0OKZny", "WP1QJEND", "jEf1TD3k", "p1tNZfEH", "c7vffW2Y", "dwVARezj", "JLLcUcA9", "Varypma4", "aOxfo2v2", "yZpbdIph", "SE0KdS2U", "D1jj5TE9", "OkcC9dnJ", "GQ9eBZf9", "OmeHjWId", "g3aRJU3y", "bkMW38ou", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "XzCqNBCb", "Dl0tI3Ho", "DPs9loqE", "witNXO3U", "Dfu6o1tF", "AtyQVnf5", "RbgtNlzq", "SPOGZwAD", "i0d0HtEf", "IPNi85Xd", "03XaRdyQ", "LSN6YTdf", "57eSDqkK", "0dPdLXWl", "f0KsE2Gh", "FFCeMFBh", "xkDS2xQu", "XAGzGcSO", "d4TjKQoD", "n7zGyD0u", "0SAneY8o", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "sSv085HX", "ptKeYkCm", "zLPeSD1F", "pPEfHmUg"}'::TEXT[] <@ '{"wxpoRqc4", "8SKeLxPL", "XlzoyJJH", "y3axVCc9", "OMQElQfa", "UXhgYpwu", "n9u3jGYj", "8qjxy7Bw", "NkxPtvYZ", "qT9dUs53", "E9al4Vy1", "OQ8iOVC9", "819p88MV", "1JFHnDF8", "Thi8MozT", "cATj9PMx", "OYMvBCVP", "ry9W9ykg", "kvJXbTui", "e2HE7CfG", "CI6Gf8Bh", "LLockpEL", "ws3xIUFZ", "zfVO7Fzr", "qsoEOjHC", "yhohW1ah", "Y7ZqcWX1", "VvR0E6R0", "upgOyaRb", "GRfqxOqP", "v62bbHOk", "JKh06Wse", "hX4swfYT", "192GHcuo", "DkZAJCMU", "39bJb4jN", "bcVufPKB", "xDsllo6V", "K3qCUJU3", "3Ianlkye", "ciPwFd02", "GApSdAKj", "io24MQ7g", "vRae5b3y", "Ow9luxQr", "VMZY8cjj", "bOA2OFMe", "szdRif2e", "e6qba46g", "XKCYiC8b", "bcSRlJz6", "ZYkVjg8r", "qUgSk61K", "v5PdV3IJ", "PvvjctYi", "n2UVCR6f", "awC26u2R", "DrL1oTGn", "r6xojX2h", "442qczvE", "fIiPdREq", "VAdR5rII", "70i0EBTn", "e7023lyP", "6y8L7Pkx", "Yye9sZv0", "1Dd1I9XP", "7TorISTb", "xh5WEXn2", "TNFAi9Ed", "5CQyCwXw", "gdjNkI7J", "w11SuAdM", "MXtse2u5", "W2hP8SvS", "1ewmFdcY", "3IYxfGYM", "cG0OKZny", "c7vffW2Y", "jEf1TD3k", "2jyIRdHB", "WP1QJEND", "g3aRJU3y", "SE0KdS2U", "D1jj5TE9", "Varypma4", "OmeHjWId", "dwVARezj", "JLLcUcA9", "OkcC9dnJ", "GQ9eBZf9", "aOxfo2v2", "yZpbdIph", "bkMW38ou", "p1tNZfEH", "Dl0tI3Ho", "pIfOYLKd", "Xw9nyrem", "CKjNx7V4", "DPs9loqE", "XzCqNBCb", "Dfu6o1tF", "AtyQVnf5", "witNXO3U", "SPOGZwAD", "LSN6YTdf", "RbgtNlzq", "IPNi85Xd", "i0d0HtEf", "0dPdLXWl", "03XaRdyQ", "FFCeMFBh", "ptKeYkCm", "57eSDqkK", "xkDS2xQu", "d4TjKQoD", "XAGzGcSO", "sSv085HX", "f0KsE2Gh", "0SAneY8o", "n7zGyD0u", "9Il4M6oJ", "SPNhNVyP", "9iFdR3J3", "zLPeSD1F", "pPEfHmUg"}'::TEXT[]

# 2022-05-31 13:49:31.138159
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:49:32.366827
+\e

# 2022-05-31 13:49:40.540367
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:49:41.531671
+\e

# 2022-05-31 13:49:52.611810
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT organization_custom_urls."url_name"
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT organization_custom_urls."url_name"
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:49:56.070627
+\e

# 2022-05-31 13:50:05.634498
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT organization_custom_urls."url_name"
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT COALESCE(organization_custom_urls."url_name", '')
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:50:06.878543
+\e

# 2022-05-31 13:50:57.367764
+SELECT
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:51:04.088252
+\e

# 2022-05-31 13:51:46.578541
+SELECT
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND BTRIM(LOWER(estate_plans.meta_info->'location'->'path'->>0), '/') != 'write_in'
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:51:50.211670
+\e

# 2022-05-31 13:52:33.311947
+SELECT
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/'),
+    organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND LOWER(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:52:40.986623
+\e

# 2022-05-31 13:52:53.300430
+SELECT
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/') != organization_custom_urls."url_name"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND LOWER(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:52:57.929977
+\e

# 2022-05-31 13:53:05.654765
+SELECT
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/') != COALESCE(organization_custom_urls."url_name", '')
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND LOWER(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:53:09.306417
+\e

# 2022-05-31 13:53:44.512479
+SELECT
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/') != COALESCE(organization_custom_urls."url_name", '')
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND LOWER(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  AND BTRIM(LOWER(estate_plans.meta_info->'location'->'path'->>0), '/') is not null
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:53:50.626347
+\e

# 2022-05-31 13:54:56.529970
+SELECT
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/') != COALESCE(organization_custom_urls."url_name", ''), count(*)
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+  AND LOWER(estate_charitable_gifts.metrics->>'giftSource') != 'write_in'
+  group by 1
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:55:15.897962
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT organization_custom_urls."url_name"
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT COALESCE(organization_custom_urls."url_name", '')
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:55:17.056919
+\e

# 2022-05-31 13:55:30.911628
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT COALESCE(organization_custom_urls."url_name", '')
+           )
+            then 'partner_feature'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:55:35.146082
+\e

# 2022-05-31 13:56:15.913262
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+             AND ((
+             BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+             )) is not null
+             AND ((
+             BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+             )) != COALESCE(organization_custom_urls."url_name", '')
+        THEN 'partner_feature'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:58:10.250417
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+    CASE
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+      END AS "will_and_trust_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN will_and_trust_charitable_gifts.is_finished = true AND (will_and_trust_charitable_gifts.is_fake = false OR will_and_trust_charitable_gifts.is_fake is null)  THEN will_and_trust_charitable_gifts.rand_id  ELSE NULL END) AS "will_and_trust_charitable_gifts.bequests_completed_count"
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 13:58:11.113339
+\e

# 2022-05-31 13:59:57.617309
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+organization_custom_urls.url_name
+            then 'partner_feature'
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+
+      AND (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+      AND (
+      SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+      WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+      ) = 0 and (organization_custom_urls."url_name") is not null
+
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:00:00.145634
+\e

# 2022-05-31 14:00:05.856789
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+organization_custom_urls.url_name
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+
+      AND (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+      AND (
+      SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+      WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+      ) = 0 and (organization_custom_urls."url_name") is not null
+
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:00:14.039436
+\e

# 2022-05-31 14:00:42.927747
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+organization_custom_urls.url_name,
+will_and_trust_charitable_gifts.rand_id
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+
+      AND (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+      AND (
+      SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+      WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+      ) = 0 and (organization_custom_urls."url_name") is not null
+
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:00:49.543849
+\e

# 2022-05-31 14:01:13.838665
+WITH will_and_trust_charitable_gifts AS (select
+        ecg.old_id
+        ,ep.plan_type
+        ,true as is_new_will
+        ,ecg.rand_id
+        ,eb.profile_id
+        ,eb.estate_id
+        ,ep.first_completion_event_id
+        ,ecg.program_id
+        ,ecg.organization_id
+        ,ecg.reassociated_program_id
+        ,coalesce(eb.allocation_percent,eb.cash_amount) as amount
+        ,case when eb.allocation_percent is not null then 0 else 1 end amount_type
+        ,eb.cash_amount_currency as cash_amount_currency
+        ,ecg.is_endowment_gift
+        ,ecg.gift_intent
+        ,(ep.last_section_completed = 'review') as is_finished
+        ,ep.is_fake
+        ,ecg.message
+        ,ep.meta_info
+        ,ecg.metrics
+        ,ecg.created_at
+        ,ecg.updated_at
+        ,ep.has_permission_to_share_info
+        ,ep.last_section_completed_updated_at
+        ,ep.created_at as document_created
+      from public.estate_beneficiaries eb
+        join public.estate_charitable_gifts ecg on ecg.rand_id = eb.charitable_gift_id
+        join public.estate_plans ep on eb.estate_id = ep.rand_id
+      where charitable_gift_id is not null
+        and eb.level = 1 and eb.property_id IS NULL
+        and ecg.deleted_at is NULL
+        and eb.deleted_at is NULL
+            )
+SELECT
+will_and_trust_charitable_gifts.rand_id
+FROM will_and_trust_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON will_and_trust_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS wills ON will_and_trust_charitable_gifts.estate_id = wills.rand_id
+LEFT JOIN public.programs  AS programs ON COALESCE(will_and_trust_charitable_gifts.reassociated_program_id, will_and_trust_charitable_gifts.program_id) = (programs."rand_id")
+LEFT JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), will_and_trust_charitable_gifts.organization_id) = (organizations."rand_id")
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    )) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = will_and_trust_charitable_gifts.rand_id
+WHERE (wills.last_section_completed = 'review' AND (wills.is_fake = false OR wills.is_fake IS NULL) ) AND (( organizations.display_name  ) ILIKE  'Lutheran World Relief') AND ((profiles."deleted_at") is null )
+
+      AND (LOWER((will_and_trust_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+      AND (
+      SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+      WHERE ocu.organization_id = will_and_trust_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER(will_and_trust_charitable_gifts.meta_info -> 'location' -> 'path' ->> 0), '/')
+    ))
+      ) = 0 and (organization_custom_urls."url_name") is not null
+
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:02:07.998509
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:02:09.032889
+\e

# 2022-05-31 14:02:54.268541
+SELECT
+estate_charitable_gifts.rand_id
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+
+
+        AND LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+
+
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:02:57.143386
+\e

# 2022-05-31 14:03:03.838906
+SELECT
+estate_charitable_gifts.rand_id
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+
+
+        AND LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT organization_custom_urls."url_name"
+           )
+
+
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:03:05.671936
+\e

# 2022-05-31 14:03:20.073647
+SELECT
+estate_charitable_gifts.rand_id
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+
+
+        AND LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+
+
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:03:22.080683
+\e

# 2022-05-31 14:04:13.193033
+SELECT
+estate_charitable_gifts.rand_id
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+
+
+        AND LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+
+
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:04:16.311782
+thanos> SELECT
+     CASE
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '')
+         THEN 'partner_feature'
+         ELSE 'other'
+         END AS "estate_charitable_gifts.bequest_source",
+     COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL E
+ ND) AS "estate_beneficiaries.charitable_gifts_completed_count"
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitab
+ le_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.progra
+ m_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_i
+ d) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+ GROUP BY
+     1
+ ORDER BY
+     2 DESC
+ FETCH NEXT 500 ROWS ONLY
+

# 2022-05-31 14:04:19.439544
+\e

# 2022-05-31 14:04:22.496840
+SELECT
+     CASE
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '')
+         THEN 'partner_feature'
+         ELSE 'other'
+         END AS "estate_charitable_gifts.bequest_source",
+     COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL E
+ ND) AS "estate_beneficiaries.charitable_gifts_completed_count"
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitab
+ le_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.progra
+ m_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_i
+ d) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+ GROUP BY
+     1
+ ORDER BY
+     2 DESC
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:04:24.481752
+\e

# 2022-05-31 14:04:32.917686
+SELECT
+     CASE
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '')
+         THEN 'partner_feature'
+         ELSE 'other'
+         END AS "estate_charitable_gifts.bequest_source",
+     COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitab
+ le_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.progra
+ m_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_i
+ d) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+ GROUP BY
+     1
+ ORDER BY
+     2 DESC
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:04:34.376854
+\e

# 2022-05-31 14:04:44.015810
+SELECT
+     CASE
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '')
+         THEN 'partner_feature'
+         ELSE 'other'
+         END AS "estate_charitable_gifts.bequest_source",
+     COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.progra
+ m_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_i
+ d) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+ GROUP BY
+     1
+ ORDER BY
+     2 DESC
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:04:46.064866
+\e

# 2022-05-31 14:04:50.785967
+SELECT
+     CASE
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '')
+         THEN 'partner_feature'
+         ELSE 'other'
+         END AS "estate_charitable_gifts.bequest_source",
+     COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_i
+ d) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+ GROUP BY
+     1
+ ORDER BY
+     2 DESC
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:04:52.296099
+\e

# 2022-05-31 14:04:59.993791
+SELECT
+     CASE
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '')
+         THEN 'partner_feature'
+         ELSE 'other'
+         END AS "estate_charitable_gifts.bequest_source",
+     COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+ GROUP BY
+     1
+ ORDER BY
+     2 DESC
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:05:01.759424
+\e

# 2022-05-31 14:06:06.394044
+SELECT
+estate_charitable_gifts.rand_id
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+  AND NOT (
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '') )
+
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:06:07.844665
+\e

# 2022-05-31 14:06:11.811553
+SELECT
+estate_charitable_gifts.rand_id
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+  AND NOT (
+         LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '') )
+
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:06:14.202620
+\e

# 2022-05-31 14:06:38.640909
+SELECT
+estate_charitable_gifts.rand_id
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+  AND NOT (
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '') )
+
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:06:40.034894
+\e

# 2022-05-31 14:06:48.428767
+SELECT
+     CASE
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '')
+         THEN 'partner_feature'
+         ELSE 'other'
+         END AS "estate_charitable_gifts.bequest_source",
+     COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+ GROUP BY
+     1
+ ORDER BY
+     2 DESC
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:06:49.611958
+\e

# 2022-05-31 14:07:47.660502
+SELECT
+     CASE
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+             BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+             )) IN (
+             SELECT organization_custom_urls."url_name"
+             )
+         THEN 'partner_site'
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '')
+         THEN 'partner_feature'
+         ELSE 'other'
+         END AS "estate_charitable_gifts.bequest_source",
+     COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+ GROUP BY
+     1
+ ORDER BY
+     2 DESC
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:07:53.411639
+\e

# 2022-05-31 14:08:07.387134
+SELECT
+estate_charitable_gifts.rand_id
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+  AND NOT (
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '') )
+
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:08:08.304218
+\e

# 2022-05-31 14:08:13.717255
+SELECT
+estate_charitable_gifts.rand_id
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+  AND (
+         LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '') )
+
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:09:37.451955
+SELECT
+     CASE
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+             BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+             )) IN (
+             SELECT organization_custom_urls."url_name"
+             )
+         THEN 'partner_site'
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '')
+         THEN 'partner_feature'
+         ELSE 'other'
+         END AS "estate_charitable_gifts.bequest_source",
+     COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+ GROUP BY
+     1
+ ORDER BY
+     2 DESC
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:09:38.307481
+\e

# 2022-05-31 14:09:49.487282
+SELECT
+     CASE
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+             BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+             )) IN (
+             SELECT organization_custom_urls."url_name"
+             )
+         THEN 'partner_site'
+         WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) is not null
+              AND ((
+              BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+              )) != COALESCE(organization_custom_urls."url_name", '')
+         THEN 'partner_feature'
+         ELSE 'other'
+         END AS "estate_charitable_gifts.bequest_source",
+     COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+ FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+ INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+ LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+ INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+ INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+       WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+       WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+       WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+       ELSE estate_beneficiaries.level::varchar(255)
+       END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+ LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+ INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+ LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' ->
+  'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+ LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+ WHERE ((estate_plans.last_section_completed = 'review')
+       and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+     and (estate_charitable_gifts."deleted_at") is null
+     and (not estate_plans.is_fake or estate_plans.is_fake is null)
+   )
+ GROUP BY
+     1
+ ORDER BY
+     2 DESC
+ FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:09:56.854684
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:09:57.954455
+\e

# 2022-05-31 14:10:23.570843
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    estate_charitable_gifts.rand_id
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:10:24.868321
+\e

# 2022-05-31 14:10:28.044656
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    estate_charitable_gifts.rand_id
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:11:16.905253
+\e

# 2022-05-31 14:11:58.316614
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:12:12.096164
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    estate_charitable_gifts.rand_id
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:12:12.899293
+\e

# 2022-05-31 14:12:22.592665
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    estate_charitable_gifts.rand_id
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:13:02.243588
+\e

# 2022-05-31 14:13:11.516562
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back')
+            and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) IN (
+            SELECT organization_custom_urls."url_name"
+           )
+            then 'partner_site'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in'
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) is not null
+            AND ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    )) NOT IN (
+            SELECT CONCAT('/', (organization_custom_urls."url_name"))
+           )
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    estate_charitable_gifts.rand_id
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-05-31 14:15:13.557190
+select null in (1, 2, 3,);

# 2022-05-31 14:15:15.852819
+select null in (1, 2, 3);

# 2022-05-31 14:15:41.995336
+select case when false then 'a' when null in (1,2,3) then 'b' else 'c';

# 2022-05-31 14:15:46.873269
+select case when false then 'a' when null in (1,2,3) then 'b' else 'c' end;

# 2022-05-31 14:15:54.770201
+select case when false then 'a' when null in (null) then 'b' else 'c' end;

# 2022-05-31 14:16:01.354734
+select case when false then 'a' when null = null then 'b' else 'c' end;

# 2022-06-02 13:17:56.169100
+\q

# 2022-06-02 13:18:10.295107
+SELECT
+    profiles."state"  AS "profiles.state",
+    COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))  AS "estate_beneficiaries.estimated_gift_value_currency",
+    (CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)  AS "estate_plans.currency",
+    (CASE
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'USD' THEN '$'
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'CAD' THEN 'CA$'
+      ELSE CONCAT((COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+), ' ')
+      END
+) AS "estate_beneficiaries.estimated_gift_value_currency_symbol",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts",
+    COALESCE(SUM(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END), 0) AS "estate_beneficiaries.charitable_gift_completed_sum"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((( estate_plans."last_section_completed_updated_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_plans."last_section_completed_updated_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    5 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-02 13:18:15.614170
+\e

# 2022-06-02 13:18:23.854628
+SELECT
+    profiles."state"  AS "profiles.state",
+    COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))  AS "estate_beneficiaries.estimated_gift_value_currency",
+    (CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)  AS "estate_plans.currency",
+    (CASE
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'USD' THEN '$'
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'CAD' THEN 'CA$'
+      ELSE CONCAT((COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+), ' ')
+      END
+) AS "estate_beneficiaries.estimated_gift_value_currency_symbol",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts",
+    COALESCE(SUM(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END), 0) AS "estate_beneficiaries.charitable_gift_completed_sum"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((( estate_plans."last_section_completed_updated_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_plans."last_section_completed_updated_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    5 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-02 13:19:32.422513
+SELECT
+    profiles."state"  AS "profiles.state",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((( estate_plans."last_section_completed_updated_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_plans."last_section_completed_updated_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-06-02 13:19:36.855535
+\e

# 2022-06-02 13:19:43.942544
+SELECT
+    profiles."state"  AS "profiles.state",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((( estate_plans."last_section_completed_updated_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_plans."last_section_completed_updated_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-06-02 14:41:02.451472
+\q

# 2022-06-07 13:08:00.944652
+SELECT
+    COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))  AS "estate_beneficiaries.estimated_gift_value_currency",
+    (CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)  AS "estate_plans.currency",
+    (CASE
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'USD' THEN '$'
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'CAD' THEN 'CA$'
+      ELSE CONCAT((COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+), ' ')
+      END
+) AS "estate_beneficiaries.estimated_gift_value_currency_symbol",
+        (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN 'Yes' ELSE 'No' END) AS "estate_plans.is_valid_finished",
+    AVG(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END) AS "estate_beneficiaries.charitable_gift_completed_avg"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    5 DESC;

# 2022-06-07 13:08:02.980872
+\e

# 2022-06-07 13:08:30.278050
+SELECT
+    AVG(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END) AS "estate_beneficiaries.charitable_gift_completed_avg"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    5 DESC;

# 2022-06-07 13:08:31.835658
+\e

# 2022-06-07 13:08:41.603736
+SELECT
+    AVG(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END) AS "estate_beneficiaries.charitable_gift_completed_avg"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+ORDER BY
+    1 DESC;

# 2022-06-07 13:08:43.244363
+\e

# 2022-06-07 13:08:57.196098
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END AS "estate_beneficiaries.charitable_gift_completed_avg"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+ORDER BY
+    1 DESC;

# 2022-06-07 13:11:08.478713
+SELECT
+    COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))  AS "estate_beneficiaries.estimated_gift_value_currency",
+    (CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)  AS "estate_plans.currency",
+    (CASE
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'USD' THEN '$'
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'CAD' THEN 'CA$'
+      ELSE CONCAT((COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+), ' ')
+      END
+) AS "estate_beneficiaries.estimated_gift_value_currency_symbol",
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+        (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN 'Yes' ELSE 'No' END) AS "estate_plans.is_valid_finished",
+    AVG(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END) AS "estate_beneficiaries.charitable_gift_completed_avg"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1,
+    2,
+    3,
+    4,
+    5
+ORDER BY
+    6 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-07 13:11:46.193616
+\e

# 2022-06-07 13:12:37.746458
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END AS "estate_beneficiaries.charitable_gift_completed_avg"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+ORDER BY
+    1 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-07 13:13:52.466344
+SELECT
+    COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))  AS "estate_beneficiaries.estimated_gift_value_currency",
+    (CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)  AS "estate_plans.currency",
+    (CASE
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'USD' THEN '$'
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'CAD' THEN 'CA$'
+      ELSE CONCAT((COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+), ' ')
+      END
+) AS "estate_beneficiaries.estimated_gift_value_currency_symbol",
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+        (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN 'Yes' ELSE 'No' END) AS "estate_plans.is_valid_finished",
+    AVG(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END) AS "estate_beneficiaries.charitable_gift_completed_avg"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1,
+    2,
+    3,
+    4,
+    5
+ORDER BY
+    6 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-07 13:14:01.013263
+\e

# 2022-06-07 13:14:37.182214
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END AS "estate_beneficiaries.charitable_gift_completed_avg"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+ORDER BY
+    1 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-07 13:14:44.285321
+\e

# 2022-06-07 13:14:54.415269
+SELECT
+    CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END AS "estate_charitable_gifts.bequest_source",
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END AS "estate_beneficiaries.charitable_gift_completed_avg"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('X88VlzK1',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-07 13:18:58.315231
+select median(col) from (1, 2, 3);

# 2022-06-07 13:19:13.684771
+select sum(1, 2);

# 2022-06-07 13:19:16.421471
+select sum(1);

# 2022-06-07 13:19:35.031277
+select sum(val) from (select 1 as val) query;

# 2022-06-07 13:19:38.363544
+select sum(val) from (select 1, 2 as val) query;

# 2022-06-07 13:19:41.973539
+select sum(val) from (select 1, 2, 3 as val) query;

# 2022-06-07 13:19:56.637382
+select sum(val) from (select 1 as val union select 2 as val union select 3 as val) query;

# 2022-06-07 13:20:02.884130
+select mean(val) from (select 1 as val union select 2 as val union select 3 as val) query;

# 2022-06-07 13:20:06.493749
+select avg(val) from (select 1 as val union select 2 as val union select 3 as val) query;

# 2022-06-07 13:20:09.524048
+select median(val) from (select 1 as val union select 2 as val union select 3 as val) query;

# 2022-06-07 13:20:45.103704
+select median_function2(val) from (select 1 as val union select 2 as val union select 3 as val) query;

# 2022-06-07 13:20:48.430649
+select median_function(val) from (select 1 as val union select 2 as val union select 3 as val) query;

# 2022-06-07 13:21:59.337435
+select percentile_cont(0.5) within group(order by val) from (select 1 as val union select 2 as val union select 3 as val) query;

# 2022-06-07 13:22:04.056640
+select percentile_cont(0.5) within group(order by val) from (select 1 as val union select 2 as val union select 4 as val) query;

# 2022-06-07 13:22:07.920419
+select percentile_cont(0.5) within group(order by val) from (select 1 as val union select 2.5 as val union select 4 as val) query;

# 2022-06-07 13:22:14.290083
+select percentile_cont(0.5) within group(order by val) from (select 1 as val union select 2.5 as val) query;

# 2022-06-09 13:54:04.752200
+\q

# 2022-06-09 13:54:26.898494
+select rand_id from organizations where display_name = 'Lutheran World Relief';

# 2022-06-13 11:50:31.485385
+\q

# 2022-06-13 11:50:38.855084
+SELECT
+    profiles."state"  AS "profiles.state",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:50:41.038971
+\e

# 2022-06-13 11:50:50.639350
+SELECT
+    profiles."state"  AS "profiles.state",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:50:53.413565
+\e

# 2022-06-13 11:51:07.759152
+SELECT
+    profiles."state"  AS "profiles.state",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = "FL"
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:51:10.279404
+\e

# 2022-06-13 11:51:21.487096
+SELECT
+    profiles."state"  AS "profiles.state",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = "FL"
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:51:22.343016
+\e

# 2022-06-13 11:51:34.821309
+SELECT
+    profiles."state"  AS "profiles.state",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles.state = "Florida"
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:51:37.127676
+\e

# 2022-06-13 11:51:49.264708
+SELECT
+    profiles."state"  AS "profiles.state",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:51:52.495567
+\e

# 2022-06-13 11:53:05.631845
+SELECT
+    profiles."state"  AS "profiles.state",
+    DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END AS "estate_beneficiaries.charitable_gifts_completed_count"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:53:07.379690
+\e

# 2022-06-13 11:53:11.075913
+SELECT
+    profiles."state"  AS "profiles.state",
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END AS "estate_beneficiaries.charitable_gifts_completed_count"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:53:14.887726
+\e

# 2022-06-13 11:53:24.741010
+SELECT
+    profiles."state"  AS "profiles.state",
+    (DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END) AS "estate_beneficiaries.charitable_gifts_completed_count"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:53:26.671781
+\e

# 2022-06-13 11:53:35.192956
+SELECT
+    profiles."state"  AS "profiles.state",
+    (DISTINCT (CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END)) AS "estate_beneficiaries.charitable_gifts_completed_count"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:53:36.102784
+\e

# 2022-06-13 11:53:40.925807
+SELECT
+    profiles."state"  AS "profiles.state",
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END AS "estate_beneficiaries.charitable_gifts_completed_count"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+GROUP BY
+    1
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:53:42.278727
+\e

# 2022-06-13 11:54:03.216025
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END AS "estate_beneficiaries.charitable_gifts_completed_count"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    2 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:54:04.639395
+\e

# 2022-06-13 11:54:08.915982
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END AS "estate_beneficiaries.charitable_gifts_completed_count"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:55:06.232001
+SELECT
+    profiles."state"  AS "profiles.state",
+    COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))  AS "estate_beneficiaries.estimated_gift_value_currency",
+    (CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)  AS "estate_plans.currency",
+    (CASE
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'USD' THEN '$'
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'CAD' THEN 'CA$'
+      ELSE CONCAT((COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+), ' ')
+      END
+) AS "estate_beneficiaries.estimated_gift_value_currency_symbol",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts",
+    COALESCE(SUM(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END), 0) AS "estate_beneficiaries.charitable_gift_completed_sum"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    5 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 11:55:09.272712
+\e

# 2022-06-13 11:55:20.670365
+SELECT
+    profiles."state"  AS "profiles.state",
+    COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))  AS "estate_beneficiaries.estimated_gift_value_currency",
+    (CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)  AS "estate_plans.currency",
+    (CASE
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'USD' THEN '$'
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'CAD' THEN 'CA$'
+      ELSE CONCAT((COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+), ' ')
+      END
+) AS "estate_beneficiaries.estimated_gift_value_currency_symbol",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts",
+    COALESCE(SUM(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END), 0) AS "estate_beneficiaries.charitable_gift_completed_sum"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    5 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 11:55:26.840237
+\e

# 2022-06-13 11:56:08.718395
+SELECT
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts",
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    5 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 11:56:11.072105
+\e

# 2022-06-13 11:56:14.077939
+SELECT
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    5 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 11:56:15.502710
+\e

# 2022-06-13 11:56:20.585025
+SELECT
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 11:56:28.588473
+\e

# 2022-06-13 11:56:39.417793
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 11:56:42.229301
+\e

# 2022-06-13 11:56:54.123912
+SELECT
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 11:56:55.580789
+\e

# 2022-06-13 11:56:58.319905
+SELECT
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 11:56:59.247372
+\e

# 2022-06-13 11:57:16.416870
+SELECT
+    DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 11:57:18.367376
+\e

# 2022-06-13 11:57:24.946025
+SELECT
+    DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 11:57:26.503406
+\e

# 2022-06-13 11:57:30.009352
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 11:57:31.247051
+\e

# 2022-06-13 11:57:52.456676
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-06-13 11:59:19.097968
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_beneficiaries.charitable_gift_id  ELSE NULL END AS "estate_beneficiaries.charitable_gifts_completed_count"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2022-06-13 11:59:47.255209
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-06-13 12:00:09.066227
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 12:00:10.438551
+\e

# 2022-06-13 12:00:13.872603
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-06-13 12:00:45.960642
+SELECT
+    profiles."state"  AS "profiles.state",
+    COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))  AS "estate_beneficiaries.estimated_gift_value_currency",
+    (CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)  AS "estate_plans.currency",
+    (CASE
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'USD' THEN '$'
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'CAD' THEN 'CA$'
+      ELSE CONCAT((COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+), ' ')
+      END
+) AS "estate_beneficiaries.estimated_gift_value_currency_symbol",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts",
+    COALESCE(SUM(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END), 0) AS "estate_beneficiaries.charitable_gift_completed_sum"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    5 DESC
+FETCH NEXT 15 ROWS ONLY

# 2022-06-13 12:00:48.289811
+\e

# 2022-06-13 12:00:51.966146
+SELECT
+    profiles."state"  AS "profiles.state",
+    COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))  AS "estate_beneficiaries.estimated_gift_value_currency",
+    (CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)  AS "estate_plans.currency",
+    (CASE
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'USD' THEN '$'
+      WHEN (COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+) = 'CAD' THEN 'CA$'
+      ELSE CONCAT((COALESCE(estate_beneficiaries.cash_amount_currency, ((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 'USD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 'USD'
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 'CAD'
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 'CAD'
+
+    -- assume USD for estate plans that don't have an asset value range yet (or have corrupt data)
+    ELSE 'USD'
+    END)
+))
+), ' ')
+      END
+) AS "estate_beneficiaries.estimated_gift_value_currency_symbol",
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts",
+    COALESCE(SUM(CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN ( COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+)) )  ELSE NULL END), 0) AS "estate_beneficiaries.charitable_gift_completed_sum"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+GROUP BY
+    1,
+    2,
+    3,
+    4
+ORDER BY
+    5 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-06-13 12:00:58.295313
+\e

# 2022-06-13 12:01:29.392374
+SELECT
+    COUNT(DISTINCT CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END) AS "estate_plans.count_finished_rlts"
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-06-13 12:01:30.806780
+\e

# 2022-06-13 12:01:44.129229
+SELECT
+    CASE WHEN (estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null) THEN estate_plans.rand_id  ELSE NULL END AS "estate_plans.count_finished_rlts"
+
+
+FROM public.estate_charitable_gifts  AS estate_charitable_gifts
+INNER JOIN public.profiles  AS profiles ON estate_charitable_gifts.profile_id = (profiles."rand_id")
+LEFT JOIN public.users  AS users ON (profiles."account_id") = (users."rand_id")
+INNER JOIN public.estate_plans  AS estate_plans ON estate_charitable_gifts.estate_id = estate_plans.rand_id
+INNER JOIN public.estate_beneficiaries  AS estate_beneficiaries ON estate_charitable_gifts.rand_id = estate_beneficiaries.charitable_gift_id and (CASE
+      WHEN estate_beneficiaries.level::varchar(255) = '1' THEN 'Primary'
+      WHEN estate_beneficiaries.level::varchar(255) = '2' THEN 'Secondary'
+      WHEN estate_beneficiaries.level::varchar(255) = '3' THEN 'Tertiary'
+      ELSE estate_beneficiaries.level::varchar(255)
+      END) = 'Primary' and estate_beneficiaries.property_id IS NULL
+LEFT JOIN public.programs  AS programs ON COALESCE(estate_charitable_gifts.reassociated_program_id, estate_charitable_gifts.program_id) = (programs."rand_id")
+INNER JOIN public.organizations  AS organizations ON COALESCE((programs."organization_id"), estate_charitable_gifts.organization_id) = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('VQ8bfZWh',','))
+LEFT JOIN public.organization_custom_urls  AS organization_custom_urls ON (BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')) = (organization_custom_urls."url_name")
+LEFT JOIN public.custom_programs  AS custom_programs ON (custom_programs."gift_id") = estate_charitable_gifts.rand_id
+
+
+WHERE ((( estate_charitable_gifts."created_at"  ) >= ((SELECT (DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL))) AND ( estate_charitable_gifts."created_at"  ) < ((SELECT ((DATE_TRUNC('month', DATE_TRUNC('day', CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) + (-11 || ' month')::INTERVAL) + (12 || ' month')::INTERVAL))))) AND (CASE
+        WHEN LOWER((estate_charitable_gifts."metrics") ->> 'giftSource') in ('suggested','cause_area','give_back') and (organization_custom_urls."url_name") is null
+            then 'freewill_feature'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null) AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) != 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_site'
+        WHEN (LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') != 'write_in' OR LOWER(metrics ->> 'giftSource') is null)
+            AND (
+            SELECT COUNT(*) FROM public.organization_custom_urls AS ocu
+            WHERE ocu.organization_id = estate_charitable_gifts.organization_id AND ocu.url_name = ((
+    BTRIM(LOWER((estate_plans."meta_info") -> 'location' -> 'path' ->> 0), '/')
+    ))
+           ) = 0 and (organization_custom_urls."url_name") is not null
+            then 'partner_feature'
+        WHEN LOWER((estate_charitable_gifts."metrics")  ->> 'giftSource') = 'write_in'
+            then 'write_in'
+        ELSE 'other'
+        END) LIKE '%feature%' AND ((estate_plans.last_section_completed = 'review')
+      and (estate_plans.is_fake = false or estate_plans.is_fake is null)) AND ((profiles."deleted_at") is null
+    and (estate_charitable_gifts."deleted_at") is null
+    and (not estate_plans.is_fake or estate_plans.is_fake is null)
+    and (COALESCE(estate_beneficiaries.cash_amount,(estate_beneficiaries.allocation_percent/100)*((CASE
+    -- USD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-usd' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-usd' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-usd' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-usd' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-usd' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-usd' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-usd' THEN 100000
+
+    -- CAD
+    WHEN estate_plans.asset_value_range = 'gt-10mm-cad' THEN 12500000
+    WHEN estate_plans.asset_value_range = 'btw-5mm-10mm-cad' THEN 7500000
+    WHEN estate_plans.asset_value_range = 'btw-2mm-5mm-cad' THEN 3500000
+    WHEN estate_plans.asset_value_range = 'btw-1mm-2mm-cad' THEN 1500000
+    WHEN estate_plans.asset_value_range = 'btw-500k-1mm-cad' THEN 750000
+    WHEN estate_plans.asset_value_range = 'btw-200k-500k-cad' THEN 350000
+    WHEN estate_plans.asset_value_range = 'lt-200k-cad' THEN 100000
+    ELSE 0
+    END)
+))
+) >= 100
+    and ((estate_charitable_gifts."created_at") <= NOW() - interval '24 hours') = 'Yes'
+  )
+  and profiles."state" = 'FL'
+ORDER BY
+    1 DESC
+FETCH NEXT 500 ROWS ONLY

# 2022-06-13 12:03:03.495252
+select count(*) from estate_charitable_gifts where estate_id = 'V9nHXZ5Z';

# 2022-06-13 12:03:11.653358
+select rand_id from estate_charitable_gifts where estate_id = 'V9nHXZ5Z';

# 2022-06-14 12:45:16.384627
+select count(ecg.*), o.rand_id from estate_charitable_gifts ecg join organizations ON organizations.rand_id = ecg.organization_id group by o.rand_id;

# 2022-06-14 12:45:26.073160
+select count(ecg.*), o.rand_id from estate_charitable_gifts ecg join organizations o ON o.rand_id = ecg.organization_id group by o.rand_id;

# 2022-06-14 12:45:44.862207
+select * from organizations where rand_id = '21NyYMUV'

# 2022-06-14 12:46:52.606980
+select * from organizations where legal_name ilike '%lutheran%'

# 2022-06-14 12:47:16.732269
+select counT(*) from estate_charitable_gifts where organization_id = 'X88VlzK1';

# 2022-06-14 12:48:51.784479
+select * from estate_charitable_gifts where organization_id = 'X88VlzK1';

# 2022-06-14 12:49:10.199166
+select metrics->'giftSource' from estate_charitable_gifts where organization_id = 'X88VlzK1';

# 2022-06-14 13:32:45.446968
+select * from organizations limit 1;

# 2022-06-14 13:32:57.313050
+select * from programs limit 1;

# 2022-06-14 13:46:40.302671
+f

# 2022-06-14 13:52:48.316502
+select * from organizations limit 1;

# 2022-06-14 13:54:28.936791
+select products from organizations limit 1;

# 2022-06-14 13:54:57.441965
+select json_object_keys(products) from organizations limit 1;

# 2022-06-14 13:55:12.701668
+select jsonb_object_keys(products) from organizations limit 1;

# 2022-06-14 13:55:30.917157
+select jsonb_object_keys(products)[2] from organizations limit 1;

# 2022-06-14 13:55:35.316064
+select jsonb_object_keys(products)->'2' from organizations limit 1;

# 2022-06-14 13:55:39.212354
+select jsonb_object_keys(products) from organizations limit 1;

# 2022-06-14 13:56:02.325097
+select array_agg(json_keys),id from (
+select json_object_keys(json_stuff) as json_keys,id from table) a group by a.id
+

# 2022-06-14 13:56:39.570951
+select array_agg(json_keys),id from (
+select json_object_keys(products) as json_keys from organizations limit 1) a;

# 2022-06-14 13:56:44.627758
+select array_agg(json_keys) from (
+select json_object_keys(products) as json_keys from organizations limit 1) a;

# 2022-06-14 13:56:50.530178
+select array_agg(json_keys) from (
+select jsonb_object_keys(products) as json_keys from organizations limit 1) a;

# 2022-06-14 13:56:56.017731
+select array_agg(json_keys) from (
+select jsonb_object_keys(products) as json_keys from organizations) a;

# 2022-06-14 13:57:15.425295
+select json_keys from (
+select jsonb_object_keys(products) as json_keys from organizations) a;

# 2022-06-14 13:57:24.001114
+select distinct json_keys from (
+select jsonb_object_keys(products) as json_keys from organizations) a;

# 2022-06-14 14:11:36.132436
+select * from programs limit 1;

# 2022-06-14 14:42:31.300354
+select * from organizations where legal_name ilike '%lutheran world relief%'

# 2022-06-16 13:41:43.552785
+select distinct json_keys from (
+select jsonb_object_keys(products) as json_keys from organizations) a;

# 2022-06-16 13:41:57.914155
+select * from programs limit 1;

# 2022-06-16 13:43:46.710316
+select * from programs where show_publicly = true or locality = 'national';

# 2022-06-16 13:43:56.004683
+select * from locality;

# 2022-06-16 13:44:04.956086
+select locality from programs where locality is not null;

# 2022-06-16 13:44:10.244157
+\d programs

# 2022-06-16 13:44:35.786901
+select * from programs where show_publicly = true or locality = 2;

# 2022-06-16 13:45:21.123143
+select distinct legal_name from organizations o join programs p on o.rand_id = p.organization_id where p.show_publicly = true or p.locality = 2);

# 2022-06-16 13:45:23.349255
+select distinct legal_name from organizations o join programs p on o.rand_id = p.organization_id where p.show_publicly = true or p.locality = 2;

# 2022-06-16 13:45:28.633473
+select distinct o.legal_name from organizations o join programs p on o.rand_id = p.organization_id where p.show_publicly = true or p.locality = 2;

# 2022-06-16 13:45:36.666645
+select distinct o.legal_name from organizations o join programs p on o.rand_id = p.organization_id where not (p.show_publicly = true or p.locality = 2);

# 2022-06-16 13:45:46.628181
+select distinct o.legal_name from organizations o join programs p on o.rand_id = p.organization_id where p.show_publicly = true or p.locality = 2;

# 2022-06-16 13:46:45.180161
+select o.legal_name from organizations o join programs p on o.rand_id = p.organization_id where p.show_publicly = true or p.locality = 2;

# 2022-06-16 13:46:54.521240
+select o.legal_name from organizations o join programs p on o.rand_id = p.organization_id where not (p.show_publicly = true or p.locality = 2);

# 2022-06-16 13:47:40.751174
+select o.legal_name from organizations o join programs p on o.rand_id = p.organization_id where p.show_publicly = true or p.locality = 2;

# 2022-06-16 13:50:18.421594
+select * from programs where show_publicly = true or locality = 2;

# 2022-06-16 13:50:28.567005
+(select organization_id from programs where show_publicly = true or locality = 2);

# 2022-06-16 13:50:38.805373
+select legal_name from organizations where rand_id in (select organization_id from programs where show_publicly = true or locality = 2);

# 2022-06-16 13:50:45.524337
+select legal_name from organizations where rand_id not in (select organization_id from programs where show_publicly = true or locality = 2);

# 2022-06-16 13:56:35.040648
+select * from organizations where legal_name ilike 'hawaiian humane society';

# 2022-06-16 13:56:57.178774
+select * from programs where organization_id in (select rand_id from organizations where legal_name ilike 'hawaiian humane society');

# 2022-06-16 13:59:28.448991
+select * from programs where rand_id = 'v1Bd6par';

# 2022-06-16 13:59:43.186355
+select * from programs where organization_id in (select rand_id from organizations where legal_name ilike 'hawaiian humane society');

# 2022-06-16 13:59:56.800175
+select rand_id from programs where organization_id in (select rand_id from organizations where legal_name ilike 'hawaiian humane society');

# 2022-06-16 14:00:20.353250
+select * from organizations where rand_id = 'BFu0FLbs';

# 2022-06-16 14:07:09.772088
+select legal_name from organizations where rand_id not in (select organization_id from programs where show_publicly = true and locality = 2);

# 2022-06-16 14:07:44.918985
+select * from programs where organization_id in (select rand_id from organizations where legal_name ilike 'hawaiian humane society');

# 2022-06-16 14:14:57.116208
+\d rand_ids_in_use

# 2022-06-17 14:43:48.517826
+select * from organizations where legal_name ilike '%lutheran world relief%'

# 2022-06-17 14:43:56.777676
+(select rand_id from organizations where legal_name ilike '%lutheran world relief%');

# 2022-06-17 14:44:09.233452
+select show_publicly, locality from programs where organization_id in (select rand_id from organizations where legal_name ilike '%lutheran world relief%');

# 2022-06-17 14:45:13.552373
+select rand_id, show_publicly, locality from programs where organization_id in (select rand_id from organizations where legal_name ilike '%lutheran world relief%');

# 2022-06-17 14:46:29.413757
+select rand_id, show_publicly, locality, product from programs where organization_id in (select rand_id from organizations where legal_name ilike '%lutheran world relief%');

# 2022-06-17 14:46:34.049567
+select rand_id, show_publicly, locality, products from programs where organization_id in (select rand_id from organizations where legal_name ilike '%lutheran world relief%');

# 2022-06-17 14:47:24.625137
+select count(*) from programs where show_publicly = true and locality = 2 and products->'has_will' = false;

# 2022-06-17 14:47:28.230696
+select count(*) from programs where show_publicly = true and locality = 2 and products->'has_will'::boolean = false;

# 2022-06-17 14:47:35.029732
+select count(*) from programs where show_publicly = true and locality = 2 and (products->'has_will')::boolean = false;

# 2022-06-17 14:47:58.096492
+select count(*) from programs where show_publicly = true and locality = 2 and ((products->'has_will')::boolean = false (products->'has_will')::boolean is null);

# 2022-06-17 14:48:05.567983
+select count(*) from programs where show_publicly = true and locality = 2 and ((products->'has_will')::boolean = false or (products->'has_will')::boolean is null);

# 2022-06-21 12:04:11.888867
+select distinct locality from programs;

# 2022-06-21 12:17:54.162597
+select * from programs limit 1;

# 2022-06-21 12:28:08.076306
+select count(*) from programs where show_publicly = true and locality in (0, 1, 2) and organization_id in (select rand_id from organizations where legal_name = 'Lutheran World Relief');

# 2022-06-21 12:28:15.081311
+select count(*) from programs where show_publicly = true and locality in (0, 1, 2) and organization_id in (select rand_id from organizations where legal_name = 'Hawaiian Humane Society');

# 2022-06-21 12:28:43.817154
+select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id;w where show_publicly = true and locality in (0, 1, 2) and organization_id in (select rand_id from organizations where legal_name = 'Hawaiian Humane Society');

# 2022-06-21 12:28:49.859752
+select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id;w where show_publicly = true and locality in (0, 1, 2);

# 2022-06-21 12:28:55.200955
+select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id;w where show_publicly = true and locality in (0, 1, 2) group by o.legal_name;

# 2022-06-21 12:29:07.778022
+select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id;w group by o.local_name where show_publicly = true and locality in (0, 1, 2);

# 2022-06-21 12:29:14.505078
+select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id;w group by o.egal_name where show_publicly = true and locality in (0, 1, 2);

# 2022-06-21 12:29:18.756232
+select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id;w group by o.legal_name where show_publicly = true and locality in (0, 1, 2);

# 2022-06-21 12:29:41.768828
+select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id where show_publicly = true and locality in (0, 1, 2) group by o.legal_name;

# 2022-06-21 12:30:07.904987
+select * from (select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id where show_publicly = true and locality in (0, 1, 2) group by o.legal_name) query where query.count > 1;

# 2022-06-21 12:32:04.969034
+select * from (select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id where show_publicly = true and locality in (0, 1, 2) group by o.legal_name) query where query.count = 1;

# 2022-06-21 12:32:09.134050
+select * from (select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id where show_publicly = true and locality in (0, 1, 2) group by o.legal_name) query where query.count = 0;

# 2022-06-21 12:32:13.386954
+select * from (select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id where show_publicly = true and locality in (0, 1, 2) group by o.legal_name) query where query.count <;

# 2022-06-21 12:32:15.889402
+select * from (select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id where show_publicly = true and locality in (0, 1, 2) group by o.legal_name) query where query.count < 1;

# 2022-06-21 12:32:27.485337
+select * from (select count(p.*), o.legal_name from programs p left join organizations o on o.rand_id = p.organization_id where show_publicly = true and locality in (0, 1, 2) group by o.legal_name) query where query.count < 1;

# 2022-06-21 12:33:02.860157
+select legal_name from organizations where legal_name not in (select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id where show_publicly = true and locality in (0, 1, 2) group by o.legal_name) query;

# 2022-06-21 12:33:05.244144
+select legal_name from organizations where legal_name not in (select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id where show_publicly = true and locality in (0, 1, 2) group by o.legal_name);

# 2022-06-21 12:33:23.742852
+select legal_name from organizations where legal_name not in (select lega_name from (select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id where show_publicly = true and locality in (0, 1, 2) group by o.legal_name) query);

# 2022-06-21 12:33:30.588784
+select legal_name from organizations where legal_name not in (select legal_name from (select count(p.*), o.legal_name from programs p join organizations o on o.rand_id = p.organization_id where show_publicly = true and locality in (0, 1, 2) group by o.legal_name) query);

# 2022-06-21 12:34:58.509658
+/todo

# 2022-06-21 13:04:52.024518
+fj

# 2022-06-23 13:54:43.617515
+select * from profiles limit 1;

# 2022-06-23 13:55:09.823292
+select * from users limit 1;

# 2022-06-23 13:55:17.106996
+\d organizations

# 2022-06-23 14:01:09.128849
+select * from user_roles limit 1;

# 2022-06-23 14:01:14.523964
+\d user_roles

# 2022-06-23 14:01:30.507306
+select meta_info from user_roles where meta_info is not null;

# 2022-06-23 14:01:38.213775
+select meta_info from user_roles where meta_info is not null and meta_info != {};

# 2022-06-23 14:01:43.213260
+select meta_info from user_roles where meta_info is not null and meta_info != '{}'::jsonb;

# 2022-06-23 14:02:49.012258
+select meta_info->'portal_org_ids' from user_roles where meta_info is not null and meta_info != '{}'::jsonb;

# 2022-06-23 14:03:01.116496
+select count(meta_info->'portal_org_ids') from user_roles where meta_info is not null and meta_info != '{}'::jsonb;

# 2022-06-23 14:03:27.556886
+select jsonb_array_length(meta_info->'portal_org_ids') from user_roles where meta_info is not null and meta_info != '{}'::jsonb;

# 2022-06-23 14:03:50.413415
+select count(meta_info->'portal_org_ids' from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1;

# 2022-06-23 14:03:55.841730
+select count(meta_info->'portal_org_ids') from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1;

# 2022-06-23 14:03:57.438231
+\q

# 2022-06-23 14:04:03.803791
+select count(meta_info->'portal_org_ids') from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1;

# 2022-06-23 14:04:31.020448
+select count(u.*) from user_roles ur join users u on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1;

# 2022-06-23 14:04:47.234110
+select count(*) from user_roles;

# 2022-06-23 14:04:51.153484
+select count(*) from users;

# 2022-06-23 14:04:59.761680
+select count(u.*) from user_roles ur left join users u on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1;

# 2022-06-23 14:05:15.909187
+select count(u.*) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1;

# 2022-06-23 14:05:24.892222
+\d user_roles

# 2022-06-23 14:06:49.615199
+select coun(u.*) from users where u.rand_id in (select user_id from user_roles);

# 2022-06-23 14:06:52.566907
+select count(u.*) from users where u.rand_id in (select user_id from user_roles);

# 2022-06-23 14:06:55.876705
+select count(u.*) from users u where u.rand_id in (select user_id from user_roles);

# 2022-06-23 14:07:03.690019
+select count(*) from users;

# 2022-06-23 16:47:42.087525
+select count(u.*) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1;

# 2022-06-23 16:47:56.233275
+select * from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1;

# 2022-06-23 16:48:13.136153
+select email from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1;

# 2022-06-23 16:48:38.372225
+select email from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:48:44.307953
+select * from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:49:13.198924
+select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:49:25.160023
+select unnest(ur.meta_info->'portal_org_ids') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:49:42.374820
+select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:51:22.213373
+select jsonb_to_recordset(ur.meta_info->'portal_org_ids') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:52:10.242262
+select jsonb_to_recordset(ur.meta_info->'portal_org_ids')::string from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:52:20.329791
+select jsonb_to_recordset(ur.meta_info->'portal_org_ids')::text from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:52:56.629066
+select jsonb_to_recordset(null::text, ur.meta_info->'portal_org_ids')::text from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:53:15.023822
+select jsonb_to_recordset(null, ur.meta_info->'portal_org_ids')::text from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:54:35.109164
+select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:55:07.987182
+select * from jsonb_to_recordset((select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%') query )query ;

# 2022-06-23 16:55:14.696760
+select * from jsonb_to_recordset((select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%')) query;

# 2022-06-23 16:55:42.383008
+select * from jsonb_to_recordset(null::table_stats_type, (select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%')) query;

# 2022-06-23 16:55:50.648586
+select * from jsonb_to_recordset(null::text, (select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%')) query;

# 2022-06-23 16:56:10.326702
+select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:56:46.570886
+select rand_id from organizations where rand_id in (select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%');

# 2022-06-23 16:57:23.666759
+select * from jsonb_to_recordset(null::text, (select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%')) query;

# 2022-06-23 16:57:28.737726
+select * from jsonb_to_recordset((select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%')) query;

# 2022-06-23 16:57:38.394198
+select * from jsonb_to_recordset((select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%')) as query;

# 2022-06-23 16:57:46.821729
+select * from jsonb_to_recordset((select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%')) as org_ids query;

# 2022-06-23 16:57:49.400014
+select * from jsonb_to_recordset((select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%')) as org_ids;

# 2022-06-23 16:58:08.719385
+select * from jsonb_to_recordset((select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%')) as x( org_ids text );

# 2022-06-23 16:58:34.205493
+select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 16:58:52.877970
+\q

# 2022-06-23 17:09:03.658690
+select count(*) fro organizations where rand_id in (???);

# 2022-06-23 17:09:04.497480
+\e

# 2022-06-23 17:10:33.899225
+select count(*) fro organizations where rand_id in (
+"1JvFG0wX", "ZgVXpZxb", "rpxCO1AI", "L9npuAJk", "ksqUKemV", "VORdAla5", "cIXj8DEO", "guTZdkvx", "8xkD4H8B", "WXE5BCCS", "Jy5aahiN", "i9WWNoOL", "FdgDI003", "QdseoyIy", "m8QMDdJU", "oQCarHxf", "AN2pIUCk", "ytzsCPSz", "t7Salkmj", "tFmHs9BX", "z3nmwSaJ", "ZxNuqfvI", "IVSOxvU7", "qzFlHb8E", "peRQC0YE", "VOzI4YEn", "NXcORRI9", "56M59bQP", "Q719XtPB", "eQeGnxA5", "809lS32n", "Ezdch0I6", "aEmvmDAo", "ZGGFoWVi", "aEmvmDAo", "ZGGFoWVi", "ZgIJDjLd", "sLfhYq8c", "smDI0tRJ", "9gLOrTF1", "iW6oRcj1", "EGmc1tRS", "IXgFFxvp", "JqKlxjl8", "oZ5Wf6S0", "dZKhoniB", "iBkkHIaH", "szyi2ZUr", "3PE7XWI8", "FWRkpnaV", "aEmvmDAo", "ZGGFoWVi", "aEmvmDAo", "ZGGFoWVi", "a0PMjxZM", "3PE7XWI8", "V8rpfTic", "RuYJCioC", "iW6oRcj1", "sLfhYq8c", "EGmc1tRS", "JqKlxjl8", "0fqYgq7E", "ZgIJDjLd", "smDI0tRJ", "dZKhoniB", "IXgFFxvp", "B380YqH0", "aEmvmDAo", "ZGGFoWVi", "ZGGFoWVi", "aEmvmDAo"
+);

# 2022-06-23 17:10:46.741661
+select count(*) from organizations where rand_id in (
+"1JvFG0wX", "ZgVXpZxb", "rpxCO1AI", "L9npuAJk", "ksqUKemV", "VORdAla5", "cIXj8DEO", "guTZdkvx", "8xkD4H8B", "WXE5BCCS", "Jy5aahiN", "i9WWNoOL", "FdgDI003", "QdseoyIy", "m8QMDdJU", "oQCarHxf", "AN2pIUCk", "ytzsCPSz", "t7Salkmj", "tFmHs9BX", "z3nmwSaJ", "ZxNuqfvI", "IVSOxvU7", "qzFlHb8E", "peRQC0YE", "VOzI4YEn", "NXcORRI9", "56M59bQP", "Q719XtPB", "eQeGnxA5", "809lS32n", "Ezdch0I6", "aEmvmDAo", "ZGGFoWVi", "aEmvmDAo", "ZGGFoWVi", "ZgIJDjLd", "sLfhYq8c", "smDI0tRJ", "9gLOrTF1", "iW6oRcj1", "EGmc1tRS", "IXgFFxvp", "JqKlxjl8", "oZ5Wf6S0", "dZKhoniB", "iBkkHIaH", "szyi2ZUr", "3PE7XWI8", "FWRkpnaV", "aEmvmDAo", "ZGGFoWVi", "aEmvmDAo", "ZGGFoWVi", "a0PMjxZM", "3PE7XWI8", "V8rpfTic", "RuYJCioC", "iW6oRcj1", "sLfhYq8c", "EGmc1tRS", "JqKlxjl8", "0fqYgq7E", "ZgIJDjLd", "smDI0tRJ", "dZKhoniB", "IXgFFxvp", "B380YqH0", "aEmvmDAo", "ZGGFoWVi", "ZGGFoWVi", "aEmvmDAo"
+);

# 2022-06-23 17:10:51.115600
+\e

# 2022-06-23 17:11:33.007327
+select count(*) from organizations where rand_id in (
+'1JvFG0wX', 'ZgVXpZxb', 'rpxCO1AI', 'L9npuAJk', 'ksqUKemV', 'VORdAla5', 'cIXj8DEO', 'guTZdkvx', '8xkD4H8B', 'WXE5BCCS', 'Jy5aahiN', 'i9WWNoOL', 'FdgDI003', 'QdseoyIy', 'm8QMDdJU', 'oQCarHxf', 'AN2pIUCk', 'ytzsCPSz', 't7Salkmj', 'tFmHs9BX', 'z3nmwSaJ', 'ZxNuqfvI', 'IVSOxvU7', 'qzFlHb8E', 'peRQC0YE', 'VOzI4YEn', 'NXcORRI9', '56M59bQP', 'Q719XtPB', 'eQeGnxA5', '809lS32n', 'Ezdch0I6', 'aEmvmDAo', 'ZGGFoWVi', 'aEmvmDAo', 'ZGGFoWVi', 'ZgIJDjLd', 'sLfhYq8c', 'smDI0tRJ', '9gLOrTF1', 'iW6oRcj1', 'EGmc1tRS', 'IXgFFxvp', 'JqKlxjl8', 'oZ5Wf6S0', 'dZKhoniB', 'iBkkHIaH', 'szyi2ZUr', '3PE7XWI8', 'FWRkpnaV', 'aEmvmDAo', 'ZGGFoWVi', 'aEmvmDAo', 'ZGGFoWVi', 'a0PMjxZM', '3PE7XWI8', 'V8rpfTic', 'RuYJCioC', 'iW6oRcj1', 'sLfhYq8c', 'EGmc1tRS', 'JqKlxjl8', '0fqYgq7E', 'ZgIJDjLd', 'smDI0tRJ', 'dZKhoniB', 'IXgFFxvp', 'B380YqH0', 'aEmvmDAo', 'ZGGFoWVi', 'ZGGFoWVi', 'aEmvmDAo'
+);

# 2022-06-23 17:11:49.025774
+select rand_id from organizations where rand_id in (
+'1JvFG0wX', 'ZgVXpZxb', 'rpxCO1AI', 'L9npuAJk', 'ksqUKemV', 'VORdAla5', 'cIXj8DEO', 'guTZdkvx', '8xkD4H8B', 'WXE5BCCS', 'Jy5aahiN', 'i9WWNoOL', 'FdgDI003', 'QdseoyIy', 'm8QMDdJU', 'oQCarHxf', 'AN2pIUCk', 'ytzsCPSz', 't7Salkmj', 'tFmHs9BX', 'z3nmwSaJ', 'ZxNuqfvI', 'IVSOxvU7', 'qzFlHb8E', 'peRQC0YE', 'VOzI4YEn', 'NXcORRI9', '56M59bQP', 'Q719XtPB', 'eQeGnxA5', '809lS32n', 'Ezdch0I6', 'aEmvmDAo', 'ZGGFoWVi', 'aEmvmDAo', 'ZGGFoWVi', 'ZgIJDjLd', 'sLfhYq8c', 'smDI0tRJ', '9gLOrTF1', 'iW6oRcj1', 'EGmc1tRS', 'IXgFFxvp', 'JqKlxjl8', 'oZ5Wf6S0', 'dZKhoniB', 'iBkkHIaH', 'szyi2ZUr', '3PE7XWI8', 'FWRkpnaV', 'aEmvmDAo', 'ZGGFoWVi', 'aEmvmDAo', 'ZGGFoWVi', 'a0PMjxZM', '3PE7XWI8', 'V8rpfTic', 'RuYJCioC', 'iW6oRcj1', 'sLfhYq8c', 'EGmc1tRS', 'JqKlxjl8', '0fqYgq7E', 'ZgIJDjLd', 'smDI0tRJ', 'dZKhoniB', 'IXgFFxvp', 'B380YqH0', 'aEmvmDAo', 'ZGGFoWVi', 'ZGGFoWVi', 'aEmvmDAo'
+);

# 2022-06-23 17:11:53.138979
+\e

# 2022-06-23 17:13:07.724260
+select rand_id from organizations where rand_id in (
+'1JvFG0wX', 'ZgVXpZxb', 'rpxCO1AI', 'L9npuAJk', 'ksqUKemV', 'VORdAla5', 'cIXj8DEO', 'guTZdkvx', '8xkD4H8B', 'WXE5BCCS', 'Jy5aahiN', 'i9WWNoOL', 'FdgDI003', 'QdseoyIy', 'm8QMDdJU', 'oQCarHxf', 'AN2pIUCk', 'ytzsCPSz', 't7Salkmj', 'tFmHs9BX', 'z3nmwSaJ', 'ZxNuqfvI', 'IVSOxvU7', 'qzFlHb8E', 'peRQC0YE', 'VOzI4YEn', 'NXcORRI9', '56M59bQP', 'Q719XtPB', 'eQeGnxA5', '809lS32n', 'Ezdch0I6', 'aEmvmDAo', 'ZGGFoWVi', 'aEmvmDAo', 'ZGGFoWVi', 'ZgIJDjLd', 'sLfhYq8c', 'smDI0tRJ', '9gLOrTF1', 'iW6oRcj1', 'EGmc1tRS', 'IXgFFxvp', 'JqKlxjl8', 'oZ5Wf6S0', 'dZKhoniB', 'iBkkHIaH', 'szyi2ZUr', '3PE7XWI8', 'FWRkpnaV', 'aEmvmDAo', 'ZGGFoWVi', 'aEmvmDAo', 'ZGGFoWVi', 'a0PMjxZM', '3PE7XWI8', 'V8rpfTic', 'RuYJCioC', 'iW6oRcj1', 'sLfhYq8c', 'EGmc1tRS', 'JqKlxjl8', '0fqYgq7E', 'ZgIJDjLd', 'smDI0tRJ', 'dZKhoniB', 'IXgFFxvp', 'B380YqH0', 'aEmvmDAo', 'ZGGFoWVi', 'ZGGFoWVi', 'aEmvmDAo'
+) and rand_id in (select organization_id from programs where show_publicly = true and locality in (1,2,3));

# 2022-06-23 17:13:42.662508
+select legal_name from organizations where rand_id in (
+'1JvFG0wX', 'ZgVXpZxb', 'rpxCO1AI', 'L9npuAJk', 'ksqUKemV', 'VORdAla5', 'cIXj8DEO', 'guTZdkvx', '8xkD4H8B', 'WXE5BCCS', 'Jy5aahiN', 'i9WWNoOL', 'FdgDI003', 'QdseoyIy', 'm8QMDdJU', 'oQCarHxf', 'AN2pIUCk', 'ytzsCPSz', 't7Salkmj', 'tFmHs9BX', 'z3nmwSaJ', 'ZxNuqfvI', 'IVSOxvU7', 'qzFlHb8E', 'peRQC0YE', 'VOzI4YEn', 'NXcORRI9', '56M59bQP', 'Q719XtPB', 'eQeGnxA5', '809lS32n', 'Ezdch0I6', 'aEmvmDAo', 'ZGGFoWVi', 'aEmvmDAo', 'ZGGFoWVi', 'ZgIJDjLd', 'sLfhYq8c', 'smDI0tRJ', '9gLOrTF1', 'iW6oRcj1', 'EGmc1tRS', 'IXgFFxvp', 'JqKlxjl8', 'oZ5Wf6S0', 'dZKhoniB', 'iBkkHIaH', 'szyi2ZUr', '3PE7XWI8', 'FWRkpnaV', 'aEmvmDAo', 'ZGGFoWVi', 'aEmvmDAo', 'ZGGFoWVi', 'a0PMjxZM', '3PE7XWI8', 'V8rpfTic', 'RuYJCioC', 'iW6oRcj1', 'sLfhYq8c', 'EGmc1tRS', 'JqKlxjl8', '0fqYgq7E', 'ZgIJDjLd', 'smDI0tRJ', 'dZKhoniB', 'IXgFFxvp', 'B380YqH0', 'aEmvmDAo', 'ZGGFoWVi', 'ZGGFoWVi', 'aEmvmDAo'
+) and rand_id in (select organization_id from programs where show_publicly = true and locality in (1,2,3));

# 2022-06-23 17:14:18.832094
+select ur.meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-23 17:17:14.551870
+select count(*) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and meta_info->'portal_org_ids' @> ARRAY['VORdAla5']::text[];

# 2022-06-23 17:17:28.150877
+select count(*) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and (meta_info->'portal_org_ids')::text[] @> ARRAY['VORdAla5']::text[];

# 2022-06-23 17:18:10.036007
+select count(*) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and jsonb_array_elements_text(meta_info->'portal_org_ids') @> ARRAY['VORdAla5']::text[];

# 2022-06-23 17:19:15.570411
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and jsonb_array_elements_text(meta_info->'portal_org_ids') @> ARRAY['VORdAla5']::text[];

# 2022-06-23 17:19:38.964156
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and meta_info->'portal_org_ids'->'0' = 'VORdAla5';

# 2022-06-23 17:19:59.712730
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and meta_info->'portal_org_ids'->'0' = 'VORdAla5'::jsonb;

# 2022-06-23 17:20:06.192084
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and meta_info->'portal_org_ids'->'0' = 'VORdAla5';

# 2022-06-23 17:21:21.339723
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and meta_info->'portal_org_ids'[0] = 'VORdAla5';

# 2022-06-23 17:21:29.824321
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and meta_info->'portal_org_ids'->>'0'  = 'VORdAla5';

# 2022-06-23 17:21:34.238945
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and meta_info->'portal_org_ids'->>'1' = 'VORdAla5';

# 2022-06-23 17:21:36.581492
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and meta_info->'portal_org_ids'->>'2' = 'VORdAla5';

# 2022-06-23 17:21:38.563296
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and meta_info->'portal_org_ids'->>'3' = 'VORdAla5';

# 2022-06-23 17:21:40.720042
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and meta_info->'portal_org_ids'->>'4' = 'VORdAla5';

# 2022-06-23 17:21:43.144018
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' and meta_info->'portal_org_ids'->>'5' = 'VORdAla5';

# 2022-06-23 17:21:53.298372
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' ;

# 2022-06-23 17:27:24.196447
+\q

# 2022-06-24 12:13:17.561856
+select meta_info->'portal_org_ids' from user_roles limit 1;

# 2022-06-24 12:13:40.459940
+select meta_info->'portal_org_ids' from user_roles where jsonb_array_length(meta_info->'portal_orgs_ids') > 0  limit 1;

# 2022-06-24 12:14:10.808338
+select meta_info->'portal_org_ids' from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1;

# 2022-06-24 12:14:13.697395
+select meta_info->'portal_org_ids' from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1;

# 2022-06-24 12:14:30.661553
+select (meta_info->'portal_org_ids')::text[] from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1;

# 2022-06-24 12:15:15.923923
+select jsonb_array_elements_text(meta_info->'portal_org_ids') from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1;

# 2022-06-24 12:16:20.212189
+select * from jsonb_array_elements_text(select meta_info->'portal_org_ids' from user_roles where jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1);

# 2022-06-24 12:16:36.524441
+select jsonb_array_elements_text(meta_info->'portal_org_ids') from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1;

# 2022-06-24 12:16:42.293021
+select jsonb_array_elements_text(meta_info->'portal_org_ids')->'1' from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1;

# 2022-06-24 12:17:22.573199
+select jsonb_array_elements_text((meta_info->'portal_org_ids') -> 1) from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1;

# 2022-06-24 12:17:28.040181
+select jsonb_array_elements_text((meta_info->'portal_org_ids') -> 0) from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1;

# 2022-06-24 12:17:32.378595
+select jsonb_array_elements_text((meta_info->'portal_org_ids')) from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1;

# 2022-06-24 12:17:41.287208
+select meta_info->'portal_org_ids' from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1;

# 2022-06-24 12:17:46.533303
+select meta_info->'portal_org_ids' -> 1 from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1;

# 2022-06-24 12:18:02.007383
+select jsonb_array_length(meta_info->'portal_org_ids') from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 limit 1;

# 2022-06-24 12:18:20.916409
+select max(jsonb_array_length(meta_info->'portal_org_ids')) from user_roles where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1;

# 2022-06-24 12:18:37.805501
+select meta_info->'portal_org_ids' from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' ;

# 2022-06-24 12:18:52.340758
+select jsonb_array_length(meta_info->'portal_org_ids') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' ;

# 2022-06-24 12:18:59.870482
+select max(jsonb_array_length(meta_info->'portal_org_ids')) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' ;

# 2022-06-24 12:21:14.254346
+select jsonb_array_elements_text(jsonb_array_length(meta_info->'portal_org_ids')) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' ;

# 2022-06-24 12:21:24.074975
+select jsonb_array_elements_text(meta_info->'portal_org_ids') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' ;

# 2022-06-24 12:21:34.437538
+select jsonb_array_elements_text(meta_info->'portal_org_ids') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:22:07.582172
+select user_id, array_agg(jsonb_array_elements_text(meta_info->'portal_org_ids')) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%' group by user_id;

# 2022-06-24 12:23:03.681065
+select jsonb_array_elements_text(meta_info->'portal_org_ids') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:23:11.820659
+select jsonb_each(meta_info->'portal_org_ids') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:24:21.078528
+select ('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:24:35.990593
+select jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:25:04.855058
+select pg_typeof(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:25:20.294607
+select (jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb))::text[] from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:26:57.530656
+select string_to_array(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:28:14.482117
+select string_to_array(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:29:44.488779
+select string_to_array(regex_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '[', ''), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:29:58.993526
+select string_to_array(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '[', ''), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:30:04.521997
+select string_to_array(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', ''), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:30:18.362593
+select string_to_array(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[|\]', ''), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:30:26.101514
+select string_to_array(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '(\[\])', ''), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:30:34.384888
+select string_to_array(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '[\[\]]', ''), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:30:58.383121
+select string_to_array(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', ''), '\]', ''), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:31:25.295618
+select pg_typeof(string_to_array(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', ''), '\]', ''), ',')) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:31:27.616131
+select string_to_array(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', ''), '\]', ''), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:31:44.304687
+select string_to_array(regexp_replace(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', ''), '\]', ''), ',', '"', '') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:31:49.695003
+select string_to_array(regexp_replace(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', ''), '\]', ''), ',', '"', '')) from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:32:15.337191
+select string_to_array(regexp_replace(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', ''), '\]', ''), '"', ''), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:33:06.875498
+select string_to_array(regexp_replace(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', '', 'g'), '\]', '', 'g'), '"', '', 'g'), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:33:46.925807
+select string_to_array(regexp_replace(regexp_replace(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', '', 'g'), '\]', '', 'g'), '"', '', 'g'), '\' ', '\'', 'g'), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:33:49.977309
+select string_to_array(regexp_replace(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', '', 'g'), '\]', '', 'g'), '"', '', 'g'), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%';

# 2022-06-24 12:34:15.614208
+select * from (select string_to_array(regexp_replace(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', '', 'g'), '\]', '', 'g'), '"', '', 'g'), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%');

# 2022-06-24 12:34:18.360617
+select * from (select string_to_array(regexp_replace(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', '', 'g'), '\]', '', 'g'), '"', '', 'g'), ',') from users u join user_roles ur on u.rand_id = ur.user_id where meta_info is not null and meta_info != '{}'::jsonb and jsonb_array_length(meta_info->'portal_org_ids') > 1 and email not ilike '%@freewill.com%') query;

# 2022-06-24 12:34:22.828191
+\e

# 2022-06-24 12:35:01.919735
+select * from
+  (
+    select string_to_array(regexp_replace(regexp_replace(regexp_replace(jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb), '\[', '', 'g'), '\]', '', 'g'), '"', '', 'g'), ',')
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query;

# 2022-06-24 12:35:03.644783
+\e

# 2022-06-24 12:36:19.113967
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',')
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query;

# 2022-06-24 12:36:27.466485
+\e

# 2022-06-24 12:36:42.594451
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query;

# 2022-06-24 12:36:44.533824
+\e

# 2022-06-24 12:36:56.996626
+select org_ids->0 from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query;

# 2022-06-24 12:37:29.973778
+\e

# 2022-06-24 12:37:33.896600
+select org_ids[0] from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query;

# 2022-06-24 12:37:36.475515
+\e

# 2022-06-24 12:37:43.082598
+select org_ids[1] from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query;

# 2022-06-24 12:37:56.608352
+\e

# 2022-06-24 12:39:45.807501
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+ where org_ids[1] in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+;

# 2022-06-24 12:39:48.225751
+\e

# 2022-06-24 12:39:56.132251
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+;

# 2022-06-24 12:39:58.131258
+\e

# 2022-06-24 12:41:07.640943
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   and org_ids @>
+;

# 2022-06-24 12:41:09.932506
+\e

# 2022-06-24 12:41:15.557048
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+
+;

# 2022-06-24 12:41:18.809952
+\e

# 2022-06-24 12:42:42.297639
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   and org_ids && []
+;

# 2022-06-24 12:42:43.807350
+\e

# 2022-06-24 12:42:52.889752
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   and org_ids && '[]'::text[]
+;

# 2022-06-24 12:42:54.987156
+\e

# 2022-06-24 12:43:05.576183
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   and org_ids && '["a","b"]'::text[]
+;

# 2022-06-24 12:43:06.985332
+\e

# 2022-06-24 12:43:34.897895
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+  join
+  (
+    select 1
+  ) query2 on true
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   -- and org_ids && '["a","b"]'::text[]
+;

# 2022-06-24 12:43:39.345429
+\e

# 2022-06-24 12:44:20.070939
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+  join
+  (
+    select array_agg(organization_id)
+      from programs
+     where show_publicly = true
+       and locality != -1
+  ) query2 on true
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   -- and org_ids && '["a","b"]'::text[]
+;

# 2022-06-24 12:44:24.158463
+\e

# 2022-06-24 12:44:40.168086
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+  join
+  (
+    select array_agg(organization_id) as featured_org_ids
+      from programs
+     where show_publicly = true
+       and locality != -1
+  ) query2 on true
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   -- and org_ids && '["a","b"]'::text[]
+;

# 2022-06-24 12:44:43.337472
+\e

# 2022-06-24 12:44:55.237396
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+  join
+  (
+    select array_agg(organization_id) as featured_org_ids
+      from programs
+     where show_publicly = true
+       and locality != -1
+  ) query2 on true
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   and org_ids && featured_org_ids
+;

# 2022-06-24 12:45:05.448276
+\e

# 2022-06-24 12:45:16.484570
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+  join
+  (
+    select pf_typeof(array_agg(organization_id)) as featured_org_ids
+      from programs
+     where show_publicly = true
+       and locality != -1
+  ) query2 on true
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   --and org_ids && featured_org_ids
+;

# 2022-06-24 12:45:18.419493
+\e

# 2022-06-24 12:45:22.880274
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+  join
+  (
+    select pg_typeof(array_agg(organization_id)) as featured_org_ids
+      from programs
+     where show_publicly = true
+       and locality != -1
+  ) query2 on true
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   --and org_ids && featured_org_ids
+;

# 2022-06-24 12:45:25.653324
+\e

# 2022-06-24 12:45:34.855243
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+  join
+  (
+    select array_agg(organization_id)::text[] as featured_org_ids
+      from programs
+     where show_publicly = true
+       and locality != -1
+  ) query2 on true
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   --and org_ids && featured_org_ids
+;

# 2022-06-24 12:45:38.079843
+\e

# 2022-06-24 12:45:41.880885
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+  join
+  (
+    select array_agg(organization_id)::text[] as featured_org_ids
+      from programs
+     where show_publicly = true
+       and locality != -1
+  ) query2 on true
+ where org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   and org_ids && featured_org_ids
+;

# 2022-06-24 12:45:44.700386
+\e

# 2022-06-24 12:46:32.311203
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+  join
+  (
+    select array_agg(organization_id)::text[] as featured_org_ids
+      from programs
+     where show_publicly = true
+       and locality != -1
+  ) query2 on true
+ where org_ids[1] not = ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   and org_ids && featured_org_ids
+;

# 2022-06-24 12:46:34.030910
+\e

# 2022-06-24 12:46:39.778177
+select * from
+  (
+    select string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') as org_ids,
+           user_id
+      from users u
+      join user_roles ur on u.rand_id = ur.user_id
+     where meta_info is not null
+       and meta_info != '{}'::jsonb
+       and jsonb_array_length(meta_info->'portal_org_ids') > 1
+       and email not ilike '%@freewill.com%'
+  ) query
+  join
+  (
+    select array_agg(organization_id)::text[] as featured_org_ids
+      from programs
+     where show_publicly = true
+       and locality != -1
+  ) query2 on true
+ where org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   and org_ids && featured_org_ids
+;

# 2022-06-24 12:46:43.216482
+\e

# 2022-06-24 12:47:58.962144
+SELECT org_ids[1],
+       featured_org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ WHERE org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   AND org_ids && featured_org_ids
+;

# 2022-06-24 12:48:05.219577
+\e

# 2022-06-24 12:48:16.619768
+SELECT org_ids[1] != ANY(featured_org_ids)
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ WHERE org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   AND org_ids && featured_org_ids
+;

# 2022-06-24 12:48:19.031897
+\e

# 2022-06-24 12:48:33.109746
+SELECT org_ids[1] != ANY(featured_org_ids)
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ WHERE org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+;

# 2022-06-24 12:48:35.831531
+\e

# 2022-06-24 12:48:44.965626
+SELECT org_ids[1] != ANY(featured_org_ids)
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ --WHERE org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+;

# 2022-06-24 12:48:46.772616
+\e

# 2022-06-24 12:49:45.942150
+SELECT user_id,
+       org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ WHERE org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   AND org_ids && featured_org_ids
+;

# 2022-06-24 12:49:51.913833
+\e

# 2022-06-24 12:51:33.324465
+SELECT user_id,
+       org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ WHERE --org_ids[1] != ANY(featured_org_ids)
+       org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   AND org_ids && featured_org_ids
+;

# 2022-06-24 12:52:16.614351
+select count(*) > 0 from programs where show_publicly = true and locality != -1 and organization_id = 'L9npuAJk';

# 2022-06-24 12:52:27.915988
+select count(*) > 0 from programs where show_publicly = true and locality != -1 and organization_id = 'ksqUKemV';

# 2022-06-24 12:52:40.584401
+select count(*) > 0 as is_featured from programs where show_publicly = true and locality != -1 and organization_id = 'ksqUKemV';

# 2022-06-24 12:52:50.123652
+select count(*) > 0 as is_featured from programs where show_publicly = true and locality != -1 and organization_id = 'qzFlHb8E';

# 2022-06-24 12:53:09.846452
+select count(*) > 0 as is_featured from programs where show_publicly = true and locality != -1 and organization_id = 'ZGGFoWVi';

# 2022-06-24 12:53:15.660054
+select count(*) > 0 as is_featured from programs where show_publicly = true and locality != -1 and organization_id = 'aEmvmDAo';

# 2022-06-24 12:53:36.168532
+SELECT user_id,
+       org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ WHERE org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   AND org_ids && featured_org_ids
+;

# 2022-06-24 12:53:57.212652
+select count(*) > 0 as is_featured from programs where show_publicly = true and locality != -1 and organization_id = 'aEmvmDAo';

# 2022-06-24 12:54:21.968204
+SELECT user_id,
+       org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ WHERE org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   AND org_ids && featured_org_ids
+;

# 2022-06-24 12:54:23.167767
+\e

# 2022-06-24 12:55:03.111730
+SELECT count(featured_org_ids)
+       --user_id,
+       --org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ WHERE -- org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   AND org_ids && featured_org_ids
+ group by user_id, org_ids
+;

# 2022-06-24 12:55:04.576334
+\e

# 2022-06-24 12:55:10.597188
+SELECT count(featured_org_ids)
+       --user_id,
+       --org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ WHERE -- org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+ group by user_id, org_ids
+;

# 2022-06-24 12:55:11.985824
+\e

# 2022-06-24 12:55:15.499740
+SELECT count(featured_org_ids)
+       --user_id,
+       --org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ --WHERE -- org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+ group by user_id, org_ids
+;

# 2022-06-24 12:55:17.466755
+\e

# 2022-06-24 12:55:31.343592
+SELECT array_length(featured_org_ids)
+       --user_id,
+       --org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ --WHERE -- org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+;

# 2022-06-24 12:55:42.818713
+\e

# 2022-06-24 12:55:47.421140
+SELECT array_length(featured_org_ids, 1)
+       --user_id,
+       --org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ --WHERE -- org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+;

# 2022-06-24 12:55:48.801222
+\e

# 2022-06-24 12:55:52.247605
+SELECT array_length(featured_org_ids, 0)
+       --user_id,
+       --org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ --WHERE -- org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+;

# 2022-06-24 12:55:53.333218
+\e

# 2022-06-24 12:55:56.417690
+SELECT array_length(featured_org_ids, 2)
+       --user_id,
+       --org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ --WHERE -- org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+;

# 2022-06-24 12:55:57.270099
+\e

# 2022-06-24 12:56:26.894492
+SELECT cardinality(featured_org_ids)
+       --user_id,
+       --org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ --WHERE -- org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+;

# 2022-06-24 12:56:33.054731
+\e

# 2022-06-24 12:56:36.301547
+SELECT featured_org_ids
+       --user_id,
+       --org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ --WHERE -- org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+;

# 2022-06-24 12:56:38.818291
+\e

# 2022-06-24 12:56:55.142291
+SELECT cardinality(featured_org_ids)
+       --user_id,
+       --org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ --WHERE -- org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+;

# 2022-06-24 12:57:09.788131
+select counT(*) from programs where show_publicly = true and locality != -1;

# 2022-06-24 12:58:28.550834
+select 'aEmvmDAo' not in (select organization_id from programs where show_publicly = true and locality != -1);

# 2022-06-24 12:58:43.661032
+SELECT cardinality(featured_org_ids)
+       --user_id,
+       --org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ --WHERE -- org_ids[1] != ANY(featured_org_ids)
+       --in
+       --(
+       --  select organization_id
+       --    from programs
+       --   where show_publicly = true
+       --     and locality != -1
+       --)
+   --AND org_ids && featured_org_ids
+;

# 2022-06-24 12:58:44.308709
+\e

# 2022-06-24 12:58:57.917764
+SELECT user_id,
+       org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ WHERE  org_ids[1] != ANY(featured_org_ids)
+       in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   AND org_ids && featured_org_ids
+;

# 2022-06-24 12:58:59.434173
+\e

# 2022-06-24 12:59:12.539163
+SELECT user_id,
+       org_ids
+  FROM
+  (
+    SELECT string_to_array(
+             regexp_replace(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                   , '\[', '', 'g')
+                 , '\]', '', 'g')
+               , '"', '', 'g')
+             , ' ', '', 'g')
+           , ',') AS org_ids,
+           user_id
+      FROM users u
+      JOIN user_roles ur ON u.rand_id = ur.user_id
+     WHERE meta_info IS NOT NULL
+       AND meta_info != '{}'::jsonb
+       AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+       AND email NOT ilike '%@freewill.com%'
+  ) query
+  JOIN
+  (
+    SELECT array_agg(organization_id)::text[] as featured_org_ids
+      FROM programs
+     WHERE show_publicly = true
+       AND locality != -1
+  ) query2 ON TRUE
+ WHERE  --org_ids[1] != ANY(featured_org_ids)
+       org_ids[1] not in
+       (
+         select organization_id
+           from programs
+          where show_publicly = true
+            and locality != -1
+       )
+   AND org_ids && featured_org_ids
+;

# 2022-06-24 13:01:06.369197
+\e

# 2022-06-24 13:02:28.645716
+SELECT *
+  FROM users
+ WHERE rand_in in
+  (
+  SELECT user_id
+    FROM
+    (
+      SELECT string_to_array(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     regexp_replace(
+                       jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                     , '\[', '', 'g')
+                   , '\]', '', 'g')
+                 , '"', '', 'g')
+               , ' ', '', 'g')
+             , ',') AS org_ids,
+             user_id
+        FROM users u
+        JOIN user_roles ur ON u.rand_id = ur.user_id
+       WHERE meta_info IS NOT NULL
+         AND meta_info != '{}'::jsonb
+         AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+         AND email NOT ilike '%@freewill.com%'
+    ) query
+    JOIN
+    (
+      SELECT array_agg(organization_id)::text[] as featured_org_ids
+        FROM programs
+       WHERE show_publicly = true
+         AND locality != -1
+    ) query2 ON TRUE
+   WHERE  --org_ids[1] != ANY(featured_org_ids)
+         org_ids[1] not in
+         (
+           select organization_id
+             from programs
+            where show_publicly = true
+              and locality != -1
+         )
+     AND org_ids && featured_org_ids
+  )
+;

# 2022-06-24 13:02:30.209453
+\e

# 2022-06-24 13:02:34.417487
+SELECT *
+  FROM users
+ WHERE rand_id in
+  (
+  SELECT user_id
+    FROM
+    (
+      SELECT string_to_array(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     regexp_replace(
+                       jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                     , '\[', '', 'g')
+                   , '\]', '', 'g')
+                 , '"', '', 'g')
+               , ' ', '', 'g')
+             , ',') AS org_ids,
+             user_id
+        FROM users u
+        JOIN user_roles ur ON u.rand_id = ur.user_id
+       WHERE meta_info IS NOT NULL
+         AND meta_info != '{}'::jsonb
+         AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+         AND email NOT ilike '%@freewill.com%'
+    ) query
+    JOIN
+    (
+      SELECT array_agg(organization_id)::text[] as featured_org_ids
+        FROM programs
+       WHERE show_publicly = true
+         AND locality != -1
+    ) query2 ON TRUE
+   WHERE  --org_ids[1] != ANY(featured_org_ids)
+         org_ids[1] not in
+         (
+           select organization_id
+             from programs
+            where show_publicly = true
+              and locality != -1
+         )
+     AND org_ids && featured_org_ids
+  )
+;

# 2022-06-24 13:02:50.401272
+\e

# 2022-06-24 13:02:58.075605
+SELECT rand_id,
+       email
+  FROM users
+ WHERE rand_id in
+  (
+  SELECT user_id
+    FROM
+    (
+      SELECT string_to_array(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     regexp_replace(
+                       jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                     , '\[', '', 'g')
+                   , '\]', '', 'g')
+                 , '"', '', 'g')
+               , ' ', '', 'g')
+             , ',') AS org_ids,
+             user_id
+        FROM users u
+        JOIN user_roles ur ON u.rand_id = ur.user_id
+       WHERE meta_info IS NOT NULL
+         AND meta_info != '{}'::jsonb
+         AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+         AND email NOT ilike '%@freewill.com%'
+    ) query
+    JOIN
+    (
+      SELECT array_agg(organization_id)::text[] as featured_org_ids
+        FROM programs
+       WHERE show_publicly = true
+         AND locality != -1
+    ) query2 ON TRUE
+   WHERE  --org_ids[1] != ANY(featured_org_ids)
+         org_ids[1] not in
+         (
+           select organization_id
+             from programs
+            where show_publicly = true
+              and locality != -1
+         )
+     AND org_ids && featured_org_ids
+  )
+;

# 2022-06-24 13:03:09.714010
+\e

# 2022-06-24 13:04:03.384452
+SELECT users.rand_id,
+       users.email,
+       count(profiles.rand_id)
+  FROM users
+  JOIN profiles
+    ON users.rand_id = profiles.user_id
+ WHERE rand_id in
+  (
+  SELECT user_id
+    FROM
+    (
+      SELECT string_to_array(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     regexp_replace(
+                       jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                     , '\[', '', 'g')
+                   , '\]', '', 'g')
+                 , '"', '', 'g')
+               , ' ', '', 'g')
+             , ',') AS org_ids,
+             user_id
+        FROM users u
+        JOIN user_roles ur ON u.rand_id = ur.user_id
+       WHERE meta_info IS NOT NULL
+         AND meta_info != '{}'::jsonb
+         AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+         AND email NOT ilike '%@freewill.com%'
+    ) query
+    JOIN
+    (
+      SELECT array_agg(organization_id)::text[] as featured_org_ids
+        FROM programs
+       WHERE show_publicly = true
+         AND locality != -1
+    ) query2 ON TRUE
+   WHERE  --org_ids[1] != ANY(featured_org_ids)
+         org_ids[1] not in
+         (
+           select organization_id
+             from programs
+            where show_publicly = true
+              and locality != -1
+         )
+     AND org_ids && featured_org_ids
+  )
+  GROUP BY users.rand_id, users.email
+;

# 2022-06-24 13:04:06.183705
+\e

# 2022-06-24 13:04:13.847523
+SELECT users.rand_id,
+       users.email,
+       count(profiles.rand_id)
+  FROM users
+  JOIN profiles
+    ON users.rand_id = profiles.user_id
+ WHERE rand_id in
+  (
+  SELECT user_id
+    FROM
+    (
+      SELECT string_to_array(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     regexp_replace(
+                       jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                     , '\[', '', 'g')
+                   , '\]', '', 'g')
+                 , '"', '', 'g')
+               , ' ', '', 'g')
+             , ',') AS org_ids,
+             user_id
+        FROM users u
+        JOIN user_roles ur ON u.rand_id = ur.user_id
+       WHERE meta_info IS NOT NULL
+         AND meta_info != '{}'::jsonb
+         AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+         AND email NOT ilike '%@freewill.com%'
+    ) query
+    JOIN
+    (
+      SELECT array_agg(organization_id)::text[] as featured_org_ids
+        FROM programs
+       WHERE show_publicly = true
+         AND locality != -1
+    ) query2 ON TRUE
+   WHERE  --org_ids[1] != ANY(featured_org_ids)
+         org_ids[1] not in
+         (
+           select organization_id
+             from programs
+            where show_publicly = true
+              and locality != -1
+         )
+     AND org_ids && featured_org_ids
+  )
+  GROUP BY users.rand_id, users.email
+;

# 2022-06-24 13:04:17.693768
+select * from profiles limit 1;

# 2022-06-24 13:04:30.413155
+SELECT users.rand_id,
+       users.email,
+       count(profiles.rand_id)
+  FROM users
+  JOIN profiles
+    ON users.rand_id = profiles.user_id
+ WHERE rand_id in
+  (
+  SELECT user_id
+    FROM
+    (
+      SELECT string_to_array(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     regexp_replace(
+                       jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                     , '\[', '', 'g')
+                   , '\]', '', 'g')
+                 , '"', '', 'g')
+               , ' ', '', 'g')
+             , ',') AS org_ids,
+             user_id
+        FROM users u
+        JOIN user_roles ur ON u.rand_id = ur.user_id
+       WHERE meta_info IS NOT NULL
+         AND meta_info != '{}'::jsonb
+         AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+         AND email NOT ilike '%@freewill.com%'
+    ) query
+    JOIN
+    (
+      SELECT array_agg(organization_id)::text[] as featured_org_ids
+        FROM programs
+       WHERE show_publicly = true
+         AND locality != -1
+    ) query2 ON TRUE
+   WHERE  --org_ids[1] != ANY(featured_org_ids)
+         org_ids[1] not in
+         (
+           select organization_id
+             from programs
+            where show_publicly = true
+              and locality != -1
+         )
+     AND org_ids && featured_org_ids
+  )
+  GROUP BY users.rand_id, users.email
+;

# 2022-06-24 13:04:38.551777
+SELECT rand_id,
+       email
+  FROM users
+ WHERE rand_id in
+  (
+  SELECT user_id
+    FROM
+    (
+      SELECT string_to_array(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     regexp_replace(
+                       jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                     , '\[', '', 'g')
+                   , '\]', '', 'g')
+                 , '"', '', 'g')
+               , ' ', '', 'g')
+             , ',') AS org_ids,
+             user_id
+        FROM users u
+        JOIN user_roles ur ON u.rand_id = ur.user_id
+       WHERE meta_info IS NOT NULL
+         AND meta_info != '{}'::jsonb
+         AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+         AND email NOT ilike '%@freewill.com%'
+    ) query
+    JOIN
+    (
+      SELECT array_agg(organization_id)::text[] as featured_org_ids
+        FROM programs
+       WHERE show_publicly = true
+         AND locality != -1
+    ) query2 ON TRUE
+   WHERE  --org_ids[1] != ANY(featured_org_ids)
+         org_ids[1] not in
+         (
+           select organization_id
+             from programs
+            where show_publicly = true
+              and locality != -1
+         )
+     AND org_ids && featured_org_ids
+  )
+;

# 2022-06-24 13:10:45.508020
+\q

# 2022-06-24 13:32:02.231035
+select rand_id, legal_name from organizations where legal_name ilike '%lutheran world relief%' or legal_name ilike '%acme%' or legal_name ilike '%wyoming outdoor council%';

# 2022-06-24 13:48:56.866101
+SELECT rand_id,
+       email
+  FROM users
+ WHERE rand_id in
+  (
+  SELECT user_id
+    FROM
+    (
+      SELECT string_to_array(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     regexp_replace(
+                       jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                     , '\[', '', 'g')
+                   , '\]', '', 'g')
+                 , '"', '', 'g')
+               , ' ', '', 'g')
+             , ',') AS org_ids,
+             user_id
+        FROM users u
+        JOIN user_roles ur ON u.rand_id = ur.user_id
+       WHERE meta_info IS NOT NULL
+         AND meta_info != '{}'::jsonb
+         AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+         AND email NOT ilike '%@freewill.com%'
+    ) query
+    JOIN
+    (
+      SELECT array_agg(organization_id)::text[] as featured_org_ids
+        FROM programs
+       WHERE show_publicly = true
+         AND locality != -1
+    ) query2 ON TRUE
+   WHERE  --org_ids[1] != ANY(featured_org_ids)
+         org_ids[1] not in
+         (
+           select organization_id
+             from programs
+            where show_publicly = true
+              and locality != -1
+         )
+     AND org_ids && featured_org_ids
+  )
+;

# 2022-06-24 13:49:01.160513
+\q

# 2022-06-24 13:49:10.135825
+SELECT rand_id,
+       email
+  FROM users
+ WHERE rand_id in
+  (
+  SELECT user_id
+    FROM
+    (
+      SELECT string_to_array(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     regexp_replace(
+                       jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                     , '\[', '', 'g')
+                   , '\]', '', 'g')
+                 , '"', '', 'g')
+               , ' ', '', 'g')
+             , ',') AS org_ids,
+             user_id
+        FROM users u
+        JOIN user_roles ur ON u.rand_id = ur.user_id
+       WHERE meta_info IS NOT NULL
+         AND meta_info != '{}'::jsonb
+         AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+         AND email NOT ilike '%@freewill.com%'
+    ) query
+    JOIN
+    (
+      SELECT array_agg(organization_id)::text[] as featured_org_ids
+        FROM programs
+       WHERE show_publicly = true
+         AND locality != -1
+    ) query2 ON TRUE
+   WHERE  --org_ids[1] != ANY(featured_org_ids)
+         org_ids[1] not in
+         (
+           select organization_id
+             from programs
+            where show_publicly = true
+              and locality != -1
+         )
+     AND org_ids && featured_org_ids
+  )
+;

# 2022-06-24 13:49:13.915195
+\e

# 2022-06-24 13:49:49.633209
+SELECT rand_id,
+       email
+  FROM users
+ WHERE rand_id in
+  (
+  SELECT user_id
+    FROM
+    (
+      SELECT string_to_array(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     regexp_replace(
+                       jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                     , '\[', '', 'g')
+                   , '\]', '', 'g')
+                 , '"', '', 'g')
+               , ' ', '', 'g')
+             , ',') AS org_ids,
+             user_id
+        FROM users u
+        JOIN user_roles ur ON u.rand_id = ur.user_id
+       WHERE meta_info IS NOT NULL
+         AND meta_info != '{}'::jsonb
+         AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+         AND email NOT ilike '%@freewill.com%'
+    ) query
+    JOIN
+    (
+      SELECT array_agg(organization_id)::text[] as featured_org_ids
+        FROM programs
+       WHERE show_publicly = true
+         AND locality != -1
+    ) query2 ON TRUE
+   WHERE org_ids && featured_org_ids
+  )
+;

# 2022-06-24 13:50:06.336632
+\e

# 2022-06-24 13:50:12.377346
+SELECT rand_id,
+       email
+  FROM users
+ WHERE rand_id in
+  (
+  SELECT user_id
+    FROM
+    (
+      SELECT string_to_array(
+               regexp_replace(
+                 regexp_replace(
+                   regexp_replace(
+                     regexp_replace(
+                       jsonb_array_elements_text(('[' || (meta_info->'portal_org_ids')::text || ']')::jsonb)
+                     , '\[', '', 'g')
+                   , '\]', '', 'g')
+                 , '"', '', 'g')
+               , ' ', '', 'g')
+             , ',') AS org_ids,
+             user_id
+        FROM users u
+        JOIN user_roles ur ON u.rand_id = ur.user_id
+       WHERE meta_info IS NOT NULL
+         AND meta_info != '{}'::jsonb
+         AND jsonb_array_length(meta_info->'portal_org_ids') > 1
+         AND email NOT ilike '%@freewill.com%'
+    ) query
+    JOIN
+    (
+      SELECT array_agg(organization_id)::text[] as featured_org_ids
+        FROM programs
+       WHERE show_publicly = true
+         AND locality != -1
+    ) query2 ON TRUE
+   WHERE org_ids && featured_org_ids
+  )
+;

# 2022-06-24 13:54:09.118064
+\q

# 2022-06-30 13:02:51.853131
+select * from estate_plans limit 1;

# 2022-07-05 12:40:25.818239
+select * from organizations limit 1;

# 2022-07-05 12:41:07.366445
+select * from organizations where legal_name = 'ACME';

# 2022-07-05 12:41:11.397894
+select * from organizations where legal_name ilike 'ACME';

# 2022-07-05 12:41:33.252967
+select * from organizations where display_name ilike 'ACME';

# 2022-07-05 12:41:48.765310
+select * from organizations where display_name ilike '%ACME%';

# 2022-07-05 13:08:01.170330
+\d organizations

# 2022-07-05 15:11:26.821062
+select count(*) from (select 'august 1st'::timestamp union select 'august 2nd'::timestamp) query;

# 2022-07-05 15:11:53.740686
+select count(*) from (select 'august 1st 2022'::timestamp union select 'august 2nd'::timestamp) query;

# 2022-07-05 15:11:56.429000
+select count(*) from (select 'august 1st, 2022'::timestamp union select 'august 2nd'::timestamp) query;

# 2022-07-05 15:12:04.517223
+select count(*) from (select '08-01-2022'::timestamp union select 'august 2nd'::timestamp) query;

# 2022-07-05 15:12:10.973000
+select count(*) from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp) query;

# 2022-07-05 15:12:16.514453
+select * from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp) query;

# 2022-07-05 15:13:01.220163
+select * from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp union select '08-03-2022'::timestamp) query;

# 2022-07-05 15:13:21.508442
+select * from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp union select '08-03-2022'::timestamp union select '09-01-2022'::timestamp) query;

# 2022-07-05 15:17:06.601150
+select * from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp union select '08-03-2022'::timestamp union select '09-01-2022'::timestamp) query where timestamp < '08-35-2022'::timestamp;

# 2022-07-05 15:24:34.982556
+select * from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp union select '08-03-2022'::timestamp union select '09-01-2022'::timestamp) query where timestamp < '08-35-2022';

# 2022-07-05 15:24:41.223978
+select * from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp union select '08-03-2022'::timestamp union select '09-01-2022'::timestamp) query where timestamp < '08-30-2022';

# 2022-07-05 15:32:25.433436
+\q

# 2022-07-05 15:32:28.954347
+select * from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp union select '08-03-2022'::timestamp union select '09-01-2022'::timestamp) query where timestamp < '08-30-2022';

# 2022-07-05 15:32:35.232793
+select * from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp union select '08-03-2022'::timestamp union select '09-01-2022'::timestamp) query where timestamp < '08-35-2022';

# 2022-07-05 15:33:17.736790
+\q

# 2022-07-05 15:33:19.794474
+select * from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp union select '08-03-2022'::timestamp union select '09-01-2022'::timestamp) query where timestamp < '08-35-2022';

# 2022-07-05 15:33:35.679642
+\q

# 2022-07-05 15:33:37.817794
+select * from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp union select '08-03-2022'::timestamp union select '09-01-2022'::timestamp) query where timestamp < '08-35-2022';

# 2022-07-05 15:33:54.127695
+\q

# 2022-07-05 15:33:56.002238
+select * from (select '08-01-2022'::timestamp union select '08-02-2022'::timestamp union select '08-03-2022'::timestamp union select '09-01-2022'::timestamp) query where timestamp < '08-35-2022';

# 2022-07-07 13:46:30.566922
+\q

# 2022-07-07 13:54:34.888087
+select * from organizations limit 1;

# 2022-07-07 13:54:46.026688
+\q

# 2022-07-07 13:56:30.520942
+\d organizations

# 2022-07-07 13:56:53.191379
+\q

# 2022-07-07 14:01:05.361615
+select * from organizations limti 1;

# 2022-07-07 14:01:07.091595
+select * from organizations limit 1;

# 2022-07-07 14:01:11.958571
+\q

# 2022-07-07 14:02:24.421067
+select * from organizations limit 1;

# 2022-07-07 14:02:42.447836
+\q

# 2022-07-07 14:03:48.955536
+select * from organizations limit 1;

# 2022-07-07 14:03:55.319208
+select rand_id from organizations limit 1;

# 2022-07-07 14:04:54.826508
+\q

# 2022-07-07 14:14:00.960918
+'1ajkflda'

# 2022-07-07 14:14:05.996920
+\q

# 2022-07-07 14:15:07.303672
+'abcdef';

# 2022-07-07 14:15:10.137636
+select 'abcdef';

# 2022-07-07 14:15:26.256446
+\q

# 2022-07-07 14:15:29.746605
+select 'abcdef';

# 2022-07-07 14:15:36.079522
+'abcdef';

# 2022-07-07 14:15:56.927470
+\q

# 2022-07-07 14:16:07.948028
+'abcdef';

# 2022-07-07 14:16:13.207209
+\q

# 2022-07-07 14:16:36.760688
+'abdef';

# 2022-07-07 14:16:53.366621
+select * from organizations where display_name ilike '%ACME%';

# 2022-07-07 14:17:07.080106
+select * from organizations where display_name ilike '%ACME%' and postal = 10001;

# 2022-07-07 14:17:25.798435
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 14:18:28.123955
+\q

# 2022-07-07 14:19:04.639650
+select * from organizations where display_name ilike '%ACME%' and id = 247 afjdkl;

# 2022-07-07 14:19:27.584700
+\q

# 2022-07-07 14:19:32.538249
+select * from organizations where display_name ilike '%ACME%' and id = 247 afjdkl;

# 2022-07-07 14:19:49.816827
+\q

# 2022-07-07 14:20:52.729120
+select * from organizations where display_name ilike '%ACME%' and id = 247 afjdkl;

# 2022-07-07 14:21:14.471174
+\q

# 2022-07-07 14:21:15.402851
+select * from organizations where display_name ilike '%ACME%' and id = 247 afjdkl;

# 2022-07-07 14:21:30.090540
+\q

# 2022-07-07 14:21:36.345682
+select * from organizations where display_name ilike '%ACME%' and id = 247 afjdkl;

# 2022-07-07 14:22:09.098280
+\q

# 2022-07-07 14:22:19.032783
+select * from organizations where display_name ilike '%ACME%' and id = 247 afjdkl;

# 2022-07-07 14:22:21.565201
+select * from organizations where display_name ilike '%ACME%' and id = 247 ;

# 2022-07-07 14:22:55.435515
+\q

# 2022-07-07 14:22:58.822631
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 14:23:11.333046
+\q

# 2022-07-07 14:23:12.543532
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 14:23:46.133128
+\q

# 2022-07-07 14:23:48.973881
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 14:24:06.084509
+\q

# 2022-07-07 14:24:07.514340
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 14:24:24.879927
+select * from organizations limit 2;

# 2022-07-07 14:24:34.835837
+\q

# 2022-07-07 14:24:37.189764
+select * from organizations limit 2;

# 2022-07-07 14:24:46.644183
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 14:27:16.329042
+\q

# 2022-07-07 14:31:31.896975
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 14:31:41.443784
+select * from organizations where display_name ilike '%ACME%' and id = 247 jkalfd;

# 2022-07-07 14:37:05.630034
+\q

# 2022-07-07 14:38:59.595476
+select rand_id, city from organizations;

# 2022-07-07 14:39:47.453320
+\q

# 2022-07-07 14:40:16.037312
+select
+rand_id,
+city
+from organizations
+where display_name ilike '%ACME';

# 2022-07-07 14:40:17.813789
+select
+rand_id,
+city
+from organizations
+where display_name ilike '%ACME%';

# 2022-07-07 14:40:37.837293
+\q

# 2022-07-07 14:43:14.539592
+\q 

# 2022-07-07 14:43:33.493469
+\q

# 2022-07-07 14:49:43.979114
+select * from organizations where display_name ilike '%ACME%' and id = 247 jkalfd;

# 2022-07-07 14:50:53.725777
+\q

# 2022-07-07 14:51:23.472868
+select * from organizations where display_name ilike '%ACME%' and id = 247 jkalfd;

# 2022-07-07 14:51:57.220177
+\q

# 2022-07-07 14:52:02.528468
+select * from organizations where display_name ilike '%ACME%' and id = 247 jkalfd;

# 2022-07-07 14:52:08.555640
+\q

# 2022-07-07 14:55:47.664449
+select * from organizations where display_name ilike '%ACME%' and id = 247 jkalfd fdjaklfda jfklda fjdasklf djasklf djaskfld asjfkldas jfdklasfdas;

# 2022-07-07 14:55:49.937079
+\q

# 2022-07-07 14:56:01.823828
+select * from organizations where display_name ilike '%ACME%' and id = 247 jkalfd fdjaklfda jfklda fjdasklf djasklf djaskfld asjfkldas jfdklasfdas;

# 2022-07-07 14:56:02.657540
+\q

# 2022-07-07 14:56:28.069081
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 14:56:35.334976
+select * from organizations limit 20;

# 2022-07-07 14:56:53.746182
+\q

# 2022-07-07 14:56:56.596331
+select * from organizations limit 20;

# 2022-07-07 14:57:25.137251
+\q

# 2022-07-07 14:57:26.828763
+select * from organizations limit 20;

# 2022-07-07 14:58:00.224339
+\pager

# 2022-07-07 14:59:02.728152
+\q

# 2022-07-07 14:59:06.296907
+select * from organizations limit 20;

# 2022-07-07 14:59:08.572972
+select * from organizations limit 1;

# 2022-07-07 14:59:16.791630
+select rand_id from organizations limit 1;

# 2022-07-07 14:59:25.359616
+\pgaer

# 2022-07-07 14:59:27.289734
+\pager

# 2022-07-07 15:00:31.959287
+\q

# 2022-07-07 15:00:38.380920
+select * from organizations limit 20;

# 2022-07-07 15:00:50.317108
+\q

# 2022-07-07 15:00:52.812042
+select * from organizations limit 20;

# 2022-07-07 15:00:58.032373
+\q

# 2022-07-07 15:00:59.500850
+select * from organizations limit 20;

# 2022-07-07 15:02:17.438956
+\q

# 2022-07-07 15:02:19.787693
+select * from organizations limit 20;

# 2022-07-07 15:43:52.950543
+\q

# 2022-07-07 15:51:13.928721
+select * from organizations limit 20;

# 2022-07-07 15:51:33.827840
+\q

# 2022-07-07 15:52:16.055718
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 15:52:47.563101
+\q

# 2022-07-07 15:53:37.232759
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 15:54:17.934465
+
+select * 
+  from organizations 
+ where display_name ilike '%ACME%' 
+   and id = 247;

# 2022-07-07 15:54:24.208245
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 15:58:37.912586
+\q

# 2022-07-07 15:58:42.019444
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 15:59:41.321145
+\q

# 2022-07-07 15:59:46.308502
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 16:00:25.274162
+\q

# 2022-07-07 16:00:27.524954
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 16:01:13.760700
+\q

# 2022-07-07 16:01:23.668488
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 16:02:01.907626
+\q

# 2022-07-07 16:02:05.741092
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 16:02:15.113755
+\q

# 2022-07-07 16:02:17.020816
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 16:02:40.066860
+\q

# 2022-07-07 16:02:44.317988
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 16:02:53.673187
+\q

# 2022-07-07 16:02:57.070125
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 16:03:01.683156
+\q

# 2022-07-07 16:04:03.382275
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 16:04:08.027831
+\q

# 2022-07-07 16:05:04.340796
+\h

# 2022-07-07 16:05:13.046207
+select * from organizations where display_name ilike '%ACME%' and id = 247;

# 2022-07-07 16:05:22.293531
+\q

# 2022-07-08 12:14:21.896546
+\d rand_ids_in_use

# 2022-07-08 12:28:05.593676
+\q

# 2022-07-11 13:43:39.463847
+select * from profiles limit 1;

# 2022-07-11 13:43:54.932858
+select * from profiles where f_name->'first' = 'Riley61';

# 2022-07-11 13:44:02.834682
+select * from profiles where f_name->'first'::text = 'Riley61';

# 2022-07-11 13:44:07.801575
+select * from profiles where (f_name->'first')::text = 'Riley61';

# 2022-07-11 13:44:19.215114
+select f_name->'first' from profiles limit 10;

# 2022-07-11 13:44:30.961199
+select (f_name->'first')::text from profiles limit 10;

# 2022-07-11 13:44:50.646218
+select (f_name->'first')::text from profiles where (f_name->'first')::text = 'Trever';;

# 2022-07-11 13:44:52.765189
+select (f_name->'first')::text from profiles where (f_name->'first')::text = 'Trever';

# 2022-07-11 13:44:55.262085
+select (f_name->'first')::text from profiles where (f_name->'first')::text = '"Trever"';

# 2022-07-11 13:45:42.151368
+select (f_name->>'first')::text from profiles where (f_name->'first')::text = '"Trever"';

# 2022-07-11 13:45:48.477789
+select f_name->>'first' from profiles where (f_name->'first')::text = '"Trever"';

# 2022-07-11 13:45:55.094980
+select f_name->>'first' from profiles where f_name->>'first' = '"Trever"';

# 2022-07-11 13:46:00.308501
+select f_name->>'first' from profiles where f_name->>'first' = 'Trever';

# 2022-07-11 13:46:04.326763
+select f_name->>'first' from profiles where f_name->>'first' = 'Riley61';

# 2022-07-11 13:46:08.626255
+select * from profiles where f_name->>'first' = 'Riley61';

# 2022-07-11 13:46:28.476254
+select * from estate_plans where profile_id in (select rand_id from profiles where f_name->>'first' = 'Riley61');

# 2022-07-18 14:18:52.420732
+select * from programs limit 1;

# 2022-07-18 14:19:18.656058
+select count(*), category from programs group by category;

# 2022-07-18 14:19:38.483326
+select locality from programs limit 1;

# 2022-07-18 14:19:45.175116
+select distinct locality from programs;

# 2022-07-18 14:19:48.809123
+select * from locality;

# 2022-07-18 14:20:17.574003
+select count(*) from programs where locality = 0;

# 2022-07-18 14:20:29.030156
+select * from programs limit 1;

# 2022-07-18 14:20:48.768652
+select count(*) from programs where locality = 0 and show_publicly is true;

# 2022-07-18 14:21:06.204020
+select count(*) from programs where locality = 0 and show_publicly is true and products->>'has_will' is true;

# 2022-07-18 14:21:12.934527
+select count(*) from programs where locality = 0 and show_publicly is true and products->>'has_will' = 'true';

# 2022-07-18 15:23:34.956913
+select * from programs where legal_name ilike '%wildcard%';

# 2022-07-18 15:23:42.135420
+select * from organizations where legal_name ilike '%wildcard%';

# 2022-07-18 15:23:54.473055
+select * from organizations where legal_name ilike '%wildcare%';

# 2022-07-18 15:23:59.972791
+select * from programs where legal_name ilike '%wildcare%';

# 2022-07-18 15:24:20.219999
+\q

# 2022-07-18 15:24:27.185701
+select * from programs where legal_name ilike '%wildcare%';

# 2022-07-18 15:24:32.321937
+\q

# 2022-07-19 14:27:25.711816
+select * from organizations limit 10;

# 2022-07-19 15:15:32.891415
+\q

# 2022-07-21 11:45:55.060886
+begin; INSERT INTO crypto_charities (name, ein, id, created_at, updated_at, is_active, display_name, organization_id, subsection, deductibility, classification, eo_status, organization_type_code, secondary_organization_type_code, tertiary_organization_type_code, legal_approved_at, site_customizations, url_slug) VALUES
+('Naral Pro-Choice America Foundation', '521100361', 195905, '2021-12-09 00:08:06.342578', '2021-12-09 00:08:06.342578', true, 'Naral Pro-Choice America Foundation', null, '03', '1', '2800', '01', 'PC', '', '', null, null, null),
+('Planned Parenthood Federation Of America', '131644147', 201579, '2021-12-09 00:08:06.342578', '2021-12-09 00:08:06.342578', true, 'Planned Parenthood Federation Of America', 'PzWxYkZZ', '03', '1', '1000', '01', 'PC', '', '', null, null, null),
+('Memphis Center For Reproductive', '620931089', 193627, '2021-12-09 00:08:06.342578', '2021-12-09 00:08:06.342578', true, 'Memphis Center For Reproductive', null, '03', '1', '1200', '01', 'PC', '', '', null, null, null)
+ON CONFLICT DO NOTHING;

# 2022-07-21 11:45:59.025584
+commit;

# 2022-07-21 11:46:03.136119
+\q

# 2022-07-22 13:07:02.978107
+select * from profiles where preferred_name is not null limit 1;

# 2022-07-22 13:08:45.642835
+select * from profiles where f_name->>'first' = 'Riley6';

# 2022-07-22 13:30:45.847943
+select created_at from profiles where preferred_name is not null;

# 2022-07-22 13:30:54.768599
+select created_at from profiles where preferred_name is not null order by created_at desc limit 1;

# 2022-07-22 13:35:39.911507
+select preferred_name from profiles where f_name->>first = 'Riley74';

# 2022-07-22 13:35:43.525310
+select preferred_name from profiles where f_name->>'first' = 'Riley74';

# 2022-07-22 13:36:31.711415
+select * from profiles
+;

# 2022-07-22 13:36:36.459003
+select * from profiles limit 1;

# 2022-07-22 13:36:45.635331
+select * from users limit 1;

# 2022-07-22 13:36:58.694980
+select * from users where email = 'riley+emailtesing1@freewill.com';

# 2022-07-22 13:40:27.742038
+select * from users limit 1;

# 2022-07-22 13:40:43.672310
+select * from users where email ilike '%emailtesting1%';

# 2022-07-22 13:41:05.108733
+select * from profiles limit 1;

# 2022-07-22 13:41:11.431359
+\d profiles

# 2022-07-22 13:41:36.177281
+select * from profiles where account_id = '';

# 2022-07-22 13:41:39.367120
+select * from profiles where account_id = 'BU1JIHNL';

# 2022-08-01 11:47:38.166128
+select * from programs where rand_id = 'ksqUKemV';

# 2022-08-01 11:47:45.308938
+select * from organizations where rand_id = 'ksqUKemV';

# 2022-08-01 11:47:55.173858
+\d organizations

# 2022-08-01 11:53:06.602482
+select p.rand_id from programs p join organizations o ON o.rand_id = p.organization_id where o.rand_id in ('ksqUKemV', 'bY8ivp4d', 'FnC2UKvB', 'oXQ11LIb', 'atpc6Q6j', 'ePIKKnXT', 'FqmO7jrd', 'AFDpCfgt', '8qN1BCMX');

# 2022-08-01 11:53:17.920692
+select p.rand_id, o.display_name from programs p join organizations o ON o.rand_id = p.organization_id where o.rand_id in ('ksqUKemV', 'bY8ivp4d', 'FnC2UKvB', 'oXQ11LIb', 'atpc6Q6j', 'ePIKKnXT', 'FqmO7jrd', 'AFDpCfgt', '8qN1BCMX');

# 2022-08-01 11:53:30.052307
+select array_agg(p.rand_id), o.display_name from programs p join organizations o ON o.rand_id = p.organization_id where o.rand_id in ('ksqUKemV', 'bY8ivp4d', 'FnC2UKvB', 'oXQ11LIb', 'atpc6Q6j', 'ePIKKnXT', 'FqmO7jrd', 'AFDpCfgt', '8qN1BCMX') group by o.display_name;

# 2022-08-01 11:53:57.026079
+select count(p.rand_id), o.display_name from programs p join organizations o ON o.rand_id = p.organization_id where o.rand_id in ('ksqUKemV', 'bY8ivp4d', 'FnC2UKvB', 'oXQ11LIb', 'atpc6Q6j', 'ePIKKnXT', 'FqmO7jrd', 'AFDpCfgt', '8qN1BCMX') group by o.display_name;

# 2022-08-01 11:54:08.177507
+select count(p.rand_id), o.display_name, o.rand_id from programs p join organizations o ON o.rand_id = p.organization_id where o.rand_id in ('ksqUKemV', 'bY8ivp4d', 'FnC2UKvB', 'oXQ11LIb', 'atpc6Q6j', 'ePIKKnXT', 'FqmO7jrd', 'AFDpCfgt', '8qN1BCMX') group by o.display_name, o.rand_id;

# 2022-08-01 11:54:31.745900
+select count(p.rand_id), o.display_name, o.rand_id from programs p join organizations o ON o.rand_id = p.organization_id where o.rand_id in ('ksqUKemV', 'bY8ivp4d', 'FnC2UKvB', 'oXQ11Llb', 'atpc6Q6j', 'ePIKKnXT', 'FqmO7jrd', 'AFDpCfgt', '8qN1BCMX') group by o.display_name, o.rand_id;

# 2022-08-01 11:55:22.612457
+select * from organizations where rand_id = '8qN1BCMX';

# 2022-08-01 11:55:24.593922
+\q

# 2022-08-01 11:55:30.927983
+select * from organizations where rand_id = '8qN1BCMX';

# 2022-08-01 11:55:42.425436
+\q

# 2022-08-01 11:55:48.890684
+select count(p.rand_id), o.display_name, o.rand_id from programs p join organizations o ON o.rand_id = p.organization_id where o.rand_id in ('ksqUKemV', 'bY8ivp4d', 'FnC2UKvB', 'oXQ11Llb', 'atpc6Q6j', 'ePIKKnXT', 'FqmO7jrd', 'AFDpCfgt', '8qN1BCMX') group by o.display_name, o.rand_id;

# 2022-08-01 11:58:41.214939
+select p.rand_id from programs p join organizations o ON o.rand_id = p.organization_id where o.rand_id in ('ksqUKemV', 'bY8ivp4d', 'FnC2UKvB', 'oXQ11Llb', 'atpc6Q6j', 'ePIKKnXT', 'FqmO7jrd', 'AFDpCfgt', '8qN1BCMX') group by o.display_name, o.rand_id;

# 2022-08-01 11:58:47.103662
+select p.rand_id from programs p join organizations o ON o.rand_id = p.organization_id where o.rand_id in ('ksqUKemV', 'bY8ivp4d', 'FnC2UKvB', 'oXQ11Llb', 'atpc6Q6j', 'ePIKKnXT', 'FqmO7jrd', 'AFDpCfgt', '8qN1BCMX');

# 2022-08-01 11:58:51.956467
+\q

# 2022-08-01 11:58:59.777929
+select p.rand_id from programs p join organizations o ON o.rand_id = p.organization_id where o.rand_id in ('ksqUKemV', 'bY8ivp4d', 'FnC2UKvB', 'oXQ11Llb', 'atpc6Q6j', 'ePIKKnXT', 'FqmO7jrd', 'AFDpCfgt', '8qN1BCMX');

# 2022-08-02 12:41:09.259978
+\l

# 2022-08-02 12:41:12.939173
+\c postgres

# 2022-08-02 12:41:42.961808
+create database freewill_dev_backup_08_02_22 with template freewill_dev;

# 2022-08-02 12:41:52.947294
+\c freewill_dev_backup_08_02_22

# 2022-08-02 12:41:57.707064
+\d organizations

# 2022-08-02 12:42:06.615025
+select * from organizations limit 1;

# 2022-08-02 12:46:12.922749
+\q

# 2022-08-02 12:46:31.318024
+select count(*) from programs where rand_id = 'Q9cKiVdP';

# 2022-08-02 12:46:33.930843
+\q

# 2022-08-02 12:46:37.394816
+select count(*) from programs where rand_id = 'Q9cKiVdP';

# 2022-08-02 12:48:12.768524
+select count(*) from organizations where rand_id = 'e5NTMNZA';

# 2022-08-02 12:54:58.568133
+select * from estate_charitable_gifts where rand_id = 'fo7lnONV';

# 2022-08-02 12:56:04.536520
+delete from estate_charitable_gifts where rand_id = 'fo7lnONV';

# 2022-08-02 12:57:04.592223
+select * from estate_beneficiaries where charitable_gift_id = 'fo7lnONV';

# 2022-08-02 12:57:22.263574
+delete from estate_beneficiaries where rand_id = 'LGaz8Foc';

# 2022-08-02 12:57:26.951120
+delete from estate_charitable_gifts where rand_id = 'fo7lnONV';

# 2022-08-02 12:58:30.491011
+\d organizations

# 2022-08-02 13:04:12.428352
+select count(*), logo_is_hidden_for_featureships from organizations group by logo_is_hidden_for_featureships;

# 2022-08-02 13:05:54.852829
+\c freewill_dev_backup_08_02_22

# 2022-08-02 13:06:37.044918
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_08_02_22;

# 2022-08-02 13:07:36.325669
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_08_02_22; delete from estate_beneficiaries where charitable_gift_id = 'fo7lnONV'; delete from estate_charitable_gifts where rand_id = 'fo7lnONV';

# 2022-08-02 13:07:45.353011
+\c freewill_dev

# 2022-08-02 13:08:13.234597
+delete from estate_beneficiaries where charitable_gift_id = 'f07lnONV'; delete from estate_charitable_gifts where rand_id = 'fo7lnONV';

# 2022-08-02 13:08:46.901760
+delete from estate_beneficiaries where charitable_gift_id = 'fo7lnONV'; delete from estate_charitable_gifts where rand_id = 'fo7lnONV';

# 2022-08-02 13:09:27.768411
+select count(*), logo_is_hidden_for_featureships from organizations group by logo_is_hidden_for_featureships;

# 2022-08-02 13:28:23.027274
+\c freewill_dev_backup_08_02_22

# 2022-08-02 13:28:32.757711
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_08_02_22;

# 2022-08-02 13:29:37.312870
+delete from estate_beneficiaries where charitable_gift_id = 'fo7lnONV'; delete from estate_charitable_gifts where rand_id = 'fo7lnONV';

# 2022-08-02 13:29:45.456123
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_08_02_22;

# 2022-08-02 13:39:14.623238
+\c freewill_dev

# 2022-08-04 13:35:31.583494
+select * from programs limit 1;

# 2022-08-04 13:59:33.294759
+\d programs

# 2022-08-04 14:19:13.351939
+select * from programs where display_name ilike '%ducks unlimited%';

# 2022-08-04 14:19:45.237886
+select * from programs where display_name ilike '%the international african american museum%';

# 2022-08-04 15:05:00.052447
+select * from organizations limit 1;

# 2022-08-04 15:06:32.267363
+select count(*) from organizations where display_name in (
+'University of Wyoming',
+'Happily Ever After Animal Sanctuary',
+'Make-A-Wish Foundation of Wisconsin',
+'Southern Environmental Law Center',
+'Ronald McDonald House Charities of the Intermountain Area',
+'The Loveland Living Planet Aquarium',
+'Commemorative Air Force',
+'Make-A-Wish Foundation of South Carolina',
+'The Medical University of South Carolina Foundation',
+'Mystic Seaport Museum',
+'Alley Cat Advocates',
+'Austin Humane Society',
+'Beacon Health Foundation',
+'Boy Scouts of America - 662 Longhorn Council',
+'Braille Institute of America',
+'Brandywine Valley SPCA',
+'Cabrini University',
+'Care Resource Community Health Centers',
+'Catholic Charities of the Diocese of Santa Rosa',
+'Catholic Community Foundation Archdiocese of New Orleans',
+'Catholic Diocese of Joliet',
+'Charleston Animal Society',
+'Charlottesville-Albemarle SPCA',
+'Children's Health Dallas',
+'Coalition On Temporary Shelter',
+'Conner Prairie',
+'Corporation of the Fine Arts Museums',
+'Cumberland River Compact',
+'Doctors Without Borders',
+'Eastern PA and Delaware Salvation Army',
+'Feeding San Diego',
+'Feeding Tampa Bay',
+'Foundation for the Diocese of El Paso',
+'Girls Incorporated of Santa Fe Inc',
+'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+'Goodwill of Central and Northern Arizona',
+'Greater New York Salvation Army',
+'Greater Pittsburgh Community Food Bank',
+'Greenhill Humane Society',
+'Habitat for Humanity - Greater Greensboro',
+'Habitat for Humanity Greater Indianapolis',
+'Habitat for Humanity of Collier County',
+'Habitat for Humanity of Greater Miami',
+'Habitat for Humanity of the Chesapeake',
+'Habitat for Humanity Portland Region',
+'Humane Society of Central Oregon',
+'Humane Society of North Central Florida',
+'Humane Society of North Texas',
+'Irwin A and Robert D Goodman Community Center',
+'Jewish Big Brothers Big Sisters of Los Angeles',
+'Keystone Community Services',
+'Knox Area Rescue Ministries',
+'Make-A-Wish Alabama',
+'Make-A-Wish Central & South Texas',
+'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+'Make-a-Wish Foundation of Missouri and Kansas',
+'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+'Make-A-Wish Foundation of Orange County And The Inland Empire',
+'Make-A-Wish Foundation of San Diego',
+'Make-A-Wish Hudson Valley',
+'Make-A-Wish North Texas',
+'Make-A-Wish Northeastern & Central California and Northern Nevada',
+'Make-A-Wish of Central and Northern Florida',
+'Make-A-Wish of Middle Tennessee',
+'Make-A-Wish of New Hampshire',
+'Make-A-Wish Southern Nevada',
+'Maranatha Volunteers International',
+'Massachusetts Salvation Army',
+'Monmouth County SPCA',
+'Nashville Rescue Mission',
+'National Council on Aging',
+'New Jersey Salvation Army',
+'Northeast OH Salvation Army',
+'Northern New England Salvation Army',
+'Paws Chicago',
+'Planned Parenthood Mar Monte',
+'Playwrights Horizons',
+'Providence House Inc.',
+'Ronald McDonald House Charities of Greater Chattanooga',
+'Ronald McDonald House Charities of Kentuckiana',
+'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+'Ronald McDonald House Charities of San Antonio',
+'Ronald McDonald House Charities of the Southwest',
+'Ronald McDonald House Fort Worth',
+'SAFE Alliance',
+'Salvation Army Empire State Division',
+'San Diego Humane Society',
+'San Diego Rescue Mission',
+'San Francisco - Marin Food Bank',
+'Second Harvest Food Bank Of Orange County',
+'Second Harvest Food Bank Santa Cruz County',
+'SEVA FOUNDATION',
+'Southern New England Salvation Army',
+'Southwest OH Northeast KY Salvation Army',
+'Susquehanna Health Foundation',
+'The Alameda County Community Food Bank Inc',
+'The Library Foundation for Sarasota County',
+'The Sophia Way',
+'The University of Texas Medical Branch at Galveston',
+'The Valerie Fund',
+'Thousand Currents',
+'United Community Ministries Inc',
+'Upper Valley Haven Inc',
+'Virginia Aquarium & Marine Science Center',
+'Western Kentucky University',
+'Western PA Salvation Army',
+'Yale New Haven Health System',
+'YMCA of Pierce and Kitsap Counties',
+'Animal Rescue League of Berks County',
+'Aslan Housing Foundation',
+'Astronomical Society of the Pacific',
+'Atlanta Habitat for Humanity',
+'Beaches Habitat for Humanity',
+'Bideawee',
+'Boys & Girls Club of Bloomington',
+'Boys & Girls Clubs of the Valley',
+'Boys and Girls Club of Truckee Meadows',
+'Broadway Rose Theatre Co.',
+'Cape Fear Valley Health Foundation',
+'Catholic Charities of Fairfield County',
+'Central Oklahoma Habitat for Humanity',
+'Chronicle Season of Sharing Fund',
+'City College of New York',
+'Colorectal Cancer Alliance',
+'Conservation Society of California',
+'Denver Children's Home',
+'Food Bank For New York City',
+'Friends of Pima Animal Care Center',
+'Goodwill Industries of Southern New Jersey',
+'Habitat for Humanity Jacksonville',
+'Habitat for Humanity of Greater Charlottesville',
+'Habitat for Humanity of Northwest Indiana',
+'Habitat for Humanity of Oakland County',
+'Habitat for Humanity of Palm Beach County',
+'Habitat for Humanity of Wake County',
+'Martha's Kitchen',
+'Medical Center Foundation (Northeast Georgia Health System)',
+'Metropolitan Area Neighborhood Nutrition Alliance',
+'Miriam's Kitchen',
+'NatureBridge',
+'Princeton Healthcare System Foundation',
+'RE Sources',
+'Ronald McDonald House Charities of Idaho',
+'Ronald McDonald House Charities of Southern California',
+'San Diego State University Foundation',
+'San Jose Public Library Foundation',
+'Sanford Burnham Prebys Medical Discovery Institute',
+'Second Harvest Food Bank of East Tennessee',
+'Second Harvest Food Bank of Northwest North Carolina',
+'Second Harvest Foodbank of Southern Wisconsin',
+'Suffolk County Council, Boy Scouts of America',
+'Suncoast Humane Society Inc',
+'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+'Whitman-Walker Health',
+'YMCA of Greater Brandywine',
+'Humane Pennsylvania',
+'Philabundance',
+'Make-A-Wish Foundation of Oregon',
+'Oregon Wild',
+'Feed the Children, Inc.',
+'Regional Food Bank of Oklahoma, Inc.',
+'Greater Cleveland Food Bank',
+'New York Community Trust',
+'City Harvest',
+'Harlem Childrens Zone',
+'Ronald McDonald House Charities of New York',
+'Nathan Adelson Hospice Foundation',
+'Nevada Humane Society',
+'Heaven Can Wait Animal Society',
+'Miracle Flights',
+'Roadrunner Food Bank Inc',
+'Dartmouth Health',
+'Animal Rescue League of New Hampshire',
+'New Hampshire PBS',
+'New Hampshire SPCA',
+'United Way Worldwide',
+'American Cancer Society',
+'American Diabetes Association (ADA)',
+'American Foundation for Suicide Prevention',
+'American Heart Association',
+'American Red Cross',
+'Americans United for Separation of Church and State',
+'Amnesty International',
+'Bob Woodruff Foundation',
+'Breast Cancer Research Foundation',
+'Cancer Research Institute',
+'CDC Foundation',
+'Children's Defense Fund',
+'Covenant House',
+'Cure Alzheimer's Fund',
+'Davis Phinney Foundation',
+'Defenders of Wildlife',
+'Disabled American Veterans (DAV)',
+'Elton John AIDS Foundation',
+'Everytown for Gun Safety Support Fund',
+'FINCA International',
+'Fred Hutchinson Cancer Research Center',
+'Gentle Giants Draft Horse Rescue',
+'Grey2K Worldwide',
+'Helen Keller International',
+'Hope for Paws',
+'Human Rights Watch',
+'International African American Museum',
+'International Fund for Animal Welfare (IFAW)',
+'League of Conservation Voters',
+'Lutheran World Relief',
+'Michael J Fox Foundation',
+'Ms. Foundation for Women',
+'Muscular Dystrophy Association',
+'NAACP Empowerment Programs',
+'North Shore Animal League America',
+'Osteosarcoma Institute',
+'Pancreatic Cancer Action Network',
+'Partnership to End Addiction',
+'PETA',
+'Room To Read',
+'Save the Children',
+'Sigma Xi, The Scientific Research Honor Society',
+'SPLC',
+'Susan G. Komen Breast Cancer Foundation',
+'The Anti-Cruelty Society',
+'The Conservation Fund',
+'The Hunger Project',
+'Trillions Charitable Trust',
+'United Animal Nations',
+'Veterans of Foreign Wars Foundation',
+'World Resources Institute',
+'World Vision',
+'World Wildlife Fund (US)',
+'Leukemia & Lymphoma Society',
+'National Centre for Padre Pio, Inc.',
+'Sankara Eye Foundation USA',
+'SPCA International',
+'The Animal Foundation',
+'Montana Food Bank Network',
+'Stray Rescue of St. Louis',
+'Children's Hospital of Michigan Foundation',
+'Leader Dogs for the Blind',
+'Childrens Hospital Corporation',
+'Animal Refuge League of Greater Portland',
+'Good Shepherd Food Bank',
+'Northern Light Health Foundation',
+'Chesapeake Bay Foundation',
+'Ronald McDonald House Charities Maryland',
+'Make-A-Wish Foundation of Illinois',
+'Idaho Conservation League',
+'Idaho Humane Society',
+'Make-A-Wish Foundation of Georgia',
+'Equality Florida Action',
+'Ronald McDonald House of Delaware',
+'Connecticut Foodshare',
+'Connecticut Humane Society',
+'Make-A-Wish Connecticut',
+'Make-A-Wish Foundation Colorado',
+'United Service Organizations (USO)',
+'Define American',
+'GreenPeace',
+'San Francisco SPCA',
+'Arizona Animal Welfare League',
+'Make-A-Wish Foundation of Arizona',
+'Arkansas Community Foundation',
+'Shepherd University',
+'Multicare Health Foundation',
+'South Carolina Environmental Law Project (SCELP)',
+'University of Alaska Foundation',
+'Boys & Girls Clubs of America - BGCA',
+'CDP Parent Account',
+'Florida Agricultural and Mechanical University',
+'GIRLS INCORPORATED',
+'International Planned Parenthood Federation - Worldwide Inc',
+'National Audubon Society Inc',
+'Ronald McDonald House Charities National',
+'Special Olympics Inc',
+'University of Pittsburgh Medical Center',
+'YMCA of the USA',
+'Greater Valdosta United Way Inc',
+'United Way of Marquette County'
+)
+;

# 2022-08-04 15:06:33.709462
+\e

# 2022-08-04 15:08:13.994426
+select count(*) from organizations where display_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  'Children's Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  'Denver Children's Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  'Martha's Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  'Miriam's Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  'Children's Defense Fund',
+  'Covenant House',
+  'Cure Alzheimer's Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  'Children's Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+riley@Rileys-MacBook-Pro ~/Projects/freewill-api-v2 (riley/DX-500 *)
+$ vim TESTING
+riley@Rileys-MacBook-Pro ~/Projects/freewill-api-v2 (riley/DX-500 *)
+$ cat TESTING
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  'Children\'s Defense Fund',
+  'Covenant House',
+  'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+;

# 2022-08-04 15:08:18.308550
+\e

# 2022-08-04 15:09:21.402745
+select count(*) from organizations where display_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  E'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  'Denver Children's Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  'Martha's Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  'Miriam's Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  'Children's Defense Fund',
+  'Covenant House',
+  'Cure Alzheimer's Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  'Children's Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+riley@Rileys-MacBook-Pro ~/Projects/freewill-api-v2 (riley/DX-500 *)
+$ vim TESTING
+riley@Rileys-MacBook-Pro ~/Projects/freewill-api-v2 (riley/DX-500 *)
+$ cat TESTING
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  'Children\'s Defense Fund',
+  'Covenant House',
+  'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+;
+

# 2022-08-04 15:09:23.556526
+\e

# 2022-08-04 15:09:53.722106
+select count(*) from organizations where display_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  E'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  E'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  E'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  E'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  E'Children\'s Defense Fund',
+  'Covenant House',
+  E'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  E'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+riley@Rileys-MacBook-Pro ~/Projects/freewill-api-v2 (riley/DX-500 *)
+$ vim TESTING
+riley@Rileys-MacBook-Pro ~/Projects/freewill-api-v2 (riley/DX-500 *)
+$ cat TESTING
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  'Children\'s Defense Fund',
+  'Covenant House',
+  'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+;

# 2022-08-04 15:09:56.786251
+\e

# 2022-08-04 15:10:07.754860
+select count(*) from organizations where display_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  E'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  E'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  E'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  E'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  E'Children\'s Defense Fund',
+  'Covenant House',
+  E'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  E'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+riley@Rileys-MacBook-Pro ~/Projects/freewill-api-v2 (riley/DX-500 *)
+$ vim TESTING
+riley@Rileys-MacBook-Pro ~/Projects/freewill-api-v2 (riley/DX-500 *)
+$ cat TESTING
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  'Children\'s Defense Fund',
+  'Covenant House',
+  'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+;
+

# 2022-08-04 15:10:17.066844
+\e

# 2022-08-04 15:10:59.532078
+select count(*) from organizations where display_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  E'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  E'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  E'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  E'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  E'Children\'s Defense Fund',
+  'Covenant House',
+  E'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  E'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+;

# 2022-08-04 15:11:10.602501
+\e

# 2022-08-04 15:11:16.075778
+select count(*) from organizations where legal_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  E'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  E'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  E'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  E'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  E'Children\'s Defense Fund',
+  'Covenant House',
+  E'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  E'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+;

# 2022-08-04 15:11:19.619017
+\e

# 2022-08-04 15:11:50.194470
+select count(*) from organizations where legal_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  E'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  E'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  E'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  E'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  E'Children\'s Defense Fund',
+  'Covenant House',
+  E'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  E'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+OR display_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  E'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  E'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  E'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  E'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  E'Children\'s Defense Fund',
+  'Covenant House',
+  E'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  E'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+;

# 2022-08-04 15:11:59.753089
+\q

# 2022-08-04 15:12:06.686188
+select count(*) from organizations where legal_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  E'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  E'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  E'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  E'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  E'Children\'s Defense Fund',
+  'Covenant House',
+  E'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  E'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+OR display_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  E'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  E'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  E'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  E'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  E'Children\'s Defense Fund',
+  'Covenant House',
+  E'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  E'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+;

# 2022-08-04 15:12:18.438137
+select * from organizations limit 1;

# 2022-08-04 15:12:31.993339
+\e

# 2022-08-04 15:12:35.437657
+select count(*) from organizations where legal_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  E'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  E'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  E'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  E'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  E'Children\'s Defense Fund',
+  'Covenant House',
+  E'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  E'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+OR display_name in
+(
+  'University of Wyoming',
+  'Happily Ever After Animal Sanctuary',
+  'Make-A-Wish Foundation of Wisconsin',
+  'Southern Environmental Law Center',
+  'Ronald McDonald House Charities of the Intermountain Area',
+  'The Loveland Living Planet Aquarium',
+  'Commemorative Air Force',
+  'Make-A-Wish Foundation of South Carolina',
+  'The Medical University of South Carolina Foundation',
+  'Mystic Seaport Museum',
+  'Alley Cat Advocates',
+  'Austin Humane Society',
+  'Beacon Health Foundation',
+  'Boy Scouts of America - 662 Longhorn Council',
+  'Braille Institute of America',
+  'Brandywine Valley SPCA',
+  'Cabrini University',
+  'Care Resource Community Health Centers',
+  'Catholic Charities of the Diocese of Santa Rosa',
+  'Catholic Community Foundation Archdiocese of New Orleans',
+  'Catholic Diocese of Joliet',
+  'Charleston Animal Society',
+  'Charlottesville-Albemarle SPCA',
+  E'Children\'s Health Dallas',
+  'Coalition On Temporary Shelter',
+  'Conner Prairie',
+  'Corporation of the Fine Arts Museums',
+  'Cumberland River Compact',
+  'Doctors Without Borders',
+  'Eastern PA and Delaware Salvation Army',
+  'Feeding San Diego',
+  'Feeding Tampa Bay',
+  'Foundation for the Diocese of El Paso',
+  'Girls Incorporated of Santa Fe Inc',
+  'Goodwill Industries of Southeastern Wisconsin and Metro Chicago',
+  'Goodwill of Central and Northern Arizona',
+  'Greater New York Salvation Army',
+  'Greater Pittsburgh Community Food Bank',
+  'Greenhill Humane Society',
+  'Habitat for Humanity - Greater Greensboro',
+  'Habitat for Humanity Greater Indianapolis',
+  'Habitat for Humanity of Collier County',
+  'Habitat for Humanity of Greater Miami',
+  'Habitat for Humanity of the Chesapeake',
+  'Habitat for Humanity Portland Region',
+  'Humane Society of Central Oregon',
+  'Humane Society of North Central Florida',
+  'Humane Society of North Texas',
+  'Irwin A and Robert D Goodman Community Center',
+  'Jewish Big Brothers Big Sisters of Los Angeles',
+  'Keystone Community Services',
+  'Knox Area Rescue Ministries',
+  'Make-A-Wish Alabama',
+  'Make-A-Wish Central & South Texas',
+  'Make-A-Wish Foundation of Central and Western North Carolina Inc',
+  'Make-a-Wish Foundation of Missouri and Kansas',
+  'Make-a-Wish Foundation of Ohio Kentucky and Indiana',
+  'Make-A-Wish Foundation of Orange County And The Inland Empire',
+  'Make-A-Wish Foundation of San Diego',
+  'Make-A-Wish Hudson Valley',
+  'Make-A-Wish North Texas',
+  'Make-A-Wish Northeastern & Central California and Northern Nevada',
+  'Make-A-Wish of Central and Northern Florida',
+  'Make-A-Wish of Middle Tennessee',
+  'Make-A-Wish of New Hampshire',
+  'Make-A-Wish Southern Nevada',
+  'Maranatha Volunteers International',
+  'Massachusetts Salvation Army',
+  'Monmouth County SPCA',
+  'Nashville Rescue Mission',
+  'National Council on Aging',
+  'New Jersey Salvation Army',
+  'Northeast OH Salvation Army',
+  'Northern New England Salvation Army',
+  'Paws Chicago',
+  'Planned Parenthood Mar Monte',
+  'Playwrights Horizons',
+  'Providence House Inc.',
+  'Ronald McDonald House Charities of Greater Chattanooga',
+  'Ronald McDonald House Charities of Kentuckiana',
+  'Ronald McDonald House Charities of Northeast Ohio, Inc.',
+  'Ronald McDonald House Charities of San Antonio',
+  'Ronald McDonald House Charities of the Southwest',
+  'Ronald McDonald House Fort Worth',
+  'SAFE Alliance',
+  'Salvation Army Empire State Division',
+  'San Diego Humane Society',
+  'San Diego Rescue Mission',
+  'San Francisco - Marin Food Bank',
+  'Second Harvest Food Bank Of Orange County',
+  'Second Harvest Food Bank Santa Cruz County',
+  'SEVA FOUNDATION',
+  'Southern New England Salvation Army',
+  'Southwest OH Northeast KY Salvation Army',
+  'Susquehanna Health Foundation',
+  'The Alameda County Community Food Bank Inc',
+  'The Library Foundation for Sarasota County',
+  'The Sophia Way',
+  'The University of Texas Medical Branch at Galveston',
+  'The Valerie Fund',
+  'Thousand Currents',
+  'United Community Ministries Inc',
+  'Upper Valley Haven Inc',
+  'Virginia Aquarium & Marine Science Center',
+  'Western Kentucky University',
+  'Western PA Salvation Army',
+  'Yale New Haven Health System',
+  'YMCA of Pierce and Kitsap Counties',
+  'Animal Rescue League of Berks County',
+  'Aslan Housing Foundation',
+  'Astronomical Society of the Pacific',
+  'Atlanta Habitat for Humanity',
+  'Beaches Habitat for Humanity',
+  'Bideawee',
+  'Boys & Girls Club of Bloomington',
+  'Boys & Girls Clubs of the Valley',
+  'Boys and Girls Club of Truckee Meadows',
+  'Broadway Rose Theatre Co.',
+  'Cape Fear Valley Health Foundation',
+  'Catholic Charities of Fairfield County',
+  'Central Oklahoma Habitat for Humanity',
+  'Chronicle Season of Sharing Fund',
+  'City College of New York',
+  'Colorectal Cancer Alliance',
+  'Conservation Society of California',
+  E'Denver Children\'s Home',
+  'Food Bank For New York City',
+  'Friends of Pima Animal Care Center',
+  'Goodwill Industries of Southern New Jersey',
+  'Habitat for Humanity Jacksonville',
+  'Habitat for Humanity of Greater Charlottesville',
+  'Habitat for Humanity of Northwest Indiana',
+  'Habitat for Humanity of Oakland County',
+  'Habitat for Humanity of Palm Beach County',
+  'Habitat for Humanity of Wake County',
+  E'Martha\'s Kitchen',
+  'Medical Center Foundation (Northeast Georgia Health System)',
+  'Metropolitan Area Neighborhood Nutrition Alliance',
+  E'Miriam\'s Kitchen',
+  'NatureBridge',
+  'Princeton Healthcare System Foundation',
+  'RE Sources',
+  'Ronald McDonald House Charities of Idaho',
+  'Ronald McDonald House Charities of Southern California',
+  'San Diego State University Foundation',
+  'San Jose Public Library Foundation',
+  'Sanford Burnham Prebys Medical Discovery Institute',
+  'Second Harvest Food Bank of East Tennessee',
+  'Second Harvest Food Bank of Northwest North Carolina',
+  'Second Harvest Foodbank of Southern Wisconsin',
+  'Suffolk County Council, Boy Scouts of America',
+  'Suncoast Humane Society Inc',
+  'The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch',
+  'Whitman-Walker Health',
+  'YMCA of Greater Brandywine',
+  'Humane Pennsylvania',
+  'Philabundance',
+  'Make-A-Wish Foundation of Oregon',
+  'Oregon Wild',
+  'Feed the Children, Inc.',
+  'Regional Food Bank of Oklahoma, Inc.',
+  'Greater Cleveland Food Bank',
+  'New York Community Trust',
+  'City Harvest',
+  'Harlem Childrens Zone',
+  'Ronald McDonald House Charities of New York',
+  'Nathan Adelson Hospice Foundation',
+  'Nevada Humane Society',
+  'Heaven Can Wait Animal Society',
+  'Miracle Flights',
+  'Roadrunner Food Bank Inc',
+  'Dartmouth Health',
+  'Animal Rescue League of New Hampshire',
+  'New Hampshire PBS',
+  'New Hampshire SPCA',
+  'United Way Worldwide',
+  'American Cancer Society',
+  'American Diabetes Association (ADA)',
+  'American Foundation for Suicide Prevention',
+  'American Heart Association',
+  'American Red Cross',
+  'Americans United for Separation of Church and State',
+  'Amnesty International',
+  'Bob Woodruff Foundation',
+  'Breast Cancer Research Foundation',
+  'Cancer Research Institute',
+  'CDC Foundation',
+  E'Children\'s Defense Fund',
+  'Covenant House',
+  E'Cure Alzheimer\'s Fund',
+  'Davis Phinney Foundation',
+  'Defenders of Wildlife',
+  'Disabled American Veterans (DAV)',
+  'Elton John AIDS Foundation',
+  'Everytown for Gun Safety Support Fund',
+  'FINCA International',
+  'Fred Hutchinson Cancer Research Center',
+  'Gentle Giants Draft Horse Rescue',
+  'Grey2K Worldwide',
+  'Helen Keller International',
+  'Hope for Paws',
+  'Human Rights Watch',
+  'International African American Museum',
+  'International Fund for Animal Welfare (IFAW)',
+  'League of Conservation Voters',
+  'Lutheran World Relief',
+  'Michael J Fox Foundation',
+  'Ms. Foundation for Women',
+  'Muscular Dystrophy Association',
+  'NAACP Empowerment Programs',
+  'North Shore Animal League America',
+  'Osteosarcoma Institute',
+  'Pancreatic Cancer Action Network',
+  'Partnership to End Addiction',
+  'PETA',
+  'Room To Read',
+  'Save the Children',
+  'Sigma Xi, The Scientific Research Honor Society',
+  'SPLC',
+  'Susan G. Komen Breast Cancer Foundation',
+  'The Anti-Cruelty Society',
+  'The Conservation Fund',
+  'The Hunger Project',
+  'Trillions Charitable Trust',
+  'United Animal Nations',
+  'Veterans of Foreign Wars Foundation',
+  'World Resources Institute',
+  'World Vision',
+  'World Wildlife Fund (US)',
+  'Leukemia & Lymphoma Society',
+  'National Centre for Padre Pio, Inc.',
+  'Sankara Eye Foundation USA',
+  'SPCA International',
+  'The Animal Foundation',
+  'Montana Food Bank Network',
+  'Stray Rescue of St. Louis',
+  E'Children\'s Hospital of Michigan Foundation',
+  'Leader Dogs for the Blind',
+  'Childrens Hospital Corporation',
+  'Animal Refuge League of Greater Portland',
+  'Good Shepherd Food Bank',
+  'Northern Light Health Foundation',
+  'Chesapeake Bay Foundation',
+  'Ronald McDonald House Charities Maryland',
+  'Make-A-Wish Foundation of Illinois',
+  'Idaho Conservation League',
+  'Idaho Humane Society',
+  'Make-A-Wish Foundation of Georgia',
+  'Equality Florida Action',
+  'Ronald McDonald House of Delaware',
+  'Connecticut Foodshare',
+  'Connecticut Humane Society',
+  'Make-A-Wish Connecticut',
+  'Make-A-Wish Foundation Colorado',
+  'United Service Organizations (USO)',
+  'Define American',
+  'GreenPeace',
+  'San Francisco SPCA',
+  'Arizona Animal Welfare League',
+  'Make-A-Wish Foundation of Arizona',
+  'Arkansas Community Foundation',
+  'Shepherd University',
+  'Multicare Health Foundation',
+  'South Carolina Environmental Law Project (SCELP)',
+  'University of Alaska Foundation',
+  'Boys & Girls Clubs of America - BGCA',
+  'CDP Parent Account',
+  'Florida Agricultural and Mechanical University',
+  'GIRLS INCORPORATED',
+  'International Planned Parenthood Federation - Worldwide Inc',
+  'National Audubon Society Inc',
+  'Ronald McDonald House Charities National',
+  'Special Olympics Inc',
+  'University of Pittsburgh Medical Center',
+  'YMCA of the USA',
+  'Greater Valdosta United Way Inc',
+  'United Way of Marquette County'
+)
+;

# 2022-08-04 15:12:36.616553
+\e

# 2022-08-04 15:17:53.951722
+select count(*) from organizations where legal_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+OR display_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+;

# 2022-08-04 15:18:29.603102
+\e

# 2022-08-04 15:19:06.843173
+select count(p.*) from programs p join organizations o on p.organization_id = o.rand_id where o.legal_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+OR o.display_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+;

# 2022-08-04 15:19:48.347492
+\e

# 2022-08-04 15:20:09.790589
+select count(p.*) from programs p join organizations o on p.organization_id = o.rand_id where o.legal_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+OR o.display_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+AND p.locality in (1,2,3)
+;

# 2022-08-04 15:20:21.715687
+\e

# 2022-08-04 15:20:42.958868
+select count(p.*) from programs p join organizations o on p.organization_id = o.rand_id where o.legal_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+OR o.display_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+AND p.locality is not null
+AND p.locality != -1
+;

# 2022-08-04 15:21:00.882016
+\e

# 2022-08-04 15:21:08.901959
+select count(p.*) from programs p join organizations o on p.organization_id = o.rand_id where o.legal_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+OR o.display_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+AND p.locality is not null
+AND p.locality != -1
+AND p.show_publicy = true
+;

# 2022-08-04 15:21:13.667404
+\d programs

# 2022-08-04 15:21:18.336593
+\e

# 2022-08-04 15:21:20.918376
+select count(p.*) from programs p join organizations o on p.organization_id = o.rand_id where o.legal_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+OR o.display_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+AND p.locality is not null
+AND p.locality != -1
+AND p.show_publicy = true
+;

# 2022-08-04 15:21:22.066321
+\e

# 2022-08-04 15:21:28.231204
+select count(p.*) from programs p join organizations o on p.organization_id = o.rand_id where o.legal_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+OR o.display_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+AND p.locality is not null
+AND p.locality != -1
+AND p.show_publicly = true
+;

# 2022-08-04 15:21:56.029313
+select count(*) from programs where locality is not null and locality != -1 locality and show_publicly;

# 2022-08-04 15:22:05.233105
+select count(*) from programs where locality is not null and locality != -1  and show_publicly;

# 2022-08-04 15:22:16.004873
+select * from programs limit 1;

# 2022-08-04 15:22:35.911195
+select count(*) from programs where locality is not null and locality != -1  and show_publicly and parent_program_id is null;

# 2022-08-04 15:22:39.266494
+select count(*) from programs where locality is not null and locality != -1  and show_publicly and parent_program_id is not null;

# 2022-08-04 15:22:55.134161
+select count(p.*) from programs p join organizations o on p.organization_id = o.rand_id where o.legal_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+OR o.display_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+AND p.locality is not null
+AND p.locality != -1
+AND p.show_publicly = true
+;

# 2022-08-04 15:22:58.408258
+\e

# 2022-08-04 15:23:08.130465
+select count(p.*) from programs p join organizations o on p.organization_id = o.rand_id where o.legal_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+OR o.display_name ilike any (array[
+  '%University of Wyoming%',
+  '%Happily Ever After Animal Sanctuary%',
+  '%Make-A-Wish Foundation of Wisconsin%',
+  '%Southern Environmental Law Center%',
+  '%Ronald McDonald House Charities of the Intermountain Area%',
+  '%The Loveland Living Planet Aquarium%',
+  '%Commemorative Air Force%',
+  '%Make-A-Wish Foundation of South Carolina%',
+  '%The Medical University of South Carolina Foundation%',
+  '%Mystic Seaport Museum%',
+  '%Alley Cat Advocates%',
+  '%Austin Humane Society%',
+  '%Beacon Health Foundation%',
+  '%Boy Scouts of America - 662 Longhorn Council%',
+  '%Braille Institute of America%',
+  '%Brandywine Valley SPCA%',
+  '%Cabrini University%',
+  '%Care Resource Community Health Centers%',
+  '%Catholic Charities of the Diocese of Santa Rosa%',
+  '%Catholic Community Foundation Archdiocese of New Orleans%',
+  '%Catholic Diocese of Joliet%',
+  '%Charleston Animal Society%',
+  '%Charlottesville-Albemarle SPCA%',
+  E'%Children\'s Health Dallas%',
+  '%Coalition On Temporary Shelter%',
+  '%Conner Prairie%',
+  '%Corporation of the Fine Arts Museums%',
+  '%Cumberland River Compact%',
+  '%Doctors Without Borders%',
+  '%Eastern PA and Delaware Salvation Army%',
+  '%Feeding San Diego%',
+  '%Feeding Tampa Bay%',
+  '%Foundation for the Diocese of El Paso%',
+  '%Girls Incorporated of Santa Fe Inc%',
+  '%Goodwill Industries of Southeastern Wisconsin and Metro Chicago%',
+  '%Goodwill of Central and Northern Arizona%',
+  '%Greater New York Salvation Army%',
+  '%Greater Pittsburgh Community Food Bank%',
+  '%Greenhill Humane Society%',
+  '%Habitat for Humanity - Greater Greensboro%',
+  '%Habitat for Humanity Greater Indianapolis%',
+  '%Habitat for Humanity of Collier County%',
+  '%Habitat for Humanity of Greater Miami%',
+  '%Habitat for Humanity of the Chesapeake%',
+  '%Habitat for Humanity Portland Region%',
+  '%Humane Society of Central Oregon%',
+  '%Humane Society of North Central Florida%',
+  '%Humane Society of North Texas%',
+  '%Irwin A and Robert D Goodman Community Center%',
+  '%Jewish Big Brothers Big Sisters of Los Angeles%',
+  '%Keystone Community Services%',
+  '%Knox Area Rescue Ministries%',
+  '%Make-A-Wish Alabama%',
+  '%Make-A-Wish Central & South Texas%',
+  '%Make-A-Wish Foundation of Central and Western North Carolina Inc%',
+  '%Make-a-Wish Foundation of Missouri and Kansas%',
+  '%Make-a-Wish Foundation of Ohio Kentucky and Indiana%',
+  '%Make-A-Wish Foundation of Orange County And The Inland Empire%',
+  '%Make-A-Wish Foundation of San Diego%',
+  '%Make-A-Wish Hudson Valley%',
+  '%Make-A-Wish North Texas%',
+  '%Make-A-Wish Northeastern & Central California and Northern Nevada%',
+  '%Make-A-Wish of Central and Northern Florida%',
+  '%Make-A-Wish of Middle Tennessee%',
+  '%Make-A-Wish of New Hampshire%',
+  '%Make-A-Wish Southern Nevada%',
+  '%Maranatha Volunteers International%',
+  '%Massachusetts Salvation Army%',
+  '%Monmouth County SPCA%',
+  '%Nashville Rescue Mission%',
+  '%National Council on Aging%',
+  '%New Jersey Salvation Army%',
+  '%Northeast OH Salvation Army%',
+  '%Northern New England Salvation Army%',
+  '%Paws Chicago%',
+  '%Planned Parenthood Mar Monte%',
+  '%Playwrights Horizons%',
+  '%Providence House Inc.%',
+  '%Ronald McDonald House Charities of Greater Chattanooga%',
+  '%Ronald McDonald House Charities of Kentuckiana%',
+  '%Ronald McDonald House Charities of Northeast Ohio, Inc.%',
+  '%Ronald McDonald House Charities of San Antonio%',
+  '%Ronald McDonald House Charities of the Southwest%',
+  '%Ronald McDonald House Fort Worth%',
+  '%SAFE Alliance%',
+  '%Salvation Army Empire State Division%',
+  '%San Diego Humane Society%',
+  '%San Diego Rescue Mission%',
+  '%San Francisco - Marin Food Bank%',
+  '%Second Harvest Food Bank Of Orange County%',
+  '%Second Harvest Food Bank Santa Cruz County%',
+  '%SEVA FOUNDATION%',
+  '%Southern New England Salvation Army%',
+  '%Southwest OH Northeast KY Salvation Army%',
+  '%Susquehanna Health Foundation%',
+  '%The Alameda County Community Food Bank Inc%',
+  '%The Library Foundation for Sarasota County%',
+  '%The Sophia Way%',
+  '%The University of Texas Medical Branch at Galveston%',
+  '%The Valerie Fund%',
+  '%Thousand Currents%',
+  '%United Community Ministries Inc%',
+  '%Upper Valley Haven Inc%',
+  '%Virginia Aquarium & Marine Science Center%',
+  '%Western Kentucky University%',
+  '%Western PA Salvation Army%',
+  '%Yale New Haven Health System%',
+  '%YMCA of Pierce and Kitsap Counties%',
+  '%Animal Rescue League of Berks County%',
+  '%Aslan Housing Foundation%',
+  '%Astronomical Society of the Pacific%',
+  '%Atlanta Habitat for Humanity%',
+  '%Beaches Habitat for Humanity%',
+  '%Bideawee%',
+  '%Boys & Girls Club of Bloomington%',
+  '%Boys & Girls Clubs of the Valley%',
+  '%Boys and Girls Club of Truckee Meadows%',
+  '%Broadway Rose Theatre Co.%',
+  '%Cape Fear Valley Health Foundation%',
+  '%Catholic Charities of Fairfield County%',
+  '%Central Oklahoma Habitat for Humanity%',
+  '%Chronicle Season of Sharing Fund%',
+  '%City College of New York%',
+  '%Colorectal Cancer Alliance%',
+  '%Conservation Society of California%',
+  E'%Denver Children\'s Home%',
+  '%Food Bank For New York City%',
+  '%Friends of Pima Animal Care Center%',
+  '%Goodwill Industries of Southern New Jersey%',
+  '%Habitat for Humanity Jacksonville%',
+  '%Habitat for Humanity of Greater Charlottesville%',
+  '%Habitat for Humanity of Northwest Indiana%',
+  '%Habitat for Humanity of Oakland County%',
+  '%Habitat for Humanity of Palm Beach County%',
+  '%Habitat for Humanity of Wake County%',
+  E'%Martha\'s Kitchen%',
+  '%Medical Center Foundation (Northeast Georgia Health System)%',
+  '%Metropolitan Area Neighborhood Nutrition Alliance%',
+  E'%Miriam\'s Kitchen%',
+  '%NatureBridge%',
+  '%Princeton Healthcare System Foundation%',
+  '%RE Sources%',
+  '%Ronald McDonald House Charities of Idaho%',
+  '%Ronald McDonald House Charities of Southern California%',
+  '%San Diego State University Foundation%',
+  '%San Jose Public Library Foundation%',
+  '%Sanford Burnham Prebys Medical Discovery Institute%',
+  '%Second Harvest Food Bank of East Tennessee%',
+  '%Second Harvest Food Bank of Northwest North Carolina%',
+  '%Second Harvest Foodbank of Southern Wisconsin%',
+  '%Suffolk County Council, Boy Scouts of America%',
+  '%Suncoast Humane Society Inc%',
+  '%The Humane Society of Greater Jupiter/Tequesta dba Furry Friends Adoption, Clinic & Ranch%',
+  '%Whitman-Walker Health%',
+  '%YMCA of Greater Brandywine%',
+  '%Humane Pennsylvania%',
+  '%Philabundance%',
+  '%Make-A-Wish Foundation of Oregon%',
+  '%Oregon Wild%',
+  '%Feed the Children, Inc.%',
+  '%Regional Food Bank of Oklahoma, Inc.%',
+  '%Greater Cleveland Food Bank%',
+  '%New York Community Trust%',
+  '%City Harvest%',
+  '%Harlem Childrens Zone%',
+  '%Ronald McDonald House Charities of New York%',
+  '%Nathan Adelson Hospice Foundation%',
+  '%Nevada Humane Society%',
+  '%Heaven Can Wait Animal Society%',
+  '%Miracle Flights%',
+  '%Roadrunner Food Bank Inc%',
+  '%Dartmouth Health%',
+  '%Animal Rescue League of New Hampshire%',
+  '%New Hampshire PBS%',
+  '%New Hampshire SPCA%',
+  '%United Way Worldwide%',
+  '%American Cancer Society%',
+  '%American Diabetes Association (ADA)%',
+  '%American Foundation for Suicide Prevention%',
+  '%American Heart Association%',
+  '%American Red Cross%',
+  '%Americans United for Separation of Church and State%',
+  '%Amnesty International%',
+  '%Bob Woodruff Foundation%',
+  '%Breast Cancer Research Foundation%',
+  '%Cancer Research Institute%',
+  '%CDC Foundation%',
+  E'%Children\'s Defense Fund%',
+  '%Covenant House%',
+  E'%Cure Alzheimer\'s Fund%',
+  '%Davis Phinney Foundation%',
+  '%Defenders of Wildlife%',
+  '%Disabled American Veterans (DAV)%',
+  '%Elton John AIDS Foundation%',
+  '%Everytown for Gun Safety Support Fund%',
+  '%FINCA International%',
+  '%Fred Hutchinson Cancer Research Center%',
+  '%Gentle Giants Draft Horse Rescue%',
+  '%Grey2K Worldwide%',
+  '%Helen Keller International%',
+  '%Hope for Paws%',
+  '%Human Rights Watch%',
+  '%International African American Museum%',
+  '%International Fund for Animal Welfare (IFAW)%',
+  '%League of Conservation Voters%',
+  '%Lutheran World Relief%',
+  '%Michael J Fox Foundation%',
+  '%Ms. Foundation for Women%',
+  '%Muscular Dystrophy Association%',
+  '%NAACP Empowerment Programs%',
+  '%North Shore Animal League America%',
+  '%Osteosarcoma Institute%',
+  '%Pancreatic Cancer Action Network%',
+  '%Partnership to End Addiction%',
+  '%PETA%',
+  '%Room To Read%',
+  '%Save the Children%',
+  '%Sigma Xi, The Scientific Research Honor Society%',
+  '%SPLC%',
+  '%Susan G. Komen Breast Cancer Foundation%',
+  '%The Anti-Cruelty Society%',
+  '%The Conservation Fund%',
+  '%The Hunger Project%',
+  '%Trillions Charitable Trust%',
+  '%United Animal Nations%',
+  '%Veterans of Foreign Wars Foundation%',
+  '%World Resources Institute%',
+  '%World Vision%',
+  '%World Wildlife Fund (US)%',
+  '%Leukemia & Lymphoma Society%',
+  '%National Centre for Padre Pio, Inc.%',
+  '%Sankara Eye Foundation USA%',
+  '%SPCA International%',
+  '%The Animal Foundation%',
+  '%Montana Food Bank Network%',
+  '%Stray Rescue of St. Louis%',
+  E'%Children\'s Hospital of Michigan Foundation%',
+  '%Leader Dogs for the Blind%',
+  '%Childrens Hospital Corporation%',
+  '%Animal Refuge League of Greater Portland%',
+  '%Good Shepherd Food Bank%',
+  '%Northern Light Health Foundation%',
+  '%Chesapeake Bay Foundation%',
+  '%Ronald McDonald House Charities Maryland%',
+  '%Make-A-Wish Foundation of Illinois%',
+  '%Idaho Conservation League%',
+  '%Idaho Humane Society%',
+  '%Make-A-Wish Foundation of Georgia%',
+  '%Equality Florida Action%',
+  '%Ronald McDonald House of Delaware%',
+  '%Connecticut Foodshare%',
+  '%Connecticut Humane Society%',
+  '%Make-A-Wish Connecticut%',
+  '%Make-A-Wish Foundation Colorado%',
+  '%United Service Organizations (USO)%',
+  '%Define American%',
+  '%GreenPeace%',
+  '%San Francisco SPCA%',
+  '%Arizona Animal Welfare League%',
+  '%Make-A-Wish Foundation of Arizona%',
+  '%Arkansas Community Foundation%',
+  '%Shepherd University%',
+  '%Multicare Health Foundation%',
+  '%South Carolina Environmental Law Project (SCELP)%',
+  '%University of Alaska Foundation%',
+  '%Boys & Girls Clubs of America - BGCA%',
+  '%CDP Parent Account%',
+  '%Florida Agricultural and Mechanical University%',
+  '%GIRLS INCORPORATED%',
+  '%International Planned Parenthood Federation - Worldwide Inc%',
+  '%National Audubon Society Inc%',
+  '%Ronald McDonald House Charities National%',
+  '%Special Olympics Inc%',
+  '%University of Pittsburgh Medical Center%',
+  '%YMCA of the USA%',
+  '%Greater Valdosta United Way Inc%',
+  '%United Way of Marquette County%']
+)
+AND p.locality is not null
+AND p.locality != -1
+AND p.show_publicly = true
+AND p.parent_program_id is null
+;

# 2022-08-04 15:23:35.514274
+select count(*) from programs where locality is not null and locality != -1  and show_publicly and parent_program_id is null;

# 2022-08-04 15:23:49.922190
+select count(*) from programs where locality is not null and locality != -1  and show_publicly = true and parent_program_id is null;

# 2022-08-09 11:58:20.521370
+select count(*) from programs where organization_id is null;

# 2022-08-09 13:20:26.426064
+\q

# 2022-08-09 13:20:41.622687
+\d organizations

# 2022-08-09 13:20:59.093647
+select count(*) from organizations where logo_is_hidden_for_featureships = true;

# 2022-08-09 13:21:06.307439
+select display_name from organizations where logo_is_hidden_for_featureships = true;

# 2022-08-09 13:24:04.385529
+select rand_id from organizations where logo_is_hidden_for_featureships = true;

# 2022-08-09 13:24:12.213997
+select count(*) from programs where organization_id in (select rand_id from organizations where logo_is_hidden_for_featureships = true);

# 2022-08-09 13:24:23.289477
+select display_name from programs where organization_id in (select rand_id from organizations where logo_is_hidden_for_featureships = true);

# 2022-08-09 13:24:38.839626
+\q

# 2022-08-09 13:24:41.635392
+select display_name from programs where organization_id in (select rand_id from organizations where logo_is_hidden_for_featureships = true);

# 2022-08-09 13:26:22.447898
+select display_name from programs where organization_id in (select rand_id from organizations where logo_is_hidden_for_featureships = true) and show_publicly and locality in (0,1,2);

# 2022-08-09 13:27:01.889879
+select display_name from programs where organization_id in (select rand_id from organizations where logo_is_hidden_for_featureships = true) and show_publicly and locality in (2);

# 2022-08-22 12:34:17.451722
+select * from organizations where display_name ilike '%ACME%';

# 2022-08-22 12:34:39.936792
+select * from organizations where rand_id = 'flwQhVfj';

# 2022-08-22 12:34:43.650597
+\d rand_ids_in_use

# 2022-08-22 12:34:49.439549
+select count(*) from rand_ids_in_use;

# 2022-08-22 12:34:55.388686
+select * from organizations where rand_id = 'flwQhVfj';

# 2022-08-22 12:36:57.607976
+select count(*) from programs where organization_id in (select rand_id from organizations where rand_id = 'flwQhVfj');

# 2022-08-22 12:37:04.536184
+select rand_id from programs where organization_id in (select rand_id from organizations where rand_id = 'flwQhVfj');

# 2022-08-22 12:37:27.293195
+select count(*) from estate_charitable_gifts where organization_id in (select rand_id from programs where organization_id in (select rand_id from organizations where rand_id = 'flwQhVfj'));

# 2022-08-22 12:37:40.982365
+select count(*) from estate_charitable_gifts where organization_id in (select rand_id from organizations where rand_id = 'flwQhVfj');

# 2022-08-22 12:37:45.808803
+select * from estate_charitable_gifts where organization_id in (select rand_id from organizations where rand_id = 'flwQhVfj');

# 2022-08-22 12:37:58.199637
+select count(*) from estate_charitable_gifts where organization_id in (select rand_id from programs where organization_id in (select rand_id from organizations where rand_id = 'flwQhVfj'));

# 2022-08-22 12:38:03.624652
+select count(*) from estate_charitable_gifts where program_id in (select rand_id from programs where organization_id in (select rand_id from organizations where rand_id = 'flwQhVfj'));

# 2022-08-22 12:41:05.432398
+select * from estate_beneficiaries limit 1;

# 2022-08-22 12:46:21.726454
+\d rand_id

# 2022-08-22 12:46:25.449645
+\d organizations

# 2022-08-22 12:46:37.777057
+select count(*) from estate_charitable_gifts where program_id in (select rand_id from programs where organization_id in (select rand_id from organizations where rand_id = 'flwQhVfj'));

# 2022-08-22 12:49:24.279723
+\d profiles

# 2022-08-22 12:50:16.751565
+\d estate_charitable_gifts

# 2022-08-22 12:52:17.305375
+select address_1 from profiles limit 10;

# 2022-08-22 12:52:21.605491
+select address_2 from profiles limit 10;

# 2022-08-22 12:52:24.782704
+select address_1 from profiles limit 10;

# 2022-08-22 12:54:05.447481
+select address from profiles limit 10;

# 2022-08-22 12:58:11.888177
+select random()
+;

# 2022-08-22 12:58:16.008769
+select random();

# 2022-08-22 12:58:51.654588
+select random() * 10;

# 2022-08-22 12:58:53.477964
+select random() * 100;

# 2022-08-22 12:59:22.135946
+select trunc(random() * 100);

# 2022-08-22 12:59:53.062903
+select trunc(random() * 100) INTEGER;

# 2022-08-22 13:00:02.655124
+select trunc(random() * 100)::INTEGER;

# 2022-08-22 13:05:42.471691
+select ['a','b','c'];

# 2022-08-22 13:06:12.663369
+select {'a','b','c'};

# 2022-08-22 13:06:23.446518
+select {"a","b","c"};

# 2022-08-22 13:06:42.894153
+select ARRAY["a","b","c"];

# 2022-08-22 13:06:47.367768
+select ARRAY['a',"b","c"];

# 2022-08-22 13:06:51.088188
+select ARRAY['a','b','c'];

# 2022-08-22 13:06:54.405398
+select ARRAY['a','b','c'][0];

# 2022-08-22 13:06:57.742517
+select ARRAY['a','b','c']->0;

# 2022-08-22 13:07:12.926488
+select (ARRAY['a','b','c'])[0];

# 2022-08-22 13:07:15.754918
+select (ARRAY['a','b','c'])[1;

# 2022-08-22 13:07:17.191072
+select (ARRAY['a','b','c'])[1];

# 2022-08-22 13:07:19.492881
+select (ARRAY['a','b','c'])[2];

# 2022-08-22 13:07:21.084531
+select (ARRAY['a','b','c'])[3];

# 2022-08-22 13:09:54.145255
+\l

# 2022-08-22 13:10:08.237861
+create database freewill_dev_backup_08_22_22 with template freewill_dev;

# 2022-08-22 13:25:15.532574
+select * from profiles limit 1;

# 2022-08-22 13:26:28.777181
+select count(*) from profiles where f_name->>'first' ilike '% ';

# 2022-08-22 13:26:33.299606
+select count(*) from profiles where f_name->>'first' not ilike '% ';

# 2022-08-22 13:27:32.051337
+select * from profiles limit 1;

# 2022-08-22 13:27:45.422322
+select * from users limit 1;

# 2022-08-22 13:31:17.352879
+select * from profiles limit 1;

# 2022-08-22 13:34:08.120294
+select trunc(random() * 9900 + 100)::integer;

# 2022-08-22 13:41:07.671068
+select trunc(0.0001 * 9900 + 100)::integer;

# 2022-08-22 13:41:11.408805
+select trunc(0.0321 * 9900 + 100)::integer;

# 2022-08-22 13:41:14.246881
+select trunc(0.0322 * 9900 + 100)::integer;

# 2022-08-22 13:41:17.095195
+select trunc(0.0352 * 9900 + 100)::integer;

# 2022-08-22 13:41:21.225576
+select trunc(0.0852 * 9900 + 100)::integer;

# 2022-08-22 13:41:33.985252
+select trunc(0.0852 * 9090 + 10)::integer;

# 2022-08-22 13:41:38.202307
+select trunc(0.001 * 9090 + 10)::integer;

# 2022-08-22 13:41:41.745675
+select trunc(0.1 * 9090 + 10)::integer;

# 2022-08-22 13:41:44.562306
+select trunc(0.8 * 9090 + 10)::integer;

# 2022-08-22 13:41:46.957038
+select trunc(0.9 * 9090 + 10)::integer;

# 2022-08-22 13:41:49.343126
+select trunc(0.999 * 9090 + 10)::integer;

# 2022-08-22 13:41:52.990915
+select trunc(0.9999999 * 9090 + 10)::integer;

# 2022-08-22 13:42:12.585773
+select trunc(0.9999999 * 3000 + 10)::integer;

# 2022-08-22 13:42:17.584484
+select trunc(0.1 * 3000 + 10)::integer;

# 2022-08-22 13:42:20.105357
+select trunc(0.01 * 3000 + 10)::integer;

# 2022-08-22 13:42:22.689577
+select trunc(0.00001 * 3000 + 10)::integer;

# 2022-08-22 13:42:25.398932
+select trunc(0.0000000001 * 3000 + 10)::integer;

# 2022-08-22 13:42:29.833235
+select trunc(0.9999999 * 3000 + 10)::integer;

# 2022-08-22 13:42:36.957605
+select trunc(0.9999999 * 2090 + 10)::integer;

# 2022-08-22 13:42:41.257685
+select trunc(0.9999999 * 2990 + 10)::integer;

# 2022-08-22 13:42:46.960524
+select trunc(0.9999999999 * 2990 + 10)::integer;

# 2022-08-22 13:42:54.258125
+select trunc(0.0000000001 * 2990 + 10)::integer;

# 2022-08-22 13:42:57.859709
+select trunc(0.5 * 2990 + 10)::integer;

# 2022-08-22 13:43:02.938097
+select trunc(0.5678 * 2990 + 10)::integer;

# 2022-08-22 13:43:08.249272
+select trunc(0.5671238 * 2990 + 10)::integer;

# 2022-08-22 13:43:15.081572
+select trunc(0.341 * 2990 + 10)::integer;

# 2022-08-22 13:43:39.962674
+select trunc(0.341 * 2989 + 11)::integer;

# 2022-08-22 13:43:43.748409
+select trunc(0.000000000000001 * 2989 + 11)::integer;

# 2022-08-22 13:43:49.129362
+select trunc(0.99999999999999999999 * 2989 + 11)::integer;

# 2022-08-22 13:43:56.259788
+select trunc(0.99999999999999999999 * 2989 + 12)::integer;

# 2022-08-22 13:44:01.838768
+select trunc(0.00000000000001 * 2989 + 12)::integer;

# 2022-08-22 13:44:06.432786
+select trunc(0.326778 * 2989 + 12)::integer;

# 2022-08-23 11:05:48.809494
+select * from profiles where f_name->>'first' = f_name->>'last';

# 2022-08-23 11:05:53.843660
+select count(*) from profiles where f_name->>'first' = f_name->>'last';

# 2022-08-23 11:06:32.175891
+select count(*) from profiles where f_name->>'first' = f_name->>'last' and f_name->>'first' != '';

# 2022-08-23 11:07:14.331686
+select f_name->>'first', f_name->>'last' from profiles where f_name->>'first' = f_name->>'last' and f_name->>'first' != '';

# 2022-08-23 11:08:08.879082
+select f_name->>'first', f_name->>'last' from profiles where f_name->>'first' = f_name->>'last' and f_name->>'first' != '' and length(f_name->>'first') = 6;

# 2022-08-23 11:08:19.624253
+select count(*) from profiles where f_name->>'first' = f_name->>'last' and f_name->>'first' != '' and length(f_name->>'first') = 6;

# 2022-08-23 11:11:38.479118
+select count(*) from profiles where f_name->>'first' in (select profile_id from estate_charitable_gifts);

# 2022-08-23 11:11:47.502916
+\q

# 2022-08-23 11:11:54.059288
+select count(*) from profiles where f_name->>'first' in (select profile_id from estate_charitable_gifts);

# 2022-08-23 11:12:15.420095
+\q

# 2022-08-23 11:12:22.336789
+select count(*) from profiles where f_name->>'first' in (select profile_id from estate_charitable_gifts);

# 2022-08-23 11:13:53.140769
+\q

# 2022-08-23 11:19:31.956397
+select display_name from programs where organization_id in (select rand_id from organizations where display_name ilike '%ACME%');

# 2022-08-23 11:19:45.758161
+\q

# 2022-08-23 11:19:52.006220
+select display_name from programs where organization_id in (select rand_id from organizations where display_name ilike '%ACME%');

# 2022-08-23 11:21:24.099106
+select * from programs where rand_id = 'zugU8aeP';

# 2022-08-23 11:21:44.451916
+select display_name from programs where organization_id in (select rand_id from organizations where display_name ilike '%ACME%');

# 2022-08-23 11:23:30.502757
+\d profiles

# 2022-08-23 11:23:48.512010
+select flags from profiles;

# 2022-08-23 11:23:55.534413
+select flags from profiles where flags is not null;

# 2022-08-23 11:43:10.125131
+select * from profiles limit 1;

# 2022-08-23 11:43:17.799272
+select * from profiles limit 1 where birthday is not null;

# 2022-08-23 11:43:23.556627
+select * from profiles limit 1 where birthdate is not null;

# 2022-08-23 11:43:29.333136
+select * from profiles where birthdate is not null limit 1;

# 2022-08-23 11:43:37.190516
+\d profiles

# 2022-08-23 11:50:11.513292
+select count(*) from profiles where f_name->>'first' in (select profile_id from estate_charitable_gifts);

# 2022-08-23 11:50:43.671414
+\q

# 2022-08-23 11:52:45.931064
+select * from profiles limit 1;

# 2022-08-23 11:52:52.843066
+select counT(*) from profiles;

# 2022-08-23 11:52:57.732123
+select counT(*) from estate_charitable_gifts;

# 2022-08-23 11:53:01.419293
+\c freewill_dev_backup_08_22_22

# 2022-08-23 11:53:03.183586
+select counT(*) from estate_charitable_gifts;

# 2022-08-23 11:53:11.298676
+select rand_id from profiles limit 1;

# 2022-08-23 11:53:16.903421
+select rand_id, f_name from profiles limit 1;

# 2022-08-23 11:53:23.467626
+select rand_id, f_name, birthdate from profiles limit 1;

# 2022-08-23 11:53:29.810590
+select rand_id, f_name, birthdate from profiles where birthdate is not null limit 1;

# 2022-08-23 11:54:11.030093
+update profiles set birthdate = '1/1/' || birthdate?????  where rand_id = 'BZ3urnTo';

# 2022-08-23 11:55:22.112987
+select regexp_matches(birthdate, '\d+/\d+/(\d+)') where rand_id = 'BZ3urnTo';

# 2022-08-23 11:55:26.471400
+select regexp_matches(birthdate, '\d+/\d+/(\d+)') from profiles where rand_id = 'BZ3urnTo';

# 2022-08-23 11:55:36.446934
+select regexp_matches(birthdate, '\d+/\d+/(\d+)')[0] from profiles where rand_id = 'BZ3urnTo';

# 2022-08-23 11:55:39.506694
+select regexp_matches(birthdate, '\d+/\d+/(\d+)')[1] from profiles where rand_id = 'BZ3urnTo';

# 2022-08-23 11:55:43.192794
+select regexp_matches(birthdate, '\d+/\d+/(\d+)') from profiles where rand_id = 'BZ3urnTo';

# 2022-08-23 11:56:35.109188
+select substring(birthdate, '\d+/\d+/(\d+)') from profiles where rand_id = 'BZ3urnTo';

# 2022-08-23 11:56:43.728130
+select substring(birthdate, '\d+/\d+/(\d+)') + 1 from profiles where rand_id = 'BZ3urnTo';

# 2022-08-23 11:56:49.550863
+select substring(birthdate, '\d+/\d+/(\d+)') || '1' from profiles where rand_id = 'BZ3urnTo';

# 2022-08-23 11:56:54.875333
+select substring(birthdate, '\d+/\d+/(\d+)') from profiles where rand_id = 'BZ3urnTo';

# 2022-08-23 11:58:04.374775
+      UPDATE profiles
+         SET f_name = ('{"last":"' || CURRENT_LAST_NAME || '","first":"' || CURRENT_FIRST_NAME || '"}')::jsonb, -- TODO
+             address_1 = CURRENT_ADDRESS_NUMBER || ' ' || CURRENT_STREET_NAME
+             birthdate = CURRENT_BIRTHDAY_MONTH || '/' || CURRENT_BIRTHDAY_DAY || '/' substring(birthdate, '\d+/\d+/(\d+)')
+       WHERE rand_id = 'Bz3urnTo';
+

# 2022-08-23 11:58:32.811150
+      UPDATE profiles
+         SET f_name = ('{"last":"' || CURRENT_LAST_NAME || '","first":"' || CURRENT_FIRST_NAME || '"}')::jsonb, -- TODO
+             address_1 = CURRENT_ADDRESS_NUMBER || ' ' || CURRENT_STREET_NAME,
+             birthdate = CURRENT_BIRTHDAY_MONTH || '/' || CURRENT_BIRTHDAY_DAY || '/' substring(birthdate, '\d+/\d+/(\d+)')
+       WHERE rand_id = 'Bz3urnTo';
+

# 2022-08-23 11:58:39.997770
+\e

# 2022-08-23 11:58:48.713086
+      UPDATE profiles
+         SET f_name = ('{"last":"' || CURRENT_LAST_NAME || '","first":"' || CURRENT_FIRST_NAME || '"}')::jsonb, -- TODO
+             address_1 = CURRENT_ADDRESS_NUMBER || ' ' || CURRENT_STREET_NAME,
+             birthdate = CURRENT_BIRTHDAY_MONTH || '/' || CURRENT_BIRTHDAY_DAY || '/' || substring(birthdate, '\d+/\d+/(\d+)')
+       WHERE rand_id = 'Bz3urnTo';

# 2022-08-23 12:00:53.946716
+select ('{"last":' || '"name"')::jsonb;

# 2022-08-23 12:01:05.903777
+select ('{"last":' || '"name"' || '}')::jsonb;

# 2022-08-23 12:18:56.480633
+select count(*) from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 12:19:37.806867
+\d profiles

# 2022-08-23 12:19:43.966340
+select name from profiles;

# 2022-08-23 12:19:48.078621
+select name from profiles where name is no tnull;

# 2022-08-23 12:19:50.174887
+select name from profiles where name is not null;

# 2022-08-23 12:19:56.982857
+select count(*) from profiles where name is not null;

# 2022-08-23 12:20:51.192884
+select count(*) from profiles where f_name->>'first' in (select profile_id from estate_charitable_gifts);

# 2022-08-23 12:21:04.206878
+\q

# 2022-08-23 12:21:14.983215
+select count(*) from profiles where f_name->>'first' in (select profile_id from estate_charitable_gifts);

# 2022-08-23 12:21:21.385579
+select count(*) from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 12:21:50.819377
+select p.f_name->>'first' from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 12:22:17.894345
+select count(*) from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first' where p.f_name->>'first' != '';

# 2022-08-23 12:23:00.399576
+select count(*), length(p.f_name->>'first') from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first' where p.f_name->>'first';

# 2022-08-23 12:23:13.416912
+select count(*), length(p.f_name->>'first') from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first' group by length(p.f_name->>'first');

# 2022-08-23 12:23:26.734383
+select count(*) from profiles where f_name->>'first' in (select profile_id from estate_charitable_gifts);

# 2022-08-23 12:23:47.901451
+select count(*), length(f_name->>'first') from profiles where f_name->>'first' in (select profile_id from estate_charitable_gifts) group by length(f_name->>'first');

# 2022-08-23 12:24:10.363534
+select count(*) from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 12:24:21.457310
+select p.f_name->>'first' from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 12:24:38.657408
+select distinct p.f_name->>'first' from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 12:24:50.124160
+select distinct count(*) from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 12:25:55.458003
+select count(DISTINCT "f_name->>'first'") from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 12:26:00.117345
+select count(DISTINCT f_name->>'first') from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 12:27:25.013414
+select count(*) from estate_charitable_gifts where message in (select rand_id from estate_charitable_gifts);

# 2022-08-23 12:29:35.246764
+select count(*) from estate_charitable_gifts ecg1 join estate_charitable_gifts ecg2 on ecg1.message = ecg2.rand_id;

# 2022-08-23 12:31:22.356644
+\q

# 2022-08-23 12:31:26.202263
+\l

# 2022-08-23 12:31:33.561035
+select count(*) from profiles;

# 2022-08-23 13:55:47.891575
+select count(*) from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 13:56:00.706218
+select count(distinct p.f_name->>'first') from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 13:56:20.498274
+create database freewill_dev_backup_08_23_22 with template freewill_dev;

# 2022-08-23 14:01:08.354685
+select distinct p.f_name->>'first', rand_id from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 14:01:13.132988
+select distinct p.f_name->>'first', p.rand_id from profiles p join estate_charitable_gifts ecg on ecg.profile_id = p.f_name->>'first';

# 2022-08-23 14:05:13.933358
+select * from profiles where rand_id in ('Wjx2Zluo',
+'mWknoiaD',
+'4l7XEfGU',
+'X1z2iNks',
+'896eaGrU',
+'u7UGJTPC',
+'68sut2wo',
+'6YApSBMD',
+'NAxxkWcZ',
+'H9VPxE9i',
+'J7I9vA1c',
+'31285NNA',
+'JS7JvN36',
+'ZWt31tP7',
+'FTHGdtNn',
+'sF1W4e5J',
+'hXk0wLBQ',
+'kzFUAUdA',
+'C3Xy2CP6',
+'LZ9Vjbui',
+'6LDBYtBz',
+'WDCkzv3U',
+'7ImExMoO',
+'PriNuLfe',
+'gGFcoajs',
+'1CEFqe2I',
+'0WTrRzgs',
+'CEZJ62Wr',
+'55MMuQCR',
+'ZKzgdOxd',
+'6ec14KOi',
+'TpR2pZ0D',
+'Wi6an9Zn',
+'p4ws0cVG',
+'yqy2Nwoe',
+'MfUMmb58',
+'9KfPoWPC',
+'SseFFnYZ',
+'UuHack5q',
+'SzjGt4vL',
+'CAUJARjJ',
+'wPs0pck3',
+'FW8KSaUr',
+'CBv6IWyG',
+'14Ugfqfy',
+'aUPZyx7V',
+'dSSrIwEA',
+'mqgXVSGA',
+'NzJpUSo9',
+'lU3Yx4Iw',
+'DUNYmQAi',
+'Zfyl1Yte'
+)

# 2022-08-23 14:05:24.901101
+\e

# 2022-08-23 14:06:04.812332
+select rand_id, phone, address_1, address_2, preferred_name, name, f_name, birthdate from profiles where rand_id in ('Wjx2Zluo',
+'mWknoiaD',
+'4l7XEfGU',
+'X1z2iNks',
+'896eaGrU',
+'u7UGJTPC',
+'68sut2wo',
+'6YApSBMD',
+'NAxxkWcZ',
+'H9VPxE9i',
+'J7I9vA1c',
+'31285NNA',
+'JS7JvN36',
+'ZWt31tP7',
+'FTHGdtNn',
+'sF1W4e5J',
+'hXk0wLBQ',
+'kzFUAUdA',
+'C3Xy2CP6',
+'LZ9Vjbui',
+'6LDBYtBz',
+'WDCkzv3U',
+'7ImExMoO',
+'PriNuLfe',
+'gGFcoajs',
+'1CEFqe2I',
+'0WTrRzgs',
+'CEZJ62Wr',
+'55MMuQCR',
+'ZKzgdOxd',
+'6ec14KOi',
+'TpR2pZ0D',
+'Wi6an9Zn',
+'p4ws0cVG',
+'yqy2Nwoe',
+'MfUMmb58',
+'9KfPoWPC',
+'SseFFnYZ',
+'UuHack5q',
+'SzjGt4vL',
+'CAUJARjJ',
+'wPs0pck3',
+'FW8KSaUr',
+'CBv6IWyG',
+'14Ugfqfy',
+'aUPZyx7V',
+'dSSrIwEA',
+'mqgXVSGA',
+'NzJpUSo9',
+'lU3Yx4Iw',
+'DUNYmQAi',
+'Zfyl1Yte'
+)
+
+

# 2022-08-23 14:06:23.738329
+select count(*) from profiles
+
+;

# 2022-08-23 14:06:42.668377
+select count(*) from profiles where name ilike '%' || f_name->>'first' || '%';

# 2022-08-23 14:07:02.988006
+select count(*) from profiles where name ilike f_name->>'first';

# 2022-08-23 14:07:09.533015
+select count(*) from profiles where name ilike f_name->>'first' || 'fjdkalfjda';

# 2022-08-23 14:07:13.134317
+select count(*) from profiles where name ilike f_name->>'first' || '%';

# 2022-08-23 14:07:20.506715
+select count(*) from profiles where name ilike ('%' || f_name->>'first' || '%');

# 2022-08-23 14:07:28.293602
+select count(*) from profiles where name ilike ('fdjakl%' || f_name->>'first' || '%');

# 2022-08-23 14:07:31.086478
+select count(*) from profiles where name ilike ('fdjakl' || f_name->>'first' || '%');

# 2022-08-23 14:07:40.232408
+select count(*) from profiles where name ilike (f_name->>'first' || '%');

# 2022-08-23 14:07:46.028853
+select count(*) from profiles
+
+;

# 2022-08-23 14:11:20.182893
+\q

# 2022-08-23 14:11:28.521533
+\d rand_ids_in_use

# 2022-08-23 14:11:35.558013
+select count(*) from rand_ids_in_use;

# 2022-08-23 14:15:08.984200
+select rand_id, phone, address_1, address_2, preferred_name, name, f_name, birthdate from profiles where rand_id in ('Wjx2Zluo',
+'mWknoiaD',
+'4l7XEfGU',
+'X1z2iNks',
+'896eaGrU',
+'u7UGJTPC',
+'68sut2wo',
+'6YApSBMD',
+'NAxxkWcZ',
+'H9VPxE9i',
+'J7I9vA1c',
+'31285NNA',
+'JS7JvN36',
+'ZWt31tP7',
+'FTHGdtNn',
+'sF1W4e5J',
+'hXk0wLBQ',
+'kzFUAUdA',
+'C3Xy2CP6',
+'LZ9Vjbui',
+'6LDBYtBz',
+'WDCkzv3U',
+'7ImExMoO',
+'PriNuLfe',
+'gGFcoajs',
+'1CEFqe2I',
+'0WTrRzgs',
+'CEZJ62Wr',
+'55MMuQCR',
+'ZKzgdOxd',
+'6ec14KOi',
+'TpR2pZ0D',
+'Wi6an9Zn',
+'p4ws0cVG',
+'yqy2Nwoe',
+'MfUMmb58',
+'9KfPoWPC',
+'SseFFnYZ',
+'UuHack5q',
+'SzjGt4vL',
+'CAUJARjJ',
+'wPs0pck3',
+'FW8KSaUr',
+'CBv6IWyG',
+'14Ugfqfy',
+'aUPZyx7V',
+'dSSrIwEA',
+'mqgXVSGA',
+'NzJpUSo9',
+'lU3Yx4Iw',
+'DUNYmQAi',
+'Zfyl1Yte'
+)
+
+
+
+

# 2022-08-23 14:16:09.475922
+select count(*) from estate_charitable_gifts ecg1 join estate_charitable_gifts ecg2 on ecg1.message = ecg2.rand_id;

# 2022-08-23 14:16:25.584379
+select count(distinct ecg1.message) from estate_charitable_gifts ecg1 join estate_charitable_gifts ecg2 on ecg1.message = ecg2.rand_id;

# 2022-08-23 14:16:41.966882
+select count(*) from estate_charitable_gifts ecg1 join estate_charitable_gifts ecg2 on ecg1.message = ecg2.rand_id;

# 2022-08-23 14:16:52.232111
+select ecg1.rand_id from estate_charitable_gifts ecg1 join estate_charitable_gifts ecg2 on ecg1.message = ecg2.rand_id;

# 2022-08-23 14:18:17.899712
+select * from estate_charitable_gifts where rand_id in ('WiPHy1Xc',
+'Cyjb5UXZ',
+'XIbunDqq',
+'c2AkqLWy',
+'dhWAzqm0',
+'OnqDm1ca',
+'3vb5pYgI',
+'Mb0w7Ciz',
+'sbgYGBex',
+'gUoSXnJY',
+'frXpVWVh',
+'dvUnm9pG',
+'eqmFgKwn',
+'Z6p9D8KM',
+'p29Ep2t9',
+'cis748PH',
+'VSfM6JWs',
+'vLc4m51X',
+'XhzTf81u',
+'1wGdYag4',
+'it8DVNBU',
+'B1zySNm1',
+'0XAYY6aR',
+'DjZiNPQk',
+'D5Y3VBk9',
+'S8ONupNJ',
+'zXbi269w',
+'8feZLomg',
+'VztmYm7X',
+'FbfgftXa',
+'CZrK0WHK',
+'wZo4NYYw',
+'9XNUSEwO',
+'EwBQX01t',
+'fdPlid11',
+'vbiph3V3',
+'UrV5XHR6',
+'qRCGFdFl',
+'k5QsVvPm',
+'kdrGBvhp',
+'tlh6uS9m',
+'k8y9UlE3',
+'b4rRTyUC',
+'Zd7PRg3M',
+'jBIZ6VLu',
+'WYEaTqdg',
+'2CsPeAFx',
+'8ZjyGzAW',
+'LwV0TNHP',
+'R95kS8Op',
+'DHLzprFY')
+

# 2022-08-23 14:18:27.012818
+\e

# 2022-08-23 14:18:35.931860
+select rand_id, message from estate_charitable_gifts where rand_id in ('WiPHy1Xc',
+'Cyjb5UXZ',
+'XIbunDqq',
+'c2AkqLWy',
+'dhWAzqm0',
+'OnqDm1ca',
+'3vb5pYgI',
+'Mb0w7Ciz',
+'sbgYGBex',
+'gUoSXnJY',
+'frXpVWVh',
+'dvUnm9pG',
+'eqmFgKwn',
+'Z6p9D8KM',
+'p29Ep2t9',
+'cis748PH',
+'VSfM6JWs',
+'vLc4m51X',
+'XhzTf81u',
+'1wGdYag4',
+'it8DVNBU',
+'B1zySNm1',
+'0XAYY6aR',
+'DjZiNPQk',
+'D5Y3VBk9',
+'S8ONupNJ',
+'zXbi269w',
+'8feZLomg',
+'VztmYm7X',
+'FbfgftXa',
+'CZrK0WHK',
+'wZo4NYYw',
+'9XNUSEwO',
+'EwBQX01t',
+'fdPlid11',
+'vbiph3V3',
+'UrV5XHR6',
+'qRCGFdFl',
+'k5QsVvPm',
+'kdrGBvhp',
+'tlh6uS9m',
+'k8y9UlE3',
+'b4rRTyUC',
+'Zd7PRg3M',
+'jBIZ6VLu',
+'WYEaTqdg',
+'2CsPeAFx',
+'8ZjyGzAW',
+'LwV0TNHP',
+'R95kS8Op',
+'DHLzprFY')
+
+

# 2022-08-23 14:19:06.541646
+\q

# 2022-08-23 14:20:57.163060
+select rand_id, message from estate_charitable_gifts where rand_id in ('WiPHy1Xc',
+'Cyjb5UXZ',
+'XIbunDqq',
+'c2AkqLWy',
+'dhWAzqm0',
+'OnqDm1ca',
+'3vb5pYgI',
+'Mb0w7Ciz',
+'sbgYGBex',
+'gUoSXnJY',
+'frXpVWVh',
+'dvUnm9pG',
+'eqmFgKwn',
+'Z6p9D8KM',
+'p29Ep2t9',
+'cis748PH',
+'VSfM6JWs',
+'vLc4m51X',
+'XhzTf81u',
+'1wGdYag4',
+'it8DVNBU',
+'B1zySNm1',
+'0XAYY6aR',
+'DjZiNPQk',
+'D5Y3VBk9',
+'S8ONupNJ',
+'zXbi269w',
+'8feZLomg',
+'VztmYm7X',
+'FbfgftXa',
+'CZrK0WHK',
+'wZo4NYYw',
+'9XNUSEwO',
+'EwBQX01t',
+'fdPlid11',
+'vbiph3V3',
+'UrV5XHR6',
+'qRCGFdFl',
+'k5QsVvPm',
+'kdrGBvhp',
+'tlh6uS9m',
+'k8y9UlE3',
+'b4rRTyUC',
+'Zd7PRg3M',
+'jBIZ6VLu',
+'WYEaTqdg',
+'2CsPeAFx',
+'8ZjyGzAW',
+'LwV0TNHP',
+'R95kS8Op',
+'DHLzprFY')
+
+
+
+
+

# 2022-08-23 14:21:15.943938
+select rand_id, phone, address_1, address_2, preferred_name, name, f_name, birthdate from profiles where rand_id in ('Wjx2Zluo',
+'mWknoiaD',
+'4l7XEfGU',
+'X1z2iNks',
+'896eaGrU',
+'u7UGJTPC',
+'68sut2wo',
+'6YApSBMD',
+'NAxxkWcZ',
+'H9VPxE9i',
+'J7I9vA1c',
+'31285NNA',
+'JS7JvN36',
+'ZWt31tP7',
+'FTHGdtNn',
+'sF1W4e5J',
+'hXk0wLBQ',
+'kzFUAUdA',
+'C3Xy2CP6',
+'LZ9Vjbui',
+'6LDBYtBz',
+'WDCkzv3U',
+'7ImExMoO',
+'PriNuLfe',
+'gGFcoajs',
+'1CEFqe2I',
+'0WTrRzgs',
+'CEZJ62Wr',
+'55MMuQCR',
+'ZKzgdOxd',
+'6ec14KOi',
+'TpR2pZ0D',
+'Wi6an9Zn',
+'p4ws0cVG',
+'yqy2Nwoe',
+'MfUMmb58',
+'9KfPoWPC',
+'SseFFnYZ',
+'UuHack5q',
+'SzjGt4vL',
+'CAUJARjJ',
+'wPs0pck3',
+'FW8KSaUr',
+'CBv6IWyG',
+'14Ugfqfy',
+'aUPZyx7V',
+'dSSrIwEA',
+'mqgXVSGA',
+'NzJpUSo9',
+'lU3Yx4Iw',
+'DUNYmQAi',
+'Zfyl1Yte'
+)
+
+
+
+

# 2022-08-23 14:22:33.941761
+select trunc(random() * 11 + 1)::integer;

# 2022-08-23 14:23:01.167340
+select trunc(random() * 12 + 1)::integer;

# 2022-08-23 14:23:33.327964
+\c freewill_dev_backup_08_23_22

# 2022-08-23 14:23:42.930865
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_08_23_22;

# 2022-08-23 14:24:26.605936
+\c freewill_dev

# 2022-08-23 14:24:33.421772
+select rand_id, phone, address_1, address_2, preferred_name, name, f_name, birthdate from profiles where rand_id in ('Wjx2Zluo',
+'mWknoiaD',
+'4l7XEfGU',
+'X1z2iNks',
+'896eaGrU',
+'u7UGJTPC',
+'68sut2wo',
+'6YApSBMD',
+'NAxxkWcZ',
+'H9VPxE9i',
+'J7I9vA1c',
+'31285NNA',
+'JS7JvN36',
+'ZWt31tP7',
+'FTHGdtNn',
+'sF1W4e5J',
+'hXk0wLBQ',
+'kzFUAUdA',
+'C3Xy2CP6',
+'LZ9Vjbui',
+'6LDBYtBz',
+'WDCkzv3U',
+'7ImExMoO',
+'PriNuLfe',
+'gGFcoajs',
+'1CEFqe2I',
+'0WTrRzgs',
+'CEZJ62Wr',
+'55MMuQCR',
+'ZKzgdOxd',
+'6ec14KOi',
+'TpR2pZ0D',
+'Wi6an9Zn',
+'p4ws0cVG',
+'yqy2Nwoe',
+'MfUMmb58',
+'9KfPoWPC',
+'SseFFnYZ',
+'UuHack5q',
+'SzjGt4vL',
+'CAUJARjJ',
+'wPs0pck3',
+'FW8KSaUr',
+'CBv6IWyG',
+'14Ugfqfy',
+'aUPZyx7V',
+'dSSrIwEA',
+'mqgXVSGA',
+'NzJpUSo9',
+'lU3Yx4Iw',
+
+
+'DUNYmQAi',
+'Zfyl1Yte'
+)
+
+
+
+

# 2022-08-23 14:24:48.478715
+select rand_id, phone, address_1, address_2, preferred_name, name, f_name, birthdate from profiles where rand_id in ('Wjx2Zluo',
+'mWknoiaD',
+'4l7XEfGU',
+'X1z2iNks',
+'896eaGrU',
+'u7UGJTPC',
+'68sut2wo',
+'6YApSBMD',
+'NAxxkWcZ',
+'H9VPxE9i',
+'J7I9vA1c',
+'31285NNA',
+'JS7JvN36',
+'ZWt31tP7',
+'FTHGdtNn',
+'sF1W4e5J',
+'hXk0wLBQ',
+'kzFUAUdA',
+'C3Xy2CP6',
+'LZ9Vjbui',
+'6LDBYtBz',
+'WDCkzv3U',
+'7ImExMoO',
+'PriNuLfe',
+'gGFcoajs',
+'1CEFqe2I',
+'0WTrRzgs',
+'CEZJ62Wr',
+'55MMuQCR',
+'ZKzgdOxd',
+'6ec14KOi',
+'TpR2pZ0D',
+'Wi6an9Zn',
+'p4ws0cVG',
+'yqy2Nwoe',
+'MfUMmb58',
+'9KfPoWPC',
+'SseFFnYZ',
+'UuHack5q',
+'SzjGt4vL',
+'CAUJARjJ',
+'wPs0pck3',
+'FW8KSaUr',
+'CBv6IWyG',
+'14Ugfqfy',
+'aUPZyx7V',
+'dSSrIwEA',
+'mqgXVSGA',
+'NzJpUSo9',
+'lU3Yx4Iw',
+
+
+'DUNYmQAi',
+'Zfyl1Yte'
+)
+
+
+
+
+

# 2022-08-23 14:43:58.459047
+select trunc(0.000000000001 * 12 + 1)::integer;

# 2022-08-23 14:44:04.890352
+select trunc(0.10000 * 12 + 1)::integer;

# 2022-08-23 14:44:07.721445
+select trunc(0.20000 * 12 + 1)::integer;

# 2022-08-23 14:44:10.217867
+select trunc(0.90000 * 12 + 1)::integer;

# 2022-08-23 14:44:14.339687
+select trunc(0.99000 * 12 + 1)::integer;

# 2022-08-23 14:44:19.214847
+select trunc(0.999999999999999999 * 12 + 1)::integer;

# 2022-08-23 14:44:24.322821
+select trunc(0.999999999999999999 * 28 + 1)::integer;

# 2022-08-23 14:44:47.619827
+select trunc(0.000000000000000001 * 2989 + 12)::integer;

# 2022-08-23 14:44:53.640054
+select trunc(0.999999999999999999999999999 * 2989 + 12)::integer;

# 2022-08-24 10:41:48.324572
+\d profiles

# 2022-08-24 10:42:33.667274
+\q

# 2022-08-24 10:44:22.217611
+select count(*) from profiles where birthdate not ilike '\d+\d+/\d+/';

# 2022-08-24 10:44:27.885939
+select count(*) from profiles where birthdate ilike '\d+\d+/\d+/';

# 2022-08-24 10:45:09.311164
+select count(*) from profiles where birthdate similar '\d+\d+/\d+/';

# 2022-08-24 10:45:13.327977
+select count(*) from profiles where birthdate similar to '\d+\d+/\d+/';

# 2022-08-24 10:45:38.740926
+select count(*) from profiles where birthdate ~ '\d+\d+/\d+/';

# 2022-08-24 10:45:42.479341
+select count(*) from profiles where birthdate ~ '\d+\d+/\d+/fdjaklfjdalk';

# 2022-08-24 10:45:48.432246
+select count(*) from profiles where birthdate ~ '\d+\d+/\d+';

# 2022-08-24 10:45:59.081362
+select count(*) from profiles where birthdate ~ '\d+\/\d+\/\d+';

# 2022-08-24 10:46:16.232369
+select count(*) from profiles where birthdate ~ '\d\d\/\d\d\/\d\d\d\d';

# 2022-08-24 10:46:28.519422
+select count(*) from profiles where birthdate !~ '\d\d\/\d\d\/\d\d\d\d';

# 2022-08-24 10:46:35.527129
+select birthdate from profiles where birthdate !~ '\d\d\/\d\d\/\d\d\d\d';

# 2022-08-24 10:46:46.217750
+select birthdate from profiles where birthdate !~ '\d\d?\/\d\d?\/\d\d\d\d';

# 2022-08-24 10:46:53.815774
+select birthdate from profiles where birthdate !~ '\d(\d)?\/\d(\d)?\/\d\d\d\d';

# 2022-08-24 10:46:59.735687
+select birthdate from profiles where birthdate ~ '\d(\d)?\/\d(\d)?\/\d\d\d\d';

# 2022-08-24 10:47:08.824658
+select count(*) from profiles where birthdate ~ '\d(\d)?\/\d(\d)?\/\d\d\d\d';

# 2022-08-24 10:47:15.759973
+select count(*) from profiles;

# 2022-08-24 10:47:17.633418
+select count(*) from profiles where birthdate ~ '\d(\d)?\/\d(\d)?\/\d\d\d\d';

# 2022-08-24 10:47:21.752709
+select count(*) from profiles where birthdate !~ '\d(\d)?\/\d(\d)?\/\d\d\d\d';

# 2022-08-24 10:47:48.145896
+select count(*) from profiles where rand_id not in (select rand_id from profiles where birthdate ~ '\d(\d)?\/\d(\d)?\/\d\d\d\d');

# 2022-08-24 10:51:08.960307
+select birthdate from profiles where rand_id not in (select rand_id from profiles where birthdate ~ '\d(\d)?\/\d(\d)?\/\d\d\d\d') limit 10;

# 2022-08-24 10:51:17.756271
+select birthdate from profiles where rand_id not in (select rand_id from profiles where birthdate ~ '\d(\d)?\/\d(\d)?\/\d\d\d\d') limit 10 offset 10;

# 2022-08-24 10:51:34.964424
+select count(*) from profiles where birthdate !~ '\d(\d)?\/\d(\d)?\/\d\d\d\d' and birthdate is not null;

# 2022-08-24 10:51:46.752167
+select count(*) from profiles where birthdate ~ '\d(\d)?\/\d(\d)?\/\d\d\d\d' or birthdate is null;

# 2022-08-24 10:51:51.866389
+select count(*) from profiles;

# 2022-08-24 10:52:37.384135
+select substring(nullo, '\d+/\d+/(\d+)') from profiles where rand_id = 'BZ3urnTo';

# 2022-08-24 10:52:40.140261
+select substring(null, '\d+/\d+/(\d+)') from profiles where rand_id = 'BZ3urnTo';

# 2022-08-24 10:53:20.390055
+select coalesce(substring(null, '\d+/\d+/(\d+)'), '1970') from profiles where rand_id = 'BZ3urnTo';

# 2022-08-24 10:53:27.388300
+select coalesce(substring(birthdate, '\d+/\d+/(\d+)'), '1970') from profiles where rand_id = 'BZ3urnTo';

# 2022-08-24 10:53:55.670703
+select coalesce(substring('fjdkalfjhdaksl', '\d+/\d+/(\d+)'), '1970') from profiles where rand_id = 'BZ3urnTo';

# 2022-08-24 10:54:05.924085
+\q

# 2022-08-24 10:54:22.886856
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_08_23_22;

# 2022-08-24 10:54:29.099638
+\c freewill_dev_backup_08_23_22

# 2022-08-24 10:54:30.262876
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_08_23_22;

# 2022-08-24 10:54:58.670288
+create database freewill_dev with template freewill_dev_backup_08_23_22;

# 2022-08-24 10:55:15.237396
+\c freewill_dev

# 2022-08-24 10:55:52.341090
+select rand_id, phone, address_1, address_2, preferred_name, name, f_name, birthdate from profiles where rand_id in ('Wjx2Zluo',
+'mWknoiaD',
+'4l7XEfGU',
+'X1z2iNks',
+'896eaGrU',
+'u7UGJTPC',
+'68sut2wo',
+'6YApSBMD',
+'NAxxkWcZ',
+'H9VPxE9i',
+'J7I9vA1c',
+'31285NNA',
+'JS7JvN36',
+'ZWt31tP7',
+'FTHGdtNn',
+'sF1W4e5J',
+'hXk0wLBQ',
+'kzFUAUdA',
+'C3Xy2CP6',
+'LZ9Vjbui',
+'6LDBYtBz',
+'WDCkzv3U',
+'7ImExMoO',
+'PriNuLfe',
+'gGFcoajs',
+'1CEFqe2I',
+'0WTrRzgs',
+'CEZJ62Wr',
+'55MMuQCR',
+'ZKzgdOxd',
+'6ec14KOi',
+'TpR2pZ0D',
+'Wi6an9Zn',
+'p4ws0cVG',
+'yqy2Nwoe',
+'MfUMmb58',
+'9KfPoWPC',
+'SseFFnYZ',
+'UuHack5q',
+'SzjGt4vL',
+'CAUJARjJ',
+'wPs0pck3',
+'FW8KSaUr',
+'CBv6IWyG',
+'14Ugfqfy',
+'aUPZyx7V',
+'dSSrIwEA',
+'mqgXVSGA',
+'NzJpUSo9',
+'lU3Yx4Iw',
+
+
+'DUNYmQAi',
+
+
+'Zfyl1Yte'
+)
+
+
+
+
+

# 2022-08-24 12:54:24.477268
+select rand_id from organizations where display_name ilike '%ACME%';

# 2022-08-24 12:56:59.260041
+\q

# 2022-08-24 12:58:58.665624
+select rand_id, phone, address_1, address_2, preferred_name, name, f_name, birthdate from profiles where rand_id in ('Wjx2Zluo',
+'mWknoiaD',
+'4l7XEfGU',
+'X1z2iNks',
+'896eaGrU',
+'u7UGJTPC',
+'68sut2wo',
+'6YApSBMD',
+'NAxxkWcZ',
+'H9VPxE9i',
+'J7I9vA1c',
+'31285NNA',
+'JS7JvN36',
+'ZWt31tP7',
+'FTHGdtNn',
+'sF1W4e5J',
+'hXk0wLBQ',
+'kzFUAUdA',
+'C3Xy2CP6',
+'LZ9Vjbui',
+'6LDBYtBz',
+'WDCkzv3U',
+'7ImExMoO',
+'PriNuLfe',
+'gGFcoajs',
+'1CEFqe2I',
+'0WTrRzgs',
+'CEZJ62Wr',
+'55MMuQCR',
+'ZKzgdOxd',
+'6ec14KOi',
+'TpR2pZ0D',
+'Wi6an9Zn',
+'p4ws0cVG',
+'yqy2Nwoe',
+'MfUMmb58',
+'9KfPoWPC',
+'SseFFnYZ',
+'UuHack5q',
+'SzjGt4vL',
+'CAUJARjJ',
+'wPs0pck3',
+'FW8KSaUr',
+'CBv6IWyG',
+'14Ugfqfy',
+'aUPZyx7V',
+'dSSrIwEA',
+'mqgXVSGA',
+'NzJpUSo9',
+'lU3Yx4Iw',
+
+
+'DUNYmQAi',
+
+
+'Zfyl1Yte'
+)
+
+
+
+
+
+
+

# 2022-08-24 12:59:37.729671
+select count(*) from profiles where f_name->>'first' in (select profile_id from estate_charitable_gifts);

# 2022-08-24 12:59:47.763301
+select count(*) from estate_charitable_gifts ecg1 join estate_charitable_gifts ecg2 on ecg1.message = ecg2.rand_id;

# 2022-08-24 13:12:44.134004
+select * from organizations where display_name ilike '%acme%';

# 2022-08-24 13:21:39.226599
+select legal_name from organizations limit 10;

# 2022-08-24 13:23:01.126592
+select rand_id from organizations where display_name ilike '%ACME%';

# 2022-08-24 14:03:52.255063
+select * from profiles where f_name->>'first' = 'Mpthkjl5';

# 2022-08-24 14:04:25.265467
+\q

# 2022-08-24 14:04:32.617470
+select * from profiles where f_name->>'first' = 'Mpthkjl5';

# 2022-08-24 14:04:42.449156
+select * from profiles where f_name->>'first' = 'Ybq8blhb';

# 2022-08-24 14:05:22.918819
+select * from profiles where f_name->>'first' = 'Helen' and f_name->>'last' = 'Lynch';

# 2022-08-24 14:05:30.851893
+select count(&*) from profiles where f_name->>'first' = 'Helen' and f_name->>'last' = 'Lynch';

# 2022-08-24 14:05:33.269000
+select count(*) from profiles where f_name->>'first' = 'Helen' and f_name->>'last' = 'Lynch';

# 2022-08-24 14:05:53.051434
+select count(*) from profiles where f_name->>'first' = '76qaccsl';

# 2022-08-24 14:05:57.102124
+select count(*) from profiles where f_name->>'first' = '76qaccs1';

# 2022-08-24 14:06:26.919052
+select count(*) from profiles where f_name->>'first' = '005nshgq';

# 2022-08-24 14:06:38.664762
+select count(*) from profiles where name ilike '%005nshgq%';

# 2022-08-24 14:06:46.552295
+\q

# 2022-08-24 14:06:53.362629
+select count(*) from profiles where name ilike '%005nshgq%';

# 2022-08-26 11:43:18.187481
+\d profiles

# 2022-08-26 12:38:37.596871
+\d bad_words

# 2022-08-26 12:38:43.321634
+select * from bad_words
+;

# 2022-08-26 12:38:50.690326
+\d+ bad_words

# 2022-08-26 13:02:45.146640
+select * from estate_plans limit 1;

# 2022-08-26 13:08:58.037981
+select * from estate_charitable_gifts limit 1;

# 2022-08-26 13:09:06.327403
+select * from estate_plans limit 1;

# 2022-08-26 13:10:40.615364
+select * from estate_validity_reasons limit 10;

# 2022-08-26 13:10:50.288790
+\d estate_validity_reasons

# 2022-08-26 13:13:43.939059
+select count(*) from estate_validity_reasons where reason ilike 'address%';

# 2022-08-26 13:14:02.937847
+select reason, count(*) from estate_validity_reasons where reason ilike 'address%' group by reason;

# 2022-08-26 13:15:27.285768
+select reason, count(*) from estate_validity_reasons where reason ilike '%_VULGAR' group by reason;

# 2022-08-26 13:19:30.768815
+create database freewill_dev_backup_08_26_22 with template freewill_dev;

# 2022-08-26 13:20:11.862110
+\d bad_words

# 2022-08-26 13:20:16.170123
+select * from bad_words;

# 2022-08-26 13:20:39.114066
+select reason, count(*) from estate_validity_reasons where reason ilike '%_VULGAR' group by reason;

# 2022-08-26 13:20:58.345820
+select reason, count(*) from estate_validity_reasons where reason ilike '%vulgar%' group by reason;

# 2022-08-26 13:58:03.850952
+select * from estate_plans limit 1;

# 2022-08-26 13:58:10.609090
+select meta_info from estate_plans limit 100;

# 2022-08-26 13:58:32.226386
+select * from estate_plans where is_fake is not null;

# 2022-08-26 13:58:38.141238
+select * from estate_plans where is_fake = true;

# 2022-08-26 15:03:23.670260
+\q

# 2022-08-26 15:03:47.143912
+select * from users where email ilike '%riley%freewill%';

# 2022-08-26 15:14:16.566146
+select reason, count(*) from estate_validity_reasons where reason ilike '%vulgar%' group by reason;

# 2022-08-29 10:46:43.012631
+\c freewill_dev_backup_08_26_22

# 2022-08-29 10:46:49.775543
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_08_26_22;

# 2022-08-29 10:47:05.421728
+\c freewill_dev

# 2022-08-29 11:08:46.757404
+\q

# 2022-08-29 11:10:04.980094
+\c magneto

# 2022-08-29 11:14:31.895101
+select * from _schema_history limit 10;

# 2022-08-29 11:14:47.619578
+select * from _schema_history order by installed_on desc limit 10;

# 2022-08-29 11:15:30.995364
+select description from _schema_history order by installed_on desc limit 10;

# 2022-08-29 12:44:13.074669
+select reason, count(*) from estate_validity_reasons group by reason;

# 2022-08-29 12:54:34.496453
+\q

# 2022-08-29 12:54:50.952130
+select count(*) from estate_validity_reasons where reason ilike '%funeral%vulgar%';

# 2022-08-29 13:54:28.720903
+\q

# 2022-08-29 13:54:35.626197
+\c freewill_dev_backup_08_26_22

# 2022-08-29 13:54:41.110000
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_08_26_22;

# 2022-08-29 13:54:53.214222
+\c freewill_dev

# 2022-08-29 13:55:00.114295
+\d bad_words

# 2022-09-13 13:14:41.055414
+select * from estate_validity_reasons limit 10;

# 2022-09-13 13:14:53.883168
+select * from estate_validity_reasons limit 1 order by created_at;

# 2022-09-13 13:14:55.475538
+select * from estate_validity_reasons limit 1 order by created_at desc;

# 2022-09-13 13:15:00.371191
+select * from estate_validity_reasons order by created_at desc limit 1;

# 2022-09-13 13:15:04.591553
+select * from estate_validity_reasons order by created_at desc limit 10;

# 2022-09-13 13:15:35.914166
+select * from estate_plans where rand_id = 'HMn0BwzO';

# 2022-09-13 13:16:00.099976
+select * from estate_charitable_gifts where estate_id = 'HMn0BwzO';

# 2022-09-13 13:17:20.023055
+select * from estate_beneficiaries where estate_id = 'HMn0BwzO';

# 2022-09-13 13:17:30.176839
+select level from estate_beneficiaries where estate_id = 'HMn0BwzO';

# 2022-09-13 13:17:39.022171
+select * from estate_plans where rand_id = 'HMn0BwzO';

# 2022-09-15 11:47:09.015858
+\q

# 2022-09-20 13:39:38.017702
+select * from estate_charitable_gifts limit 1;

# 2022-09-20 13:39:51.239075
+select * from estate_plans limit 1;

# 2022-09-20 14:11:59.099006
+\d estate_plans

# 2022-09-20 14:18:26.132095
+select * from estate_plans limit 1;

# 2022-09-21 14:24:12.474383
+select * from estate_validity_reasons limit 1;

# 2022-09-21 14:24:33.171706
+select * from estate_validity_reasons where estate_id in (select rand_id from estate_plans limit 1);

# 2022-09-21 14:24:53.544358
+select * from estate_validity_reasons limit 1;

# 2022-09-21 14:25:12.617111
+select * from estate_validity_reasons where estate_id = '4eD1YWYZ';;

# 2022-09-27 11:50:38.106234
+\d estate_charitable_gift_events

# 2022-09-27 11:50:43.431112
+select * from estate_charitable_gift_events limit 1;

# 2022-09-27 11:50:55.975214
+select distinct created_source from estate_charitable_gift_events;

# 2022-09-27 11:51:02.171988
+select * from estate_charitable_gift_events limit 1;

# 2022-09-27 11:51:10.571812
+\d estate_charitable_gift_events

# 2022-09-27 11:51:18.484495
+select * from estate_charitable_gift_events limit 1;

# 2022-09-27 11:51:28.356685
+\d estate_charitable_gift_events

# 2022-09-27 11:53:47.268150
+select distinct event_type from estate_charitable_gift_events;

# 2022-09-27 12:28:54.677748
+select * from estate_plans order by updated_at limit 1;

# 2022-09-27 12:28:58.875538
+select * from estate_plans order by updated_at desc limit 1;

# 2022-09-27 12:40:33.922486
+CREATE FUNCTION fn_backfill_people_profile_id() RETURNS void
+    LANGUAGE plpgsql AS $$
+BEGIN
+    WHILE (
+        -- get a running count
+        SELECT 1
+        FROM people p
+                 JOIN wills w ON p.will_id = w.rand_id
+        WHERE
+            -- filter out fake wills
+            w.is_fake = false AND
+            p.profile_id ISNULL
+        LIMIT 1
+    ) LOOP
+            WITH TEMP_SELECTION AS (
+                SELECT
+                    -- find each people record
+                    p.rand_id AS people_id,
+                    -- and its associated profiles record
+                    w.profile_id AS profile_id
+                FROM public.people AS p
+                         LEFT JOIN public.wills as w
+                                   ON p.will_id = w.rand_id
+                WHERE
+                    w.is_fake = false AND
+                    w.profile_id IS NOT NULL AND
+                    p.profile_id ISNULL
+                  -- chunks of 100K
+                LIMIT 100000
+                    FOR UPDATE
+            )
+            UPDATE public.people AS ppl
+            -- set the foreign key value
+            SET profile_id = TEMP_SELECTION.profile_id
+            FROM TEMP_SELECTION
+            WHERE
+                ppl.profile_id ISNULL AND
+                -- on the matching people record
+                ppl.rand_id = TEMP_SELECTION.people_id;
+        END LOOP;
+END $$;
+

# 2022-09-27 12:40:35.176621
+\e

# 2022-09-27 12:41:12.067013
+CREATE FUNCTION fn_riley() RETURNS text
+    LANGUAGE plpgsql AS $$
+BEGIN
+  return 'blah blah blah';
+END $$;

# 2022-09-27 13:03:06.296577
+\e

# 2022-09-27 13:03:21.962841
+CREATE FUNCTION fn_riley() RETURNS integer
+    LANGUAGE plpgsql AS $$
+BEGIN
+  return 2;
+END $$;

# 2022-09-27 13:03:39.238397
+\e

# 2022-09-27 13:04:00.761093
+CREATE OR REPLACE FUNCTION fn_riley() RETURNS integer
+    LANGUAGE plpgsql AS $$
+BEGIN
+  return 2;
+END $$;

# 2022-09-27 13:04:05.068498
+\e

# 2022-09-27 13:04:10.321917
+CREATE OR REPLACE FUNCTION fn_riley() RETURNS integer
+    LANGUAGE plpgsql AS $$
+BEGIN
+  return 2;
+END $$;

# 2022-09-27 13:04:14.896848
+drop function fn_riley();

# 2022-09-27 13:04:17.737406
+CREATE OR REPLACE FUNCTION fn_riley() RETURNS integer
+    LANGUAGE plpgsql AS $$
+BEGIN
+  return 2;
+END $$;

# 2022-09-27 13:05:52.965890
+\e

# 2022-09-27 13:07:20.010512
+CREATE OR REPLACE FUNCTION fn_riley(estate_id text) RETURNS integer
+    LANGUAGE plpgsql AS $$
+BEGIN
+  return char_length(estate_id);
+END $$;

# 2022-09-27 13:40:30.002359
+\e

# 2022-09-27 13:40:37.234360
+CREATE OR REPLACE FUNCTION fn_riley(estate_id text) RETURNS integer
+    LANGUAGE plpgsql AS $$
+BEGIN
+  return 2;
+END $$;

# 2022-09-27 15:16:42.378516
+\d estate_plans

# 2022-09-27 15:18:59.862739
+select has_pets from estate_plans limit 10;

# 2022-09-28 11:51:19.848453
+select * from users limit 1;

# 2022-10-03 10:34:07.943188
+select * from estate_charitable_gift_events limit 1;

# 2022-10-03 10:35:59.271761
+select created_source, count(*) from estate_charitable_gift_events group by created_source;

# 2022-10-03 10:36:09.860727
+select event_type, count(*) from estate_charitable_gift_events group by event_type;

# 2022-10-03 10:36:16.819182
+\q

# 2022-10-03 10:36:28.960833
+select event_type, count(*) from estate_charitable_gift_events group by event_type;

# 2022-10-03 10:36:33.427816
+select created_source, count(*) from estate_charitable_gift_events group by created_source;

# 2022-10-03 10:36:47.883243
+select event_type, count(*) from estate_charitable_gift_events group by event_type;

# 2022-10-03 10:37:17.315400
+select created_source, count(*) from estate_charitable_gift_events where event_type = 'gift_review_update' group by created_source;

# 2022-10-03 10:37:55.586516
+\q

# 2022-10-03 10:40:10.744353
+select fn_calculate_times_reviewed('ahjdkalfdsa')
+;

# 2022-10-03 10:40:25.480300
+\d estate_plans

# 2022-10-03 10:40:58.394431
+drop function fn_calculate_times_reviewed(estate_id integer);

# 2022-10-03 10:41:06.995545
+select fn_calculate_times_reviewed('ahjdkalfdsa')
+;

# 2022-10-03 10:41:29.481316
+select created_source, count(*) from estate_charitable_gift_events where event_type = 'gift_review_update' group by created_source;

# 2022-10-03 10:41:34.122777
+select event_type, count(*) from estate_charitable_gift_events group by event_type;

# 2022-10-03 10:43:04.784420
+\d estate_charitable_gift_events

# 2022-10-03 10:43:16.234316
+select fn_calculate_times_reviewed('ahjdkalfdsa')
+;

# 2022-10-03 10:43:18.313308
+select fn_calculate_times_reviewed('ahjdkalfdsa');

# 2022-10-03 10:43:49.656063
+\d estate_charitable_gift_events

# 2022-10-03 10:44:24.235491
+\d estate_charitable_gifts

# 2022-10-03 10:45:02.301141
+select fn_calculate_times_reviewed('ahjdkalfdsa');

# 2022-10-03 10:59:08.494639
+select * from estate_plans order by updated_at desc limit 1;

# 2022-10-03 10:59:46.080789
+select fn_calculate_times_reviewed('hwFMps2D');

# 2022-10-03 11:31:15.359259
+select * from estate_charitable_gift_events limit 10;

# 2022-10-03 11:31:25.955449
+\d estate_charitable_gift_events

# 2022-10-03 11:34:12.703699
+\d users

# 2022-10-03 11:35:18.883391
+create database freewill_dev_backup_10_03_22 with template freewill_dev;

# 2022-10-03 11:35:45.323017
+alter table estate_charitable_gift_events column created_by ;

# 2022-10-03 11:35:49.185413
+\e

# 2022-10-03 11:36:57.119484
+select count(*) from estate_charitable_gift_events where created_by is not in (select rand_id from users);

# 2022-10-03 11:37:01.230190
+select count(*) from estate_charitable_gift_events where created_by not in (select rand_id from users);

# 2022-10-03 11:38:10.543822
+alter table estate_charitable_gift_events column created_by character(8) references users(rand_id);

# 2022-10-03 11:38:16.789306
+\e

# 2022-10-03 11:39:10.627811
+select count(*) from estate_charitable_gift_events join users on users.rand_id = estate_charitable_gift_events.created_by;

# 2022-10-03 11:39:36.515987
+select counT(*) from estate_charitable_gift_events;

# 2022-10-03 11:39:49.065749
+select count(*) from estate_charitable_gift_events join users on users.rand_id = estate_charitable_gift_events.created_by where created_by is not null;

# 2022-10-03 11:39:54.985752
+select counT(*) from estate_charitable_gift_events where created_by is not null;

# 2022-10-03 11:40:16.192998
+select count(*) from estate_charitable_gift_events left join users on users.rand_id = estate_charitable_gift_events.created_by where users.rand_id is null;

# 2022-10-03 11:40:20.716887
+select * from estate_charitable_gift_events left join users on users.rand_id = estate_charitable_gift_events.created_by where users.rand_id is null;

# 2022-10-03 11:40:36.110001
+select estate_charitable_gift_events.* from estate_charitable_gift_events left join users on users.rand_id = estate_charitable_gift_events.created_by where users.rand_id is null;

# 2022-10-03 11:40:55.037588
+select * from users where rand_id = 'tQcSbgaJ';

# 2022-10-03 11:40:59.389726
+select * from profiles where rand_id = 'tQcSbgaJ';

# 2022-10-03 11:41:49.990896
+ALTER TABLE estate_charitable_gift_events
+     COLUMN created_by CHARACTER(8) references users(rand_id);

# 2022-10-03 11:41:53.082504
+\e

# 2022-10-03 11:42:01.188065
+ALTER TABLE estate_charitable_gift_events
+     COLUMN created_by CHARACTER(8) references users(rand_id);

# 2022-10-03 11:42:28.283866
+\e

# 2022-10-03 11:42:32.719522
+ALTER TABLE estate_charitable_gift_events
+ALTER COLUMN created_by CHARACTER(8) references users(rand_id);

# 2022-10-03 11:42:36.493235
+\e

# 2022-10-03 11:43:15.871173
+ALTER TABLE estate_charitable_gift_events
+        ADD CONSTRAINT;

# 2022-10-03 11:43:23.557015
+\d estate_charitable_gifts 

# 2022-10-03 11:43:31.686429
+\e

# 2022-10-03 11:44:57.091273
+ALTER TABLE estate_charitable_gift_events
+        ADD CONSTRAINT estate_charitable_gift_events_created_by_fkey FOREIGN KEY(created_by) REFERENCES users(rand_id);

# 2022-10-03 11:46:07.618232
+\d estate_charitable_gift_events

# 2022-10-03 11:59:05.561983
+\q

# 2022-10-03 12:00:22.067152
+select * from estate_plans order by updated_at desc limit 1;

# 2022-10-03 12:00:39.435569
+select * from estate_charitable_gifts where estate_id = 'hwFMps2D';

# 2022-10-03 12:01:28.049878
+select estate_plans.rand_id from estate_plans join estate_charitable_gifts on estate_charitable_gifts.estate_id = estate_plans.rand_id limit 1;

# 2022-10-03 12:01:39.243641
+select * from estate_plans where rand_id = 'UmUjpR98';

# 2022-10-03 12:01:51.764423
+select * from estate_charitable_gifts where estate_id = 'UmUjpR98';

# 2022-10-03 12:02:23.797819
+select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id group by ep.rand_id where count > 1;

# 2022-10-03 12:02:33.180984
+select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id where count > 1 group by ep.rand_id;

# 2022-10-03 12:02:46.799509
+select * from (select ep.rand_id, count(ecg.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id group by ep.rand_id) query where count > 1;

# 2022-10-03 12:02:59.955827
+select * from estate_plans where rand_id = '001ddPVU';

# 2022-10-03 12:03:09.981384
+select * from estate_charitable_gifts where estate_id = '001ddPVU';

# 2022-10-03 12:03:41.636770
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = '001ddPVU');

# 2022-10-03 12:04:00.771636
+select rand_id from estate_charitable_gifts where estate_id = '001ddPVU';

# 2022-10-03 12:04:12.283419
+insert into estate_charitable_gift_events() values ();

# 2022-10-03 12:04:13.418676
+\e

# 2022-10-03 12:05:05.790805
+insert into estate_charitable_gift_events
+(
+  estate_charitable_gift_id,
+  created_source,
+  event_type
+)
+values
+(
+  '???',
+  'freewill_user',
+  'gift_review_update'
+);

# 2022-10-03 12:06:10.915498
+select * from estate_charitable_gift_events order by created_at desc limit 1;

# 2022-10-03 12:06:52.030225
+select rand_id from estate_charitable_gifts where estate_id = '001ddPVU';

# 2022-10-03 12:07:26.293068
+update estate_charitable_gift_events set estate_charitable_gift_id = '3X3FIs46' where id = '8704';

# 2022-10-03 12:07:31.709281
+select * from estate_charitable_gift_events order by created_at desc limit 1;

# 2022-10-03 12:10:04.415427
+insert into estate_charitable_gift_events
+(
+  estate_charitable_gift_id,
+  created_source,
+  event_type
+)
+values
+(
+  '???',
+  'freewill_user',
+  'gift_review_update'
+);

# 2022-10-03 12:10:07.942455
+select * from estate_charitable_gift_events order by created_at desc limit 1;

# 2022-10-03 12:10:14.381759
+select rand_id from estate_charitable_gifts where estate_id = '001ddPVU';

# 2022-10-03 12:10:30.085007
+update estate_charitable_gift_events set estate_charitable_gift_id = 'gDkCRizm' where id = '???';

# 2022-10-03 12:10:38.933838
+select * from estate_charitable_gift_events order by created_at desc limit 1;

# 2022-10-03 12:10:43.973446
+update estate_charitable_gift_events set estate_charitable_gift_id = 'gDkCRizm' where id = '8705';

# 2022-10-03 12:10:46.341016
+select * from estate_charitable_gift_events order by created_at desc limit 1;

# 2022-10-03 12:10:56.806038
+select rand_id from estate_charitable_gifts where estate_id = '001ddPVU';

# 2022-10-03 12:11:06.005675
+select fn_calculate_times_reviewed('001ddPVU');

# 2022-10-03 12:14:21.021883
+select rand_id from estate_charitable_gifts where estate_id = '001ddPVU';

# 2022-10-03 12:14:30.733805
+select rand_id, estate_id from estate_charitable_gifts where estate_id = '001ddPVU';

# 2022-10-03 12:14:34.662060
+select rand_id, distinct estate_id from estate_charitable_gifts where estate_id = '001ddPVU';

# 2022-10-03 12:14:44.735007
+select distinct estate_id, rand_id, from estate_charitable_gifts where estate_id = '001ddPVU';

# 2022-10-03 12:14:52.086206
+select distinct estate_id, rand_id from estate_charitable_gifts where estate_id = '001ddPVU';

# 2022-10-03 12:17:53.607076
+select fn_calculate_times_reviewed('001ddPVU');

# 2022-10-03 12:32:52.955640
+insert into estate_charitable_gift_events
+(
+  estate_charitable_gift_id,
+  created_source,
+  event_type
+)
+values
+(
+  '???',
+  'freewill_user',
+  'gift_review_update'
+);

# 2022-10-03 12:33:03.306799
+select * from estate_charitable_gift_events order by created_at desc limit 2;

# 2022-10-03 12:33:26.759527
+update estate_charitable_gift_events set estate_charitable_gift_id = 'gDkCRizm' where id = '8706';

# 2022-10-03 12:33:39.136931
+update estate_charitable_gift_events set estate_charitable_gift_id = '3X3FIs46' where id = '8707';

# 2022-10-03 12:34:15.241975
+select * from  estate_charitable_gift_events where estate_charitable_gift_id = 'gDkCRizm';

# 2022-10-03 12:34:44.490958
+select * from  estate_charitable_gift_events where estate_charitable_gift_id = '3X3FIs46';

# 2022-10-03 12:34:51.934016
+select fn_calculate_times_reviewed('001ddPVU');

# 2022-10-03 12:42:40.252939
+select fn_calculate_times_reviewed('HMn0BwzO');

# 2022-10-03 12:42:42.480181
+select fn_calculate_times_reviewed('001ddPVU');

# 2022-10-03 13:07:50.015175
+select * from programs limit 1;

# 2022-10-03 13:08:36.248736
+\q

# 2022-10-04 12:37:13.659542
+select count(*) from estate_charitable_gift_events where created_source = 'freewill_user';

# 2022-10-04 12:37:15.947873
+\q

# 2022-10-04 12:37:24.695493
+select count(*) from estate_charitable_gift_events where created_source = 'freewill_user';

# 2022-10-04 12:37:26.926679
+\q

# 2022-10-04 12:37:36.054205
+select count(*) from estate_charitable_gift_events where created_source = 'freewill_user';

# 2022-10-04 12:37:38.245235
+\q

# 2022-10-04 13:14:00.044158
+select is_fake from estate_plans limit 10;

# 2022-10-04 13:14:13.842283
+select count(*), is_fake from estate_plans group by is_fake;

# 2022-10-04 13:21:39.400804
+select * from estate_plans where is_fake = true;

# 2022-10-04 13:56:33.790049
+select count(*) from estate_charitable_gift_events where created_source = 'freewill_user';

# 2022-10-04 13:59:22.508323
+select * from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-05 14:00:19.819943
+select count(*) from estate_charitable_gift_events where created_source = 'freewill_user';

# 2022-10-05 14:01:11.667204
+34  SELECT "EstatePlanModel"."id", "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."first_completion_event_id" AS "first    CompletionEventId", "EstatePlanModel"."is_fake" AS "isFake", "EstatePlanModel"."meta_info" AS "metaInfo", "EstatePlanModel"."pr    ofile_id" AS "profileId", "EstatePlanModel"."is_joint" AS "isJoint", "EstatePlanModel"."has_permission_to_share_info" AS "hasPe    rmissionToShareInfo", "EstatePlanModel"."has_no_contest_clause" AS "hasNoContestClause", "EstatePlanModel"."has_disinheritance_    clause" AS "hasDisinheritanceClause", "EstatePlanModel"."has_children" AS "hasChildren", "EstatePlanModel"."has_minor_children"     AS "hasMinorChildren", "EstatePlanModel"."has_pets" AS "hasPets", "EstatePlanModel"."has_custodians" AS "hasCustodians", "Esta    tePlanModel"."marital_status" AS "maritalStatus", "EstatePlanModel"."use_successor_trustees_as_will_executors" AS "useSuccessor    TrusteesAsWillExecutors", "EstatePlanModel"."has_specific_gifts" AS "hasSpecificGifts", "EstatePlanModel"."is_reasonable_comp_t    o_pet_caregiver" AS "isReasonableCompToPetCaregiver", "EstatePlanModel"."last_section_completed" AS "lastSectionCompleted", "Es    tatePlanModel"."asset_value_range" AS "assetValueRange", "EstatePlanModel"."pet_expenses" AS "petExpenses", "EstatePlanModel"."    pet_expenses_currency" AS "petExpensesCurrency", "EstatePlanModel"."ref_org_id" AS "refOrgId", "EstatePlanModel"."has_third_wit    ness" AS "hasThirdWitness", "EstatePlanModel"."has_digital_executor" AS "hasDigitalExecutor", "EstatePlanModel"."has_self_provi    ng_affidavit" AS "hasSelfProvingAffidavit", "EstatePlanModel"."has_selected_rlt" AS "hasSelectedRlt", "EstatePlanModel"."indepe    ndent_admin_type" AS "independentAdminType", "EstatePlanModel"."has_digital_assets" AS "hasDigitalAssets", "EstatePlanModel"."h    as_life_insurance" AS "hasLifeInsurance", "EstatePlanModel"."plan_type" AS "planType", "EstatePlanModel"."last_section_complete    d_updated_at" AS "lastSectionCompletedUpdatedAt", "EstatePlanModel"."mirror_of" AS "mirrorOf", "EstatePlanModel"."personal_stat    ement" AS "personalStatement", "EstatePlanModel"."most_recent_completion_event_id" AS "mostRecentCompletionEventId", "EstatePla    nModel"."has_personal_statement" AS "hasPersonalStatement", "EstatePlanModel"."review_status_updated_source" AS "reviewStatusUp    datedSource", "EstatePlanModel"."review_status_updated_by" AS "reviewStatusUpdatedBy", "EstatePlanModel"."review_status_updated    _at" AS "reviewStatusUpdatedAt", "EstatePlanModel"."review_notes" AS "reviewNotes", "EstatePlanModel"."finalized_at" AS "finali    zedAt", "EstatePlanModel"."custom_plan_name" AS "customPlanName", "EstatePlanModel"."has_completed_find_a_notary" AS "hasComple    tedFindANotary", "EstatePlanModel"."created_at" AS "createdAt", "EstatePlanModel"."updated_at" AS "updatedAt", fn_calculate_tim    es_reviewed("EstatePlanModel"."rand_id") AS "timesReviewed", "profile"."id" AS "profile.id", "profile"."rand_id" AS "profile.ra    ndId", "profile"."city" AS "profile.city", "profile"."state" AS "profile.administrativeArea", "profile"."country" AS "profile.c    ountry", "profile"."zip_code" AS "profile.postalCode", "profile"."county" AS "profile.county", "profile"."currency" AS "profile    .currency", "profile"."gender" AS "profile.gender", "profile"."gender_desc" AS "profile.genderDesc", "profile"."birthdate" AS "    profile.birthDate", "profile"."products" AS "profile.products", "profile"."flags" AS "profile.flags", "profile"."account_id" AS     "profile.accountId", "profile"."address_1" AS "profile.address1", "profile"."address_2" AS "profile.address2", "profile"."f_na    me" AS "profile.fullName", "profile"."preferred_name" AS "profile.preferredName", "profile"."preferred_pronouns" AS "profile.pr    eferredPronouns", "profile"."phone" AS "profile.phone", "profile"."terms_accepted_on" AS "profile.termsAcceptedOn", "profile"."    terms_accepted_version" AS "profile.termsAcceptedVersion", "profile"."created_at" AS "profile.createdAt", "profile"."updated_at    " AS "profile.updatedAt", "profile"."deleted_at" AS "profile.deletedAt", "profile->user"."id" AS "profile.user.id", "profile->u    ser"."rand_id" AS "profile.user.randId", "profile->user"."encrypted_password" AS "profile.user.encryptedPassword", "profile->us    er"."email" AS "profile.user.email", "profile->user"."confirmed_at" AS "profile.user.confirmedAt", "profile->user"."confirmatio    n_sent_at" AS "profile.user.confirmationSentAt", "profile->user"."confirmation_token" AS "profile.user.confirmationToken", "pro    file->user"."reset_password_sent_at" AS "profile.user.resetPasswordSentAt", "profile->user"."reset_password_token" AS "profile.    user.resetPasswordToken", "profile->user"."sign_in_count" AS "profile.user.signInCount", "profile->user"."current_sign_in_at" A    S "profile.user.currentSignInAt", "profile->user"."current_sign_in_ip" AS "profile.user.currentSignInIp", "profile->user"."last    _sign_in_at" AS "profile.user.lastSignInAt", "profile->user"."last_sign_in_ip" AS "profile.user.lastSignInIp", "profile->user".    "terms" AS "profile.user.terms", "profile->user"."created_at" AS "profile.user.createdAt", "profile->user"."updated_at" AS "pro    file.user.updatedAt", "profile->user"."deleted_at" AS "profile.user.deletedAt" FROM "estate_plans" AS "EstatePlanModel" LEFT OU    TER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) L    EFT OUTER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_a    t" IS NULL) WHERE "EstatePlanModel"."rand_id" IN (NULL);
+

# 2022-10-05 14:01:13.152517
+\e

# 2022-10-05 14:05:04.447485
+            SELECT "EstatePlanModel"."id",
+                   "EstatePlanModel"."rand_id" AS "randId",
+                   "EstatePlanModel"."first_completion_event_id" AS "firstCompletionEventId",
+                   "EstatePlanModel"."is_fake" AS "isFake",
+                   "EstatePlanModel"."meta_info" AS "metaInfo",
+                   "EstatePlanModel"."profile_id" AS "profileId",
+                   "EstatePlanModel"."is_joint" AS "isJoint",
+                   "EstatePlanModel"."has_permission_to_share_info" AS "hasPermissionToShareInfo",
+                   "EstatePlanModel"."has_no_contest_clause" AS "hasNoContestClause",
+                   "EstatePlanModel"."has_disinheritance_    clause" AS "hasDisinheritanceClause",
+                   "EstatePlanModel"."has_children" AS "hasChildren",
+                   "EstatePlanModel"."has_minor_children"     AS "hasMinorChildren",
+                   "EstatePlanModel"."has_pets" AS "hasPets",
+                   "EstatePlanModel"."has_custodians" AS "hasCustodians",
+                   "EstatePlanModel"."marital_status" AS "maritalStatus",
+                   "EstatePlanModel"."use_successor_trustees_as_will_executors" AS "useSuccessorTrusteesAsWillExecutors",
+                   "EstatePlanModel"."has_specific_gifts" AS "hasSpecificGifts",
+                   "EstatePlanModel"."is_reasonable_comp_t    o_pet_caregiver" AS "isReasonableCompToPetCaregiver",
+                   "EstatePlanModel"."last_section_completed" AS "lastSectionCompleted",
+                   "EstatePlanModel"."asset_value_range" AS "assetValueRange",
+                   "EstatePlanModel"."pet_expenses" AS "petExpenses",
+                   "EstatePlanModel"."pet_expenses_currency" AS "petExpensesCurrency",
+                   "EstatePlanModel"."ref_org_id" AS "refOrgId",
+                   "EstatePlanModel"."has_third_witness" AS "hasThirdWitness",
+                   "EstatePlanModel"."has_digital_executor" AS "hasDigitalExecutor",
+                   "EstatePlanModel"."has_self_proving_affidavit" AS "hasSelfProvingAffidavit",
+                   "EstatePlanModel"."has_selected_rlt" AS "hasSelectedRlt",
+                   "EstatePlanModel"."independent_admin_type" AS "independentAdminType",
+                   "EstatePlanModel"."has_digital_assets" AS "hasDigitalAssets",
+                   "EstatePlanModel"."has_life_insurance" AS "hasLifeInsurance",
+                   "EstatePlanModel"."plan_type" AS "planType",
+                   "EstatePlanModel"."last_section_completed_updated_at" AS "lastSectionCompletedUpdatedAt",
+                   "EstatePlanModel"."mirror_of" AS "mirrorOf",
+                   "EstatePlanModel"."personal_statement" AS "personalStatement",
+                   "EstatePlanModel"."most_recent_completion_event_id" AS "mostRecentCompletionEventId",
+                   "EstatePlanModel"."has_personal_statement" AS "hasPersonalStatement",
+                   "EstatePlanModel"."review_status_updated_source" AS "reviewStatusUp    datedSource",
+                   "EstatePlanModel"."review_status_updated_by" AS "reviewStatusUpdatedBy",
+                   "EstatePlanModel"."review_status_updated_at" AS "reviewStatusUpdatedAt",
+                   "EstatePlanModel"."review_notes" AS "reviewNotes",
+                   "EstatePlanModel"."finalized_at" AS "finalizedAt",
+                   "EstatePlanModel"."custom_plan_name" AS "customPlanName",
+                   "EstatePlanModel"."has_completed_find_a_notary" AS "hasCompletedFindANotary",
+                   "EstatePlanModel"."created_at" AS "createdAt",
+                   "EstatePlanModel"."updated_at" AS "updatedAt",
+                   fn_calculate_times_reviewed("EstatePlanModel"."rand_id") AS "timesReviewed",
+                   "profile"."id" AS "profile.id",
+                   "profile"."rand_id" AS "profile.randId",
+                   "profile"."city" AS "profile.city",
+                   "profile"."state" AS "profile.administrativeArea",
+                   "profile"."country" AS "profile.country",
+                   "profile"."zip_code" AS "profile.postalCode",
+                   "profile"."county" AS "profile.county",
+                   "profile"."currency" AS "profile.currency",
+                   "profile"."gender" AS "profile.gender",
+                   "profile"."gender_desc" AS "profile.genderDesc",
+                   "profile"."birthdate" AS "profile.birthDate",
+                   "profile"."products" AS "profile.products",
+                   "profile"."flags" AS "profile.flags",
+                   "profile"."account_id" AS "profile.accountId",
+                   "profile"."address_1" AS "profile.address1",
+                   "profile"."address_2" AS "profile.address2",
+                   "profile"."f_name" AS "profile.fullName",
+                   "profile"."preferred_name" AS "profile.preferredName",
+                   "profile"."preferred_pronouns" AS "profile.preferredPronouns",
+                   "profile"."phone" AS "profile.phone",
+                   "profile"."terms_accepted_on" AS "profile.termsAcceptedOn",
+                   "profile"."terms_accepted_version" AS "profile.termsAcceptedVersion",
+                   "profile"."created_at" AS "profile.createdAt",
+                   "profile"."updated_at    " AS "profile.updatedAt",
+                   "profile"."deleted_at" AS "profile.deletedAt",
+                   "profile->user"."id" AS "profile.user.id",
+                   "profile->user"."rand_id" AS "profile.user.randId",
+                   "profile->user"."encrypted_password" AS "profile.user.encryptedPassword",
+                   "profile->user"."email" AS "profile.user.email",
+                   "profile->user"."confirmed_at" AS "profile.user.confirmedAt",
+                   "profile->user"."confirmatio    n_sent_at" AS "profile.user.confirmationSentAt",
+                   "profile->user"."confirmation_token" AS "profile.user.confirmationToken",
+                   "profile->user"."reset_password_sent_at" AS "profile.user.resetPasswordSentAt",
+                   "profile->user"."reset_password_token" AS "profile.user.resetPasswordToken",
+                   "profile->user"."sign_in_count" AS "profile.user.signInCount",
+                   "profile->user"."current_sign_in_at" AS "profile.user.currentSignInAt",
+                   "profile->user"."current_sign_in_ip" AS "profile.user.currentSignInIp",
+                   "profile->user"."last_sign_in_at" AS "profile.user.lastSignInAt",
+                   "profile->user"."last_sign_in_ip" AS "profile.user.lastSignInIp",
+                   "profile->user"."terms" AS "profile.user.terms",
+                   "profile->user"."created_at" AS "profile.user.createdAt",
+                   "profile->user"."updated_at" AS "profile.user.updatedAt",
+                   "profile->user"."deleted_at" AS "profile.user.deletedAt"
+              FROM "estate_plans" AS "EstatePlanModel"
+   LEFT OUTER JOIN "profiles" AS "profile"
+                ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+               AND ("profile"."deleted_at" IS NULL)
+   LEFT OUTER JOIN "users" AS "profile->user"
+                ON "profile"."account_id" = "profile->user"."rand_id"
+               AND ("profile->user"."deleted_at" IS NULL)
+             WHERE "EstatePlanModel"."rand_id" IN (NULL);

# 2022-10-05 14:05:10.632856
+\e

# 2022-10-05 14:05:17.559388
+            SELECT "EstatePlanModel"."id",
+                   "EstatePlanModel"."rand_id" AS "randId",
+                   "EstatePlanModel"."first_completion_event_id" AS "firstCompletionEventId",
+                   "EstatePlanModel"."is_fake" AS "isFake",
+                   "EstatePlanModel"."meta_info" AS "metaInfo",
+                   "EstatePlanModel"."profile_id" AS "profileId",
+                   "EstatePlanModel"."is_joint" AS "isJoint",
+                   "EstatePlanModel"."has_permission_to_share_info" AS "hasPermissionToShareInfo",
+                   "EstatePlanModel"."has_no_contest_clause" AS "hasNoContestClause",
+                   "EstatePlanModel"."has_disinheritance_clause" AS "hasDisinheritanceClause",
+                   "EstatePlanModel"."has_children" AS "hasChildren",
+                   "EstatePlanModel"."has_minor_children"     AS "hasMinorChildren",
+                   "EstatePlanModel"."has_pets" AS "hasPets",
+                   "EstatePlanModel"."has_custodians" AS "hasCustodians",
+                   "EstatePlanModel"."marital_status" AS "maritalStatus",
+                   "EstatePlanModel"."use_successor_trustees_as_will_executors" AS "useSuccessorTrusteesAsWillExecutors",
+                   "EstatePlanModel"."has_specific_gifts" AS "hasSpecificGifts",
+                   "EstatePlanModel"."is_reasonable_comp_t    o_pet_caregiver" AS "isReasonableCompToPetCaregiver",
+                   "EstatePlanModel"."last_section_completed" AS "lastSectionCompleted",
+                   "EstatePlanModel"."asset_value_range" AS "assetValueRange",
+                   "EstatePlanModel"."pet_expenses" AS "petExpenses",
+                   "EstatePlanModel"."pet_expenses_currency" AS "petExpensesCurrency",
+                   "EstatePlanModel"."ref_org_id" AS "refOrgId",
+                   "EstatePlanModel"."has_third_witness" AS "hasThirdWitness",
+                   "EstatePlanModel"."has_digital_executor" AS "hasDigitalExecutor",
+                   "EstatePlanModel"."has_self_proving_affidavit" AS "hasSelfProvingAffidavit",
+                   "EstatePlanModel"."has_selected_rlt" AS "hasSelectedRlt",
+                   "EstatePlanModel"."independent_admin_type" AS "independentAdminType",
+                   "EstatePlanModel"."has_digital_assets" AS "hasDigitalAssets",
+                   "EstatePlanModel"."has_life_insurance" AS "hasLifeInsurance",
+                   "EstatePlanModel"."plan_type" AS "planType",
+                   "EstatePlanModel"."last_section_completed_updated_at" AS "lastSectionCompletedUpdatedAt",
+                   "EstatePlanModel"."mirror_of" AS "mirrorOf",
+                   "EstatePlanModel"."personal_statement" AS "personalStatement",
+                   "EstatePlanModel"."most_recent_completion_event_id" AS "mostRecentCompletionEventId",
+                   "EstatePlanModel"."has_personal_statement" AS "hasPersonalStatement",
+                   "EstatePlanModel"."review_status_updated_source" AS "reviewStatusUp    datedSource",
+                   "EstatePlanModel"."review_status_updated_by" AS "reviewStatusUpdatedBy",
+                   "EstatePlanModel"."review_status_updated_at" AS "reviewStatusUpdatedAt",
+                   "EstatePlanModel"."review_notes" AS "reviewNotes",
+                   "EstatePlanModel"."finalized_at" AS "finalizedAt",
+                   "EstatePlanModel"."custom_plan_name" AS "customPlanName",
+                   "EstatePlanModel"."has_completed_find_a_notary" AS "hasCompletedFindANotary",
+                   "EstatePlanModel"."created_at" AS "createdAt",
+                   "EstatePlanModel"."updated_at" AS "updatedAt",
+                   fn_calculate_times_reviewed("EstatePlanModel"."rand_id") AS "timesReviewed",
+                   "profile"."id" AS "profile.id",
+                   "profile"."rand_id" AS "profile.randId",
+                   "profile"."city" AS "profile.city",
+                   "profile"."state" AS "profile.administrativeArea",
+                   "profile"."country" AS "profile.country",
+                   "profile"."zip_code" AS "profile.postalCode",
+                   "profile"."county" AS "profile.county",
+                   "profile"."currency" AS "profile.currency",
+                   "profile"."gender" AS "profile.gender",
+                   "profile"."gender_desc" AS "profile.genderDesc",
+                   "profile"."birthdate" AS "profile.birthDate",
+                   "profile"."products" AS "profile.products",
+                   "profile"."flags" AS "profile.flags",
+                   "profile"."account_id" AS "profile.accountId",
+                   "profile"."address_1" AS "profile.address1",
+                   "profile"."address_2" AS "profile.address2",
+                   "profile"."f_name" AS "profile.fullName",
+                   "profile"."preferred_name" AS "profile.preferredName",
+                   "profile"."preferred_pronouns" AS "profile.preferredPronouns",
+                   "profile"."phone" AS "profile.phone",
+                   "profile"."terms_accepted_on" AS "profile.termsAcceptedOn",
+                   "profile"."terms_accepted_version" AS "profile.termsAcceptedVersion",
+                   "profile"."created_at" AS "profile.createdAt",
+                   "profile"."updated_at    " AS "profile.updatedAt",
+                   "profile"."deleted_at" AS "profile.deletedAt",
+                   "profile->user"."id" AS "profile.user.id",
+                   "profile->user"."rand_id" AS "profile.user.randId",
+                   "profile->user"."encrypted_password" AS "profile.user.encryptedPassword",
+                   "profile->user"."email" AS "profile.user.email",
+                   "profile->user"."confirmed_at" AS "profile.user.confirmedAt",
+                   "profile->user"."confirmatio    n_sent_at" AS "profile.user.confirmationSentAt",
+                   "profile->user"."confirmation_token" AS "profile.user.confirmationToken",
+                   "profile->user"."reset_password_sent_at" AS "profile.user.resetPasswordSentAt",
+                   "profile->user"."reset_password_token" AS "profile.user.resetPasswordToken",
+                   "profile->user"."sign_in_count" AS "profile.user.signInCount",
+                   "profile->user"."current_sign_in_at" AS "profile.user.currentSignInAt",
+                   "profile->user"."current_sign_in_ip" AS "profile.user.currentSignInIp",
+                   "profile->user"."last_sign_in_at" AS "profile.user.lastSignInAt",
+                   "profile->user"."last_sign_in_ip" AS "profile.user.lastSignInIp",
+                   "profile->user"."terms" AS "profile.user.terms",
+                   "profile->user"."created_at" AS "profile.user.createdAt",
+                   "profile->user"."updated_at" AS "profile.user.updatedAt",
+                   "profile->user"."deleted_at" AS "profile.user.deletedAt"
+              FROM "estate_plans" AS "EstatePlanModel"
+   LEFT OUTER JOIN "profiles" AS "profile"
+                ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+               AND ("profile"."deleted_at" IS NULL)
+   LEFT OUTER JOIN "users" AS "profile->user"
+                ON "profile"."account_id" = "profile->user"."rand_id"
+               AND ("profile->user"."deleted_at" IS NULL)
+             WHERE "EstatePlanModel"."rand_id" IN (NULL);

# 2022-10-05 14:05:19.638115
+\e

# 2022-10-05 14:05:23.894862
+            SELECT "EstatePlanModel"."id",
+                   "EstatePlanModel"."rand_id" AS "randId",
+                   "EstatePlanModel"."first_completion_event_id" AS "firstCompletionEventId",
+                   "EstatePlanModel"."is_fake" AS "isFake",
+                   "EstatePlanModel"."meta_info" AS "metaInfo",
+                   "EstatePlanModel"."profile_id" AS "profileId",
+                   "EstatePlanModel"."is_joint" AS "isJoint",
+                   "EstatePlanModel"."has_permission_to_share_info" AS "hasPermissionToShareInfo",
+                   "EstatePlanModel"."has_no_contest_clause" AS "hasNoContestClause",
+                   "EstatePlanModel"."has_disinheritance_clause" AS "hasDisinheritanceClause",
+                   "EstatePlanModel"."has_children" AS "hasChildren",
+                   "EstatePlanModel"."has_minor_children"     AS "hasMinorChildren",
+                   "EstatePlanModel"."has_pets" AS "hasPets",
+                   "EstatePlanModel"."has_custodians" AS "hasCustodians",
+                   "EstatePlanModel"."marital_status" AS "maritalStatus",
+                   "EstatePlanModel"."use_successor_trustees_as_will_executors" AS "useSuccessorTrusteesAsWillExecutors",
+                   "EstatePlanModel"."has_specific_gifts" AS "hasSpecificGifts",
+                   "EstatePlanModel"."is_reasonable_comp_to_pet_caregiver" AS "isReasonableCompToPetCaregiver",
+                   "EstatePlanModel"."last_section_completed" AS "lastSectionCompleted",
+                   "EstatePlanModel"."asset_value_range" AS "assetValueRange",
+                   "EstatePlanModel"."pet_expenses" AS "petExpenses",
+                   "EstatePlanModel"."pet_expenses_currency" AS "petExpensesCurrency",
+                   "EstatePlanModel"."ref_org_id" AS "refOrgId",
+                   "EstatePlanModel"."has_third_witness" AS "hasThirdWitness",
+                   "EstatePlanModel"."has_digital_executor" AS "hasDigitalExecutor",
+                   "EstatePlanModel"."has_self_proving_affidavit" AS "hasSelfProvingAffidavit",
+                   "EstatePlanModel"."has_selected_rlt" AS "hasSelectedRlt",
+                   "EstatePlanModel"."independent_admin_type" AS "independentAdminType",
+                   "EstatePlanModel"."has_digital_assets" AS "hasDigitalAssets",
+                   "EstatePlanModel"."has_life_insurance" AS "hasLifeInsurance",
+                   "EstatePlanModel"."plan_type" AS "planType",
+                   "EstatePlanModel"."last_section_completed_updated_at" AS "lastSectionCompletedUpdatedAt",
+                   "EstatePlanModel"."mirror_of" AS "mirrorOf",
+                   "EstatePlanModel"."personal_statement" AS "personalStatement",
+                   "EstatePlanModel"."most_recent_completion_event_id" AS "mostRecentCompletionEventId",
+                   "EstatePlanModel"."has_personal_statement" AS "hasPersonalStatement",
+                   "EstatePlanModel"."review_status_updated_source" AS "reviewStatusUp    datedSource",
+                   "EstatePlanModel"."review_status_updated_by" AS "reviewStatusUpdatedBy",
+                   "EstatePlanModel"."review_status_updated_at" AS "reviewStatusUpdatedAt",
+                   "EstatePlanModel"."review_notes" AS "reviewNotes",
+                   "EstatePlanModel"."finalized_at" AS "finalizedAt",
+                   "EstatePlanModel"."custom_plan_name" AS "customPlanName",
+                   "EstatePlanModel"."has_completed_find_a_notary" AS "hasCompletedFindANotary",
+                   "EstatePlanModel"."created_at" AS "createdAt",
+                   "EstatePlanModel"."updated_at" AS "updatedAt",
+                   fn_calculate_times_reviewed("EstatePlanModel"."rand_id") AS "timesReviewed",
+                   "profile"."id" AS "profile.id",
+                   "profile"."rand_id" AS "profile.randId",
+                   "profile"."city" AS "profile.city",
+                   "profile"."state" AS "profile.administrativeArea",
+                   "profile"."country" AS "profile.country",
+                   "profile"."zip_code" AS "profile.postalCode",
+                   "profile"."county" AS "profile.county",
+                   "profile"."currency" AS "profile.currency",
+                   "profile"."gender" AS "profile.gender",
+                   "profile"."gender_desc" AS "profile.genderDesc",
+                   "profile"."birthdate" AS "profile.birthDate",
+                   "profile"."products" AS "profile.products",
+                   "profile"."flags" AS "profile.flags",
+                   "profile"."account_id" AS "profile.accountId",
+                   "profile"."address_1" AS "profile.address1",
+                   "profile"."address_2" AS "profile.address2",
+                   "profile"."f_name" AS "profile.fullName",
+                   "profile"."preferred_name" AS "profile.preferredName",
+                   "profile"."preferred_pronouns" AS "profile.preferredPronouns",
+                   "profile"."phone" AS "profile.phone",
+                   "profile"."terms_accepted_on" AS "profile.termsAcceptedOn",
+                   "profile"."terms_accepted_version" AS "profile.termsAcceptedVersion",
+                   "profile"."created_at" AS "profile.createdAt",
+                   "profile"."updated_at    " AS "profile.updatedAt",
+                   "profile"."deleted_at" AS "profile.deletedAt",
+                   "profile->user"."id" AS "profile.user.id",
+                   "profile->user"."rand_id" AS "profile.user.randId",
+                   "profile->user"."encrypted_password" AS "profile.user.encryptedPassword",
+                   "profile->user"."email" AS "profile.user.email",
+                   "profile->user"."confirmed_at" AS "profile.user.confirmedAt",
+                   "profile->user"."confirmatio    n_sent_at" AS "profile.user.confirmationSentAt",
+                   "profile->user"."confirmation_token" AS "profile.user.confirmationToken",
+                   "profile->user"."reset_password_sent_at" AS "profile.user.resetPasswordSentAt",
+                   "profile->user"."reset_password_token" AS "profile.user.resetPasswordToken",
+                   "profile->user"."sign_in_count" AS "profile.user.signInCount",
+                   "profile->user"."current_sign_in_at" AS "profile.user.currentSignInAt",
+                   "profile->user"."current_sign_in_ip" AS "profile.user.currentSignInIp",
+                   "profile->user"."last_sign_in_at" AS "profile.user.lastSignInAt",
+                   "profile->user"."last_sign_in_ip" AS "profile.user.lastSignInIp",
+                   "profile->user"."terms" AS "profile.user.terms",
+                   "profile->user"."created_at" AS "profile.user.createdAt",
+                   "profile->user"."updated_at" AS "profile.user.updatedAt",
+                   "profile->user"."deleted_at" AS "profile.user.deletedAt"
+              FROM "estate_plans" AS "EstatePlanModel"
+   LEFT OUTER JOIN "profiles" AS "profile"
+                ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+               AND ("profile"."deleted_at" IS NULL)
+   LEFT OUTER JOIN "users" AS "profile->user"
+                ON "profile"."account_id" = "profile->user"."rand_id"
+               AND ("profile->user"."deleted_at" IS NULL)
+             WHERE "EstatePlanModel"."rand_id" IN (NULL);

# 2022-10-05 14:05:25.606139
+\e

# 2022-10-05 14:05:36.047754
+            SELECT "EstatePlanModel"."id",
+                   "EstatePlanModel"."rand_id" AS "randId",
+                   "EstatePlanModel"."first_completion_event_id" AS "firstCompletionEventId",
+                   "EstatePlanModel"."is_fake" AS "isFake",
+                   "EstatePlanModel"."meta_info" AS "metaInfo",
+                   "EstatePlanModel"."profile_id" AS "profileId",
+                   "EstatePlanModel"."is_joint" AS "isJoint",
+                   "EstatePlanModel"."has_permission_to_share_info" AS "hasPermissionToShareInfo",
+                   "EstatePlanModel"."has_no_contest_clause" AS "hasNoContestClause",
+                   "EstatePlanModel"."has_disinheritance_clause" AS "hasDisinheritanceClause",
+                   "EstatePlanModel"."has_children" AS "hasChildren",
+                   "EstatePlanModel"."has_minor_children"     AS "hasMinorChildren",
+                   "EstatePlanModel"."has_pets" AS "hasPets",
+                   "EstatePlanModel"."has_custodians" AS "hasCustodians",
+                   "EstatePlanModel"."marital_status" AS "maritalStatus",
+                   "EstatePlanModel"."use_successor_trustees_as_will_executors" AS "useSuccessorTrusteesAsWillExecutors",
+                   "EstatePlanModel"."has_specific_gifts" AS "hasSpecificGifts",
+                   "EstatePlanModel"."is_reasonable_comp_to_pet_caregiver" AS "isReasonableCompToPetCaregiver",
+                   "EstatePlanModel"."last_section_completed" AS "lastSectionCompleted",
+                   "EstatePlanModel"."asset_value_range" AS "assetValueRange",
+                   "EstatePlanModel"."pet_expenses" AS "petExpenses",
+                   "EstatePlanModel"."pet_expenses_currency" AS "petExpensesCurrency",
+                   "EstatePlanModel"."ref_org_id" AS "refOrgId",
+                   "EstatePlanModel"."has_third_witness" AS "hasThirdWitness",
+                   "EstatePlanModel"."has_digital_executor" AS "hasDigitalExecutor",
+                   "EstatePlanModel"."has_self_proving_affidavit" AS "hasSelfProvingAffidavit",
+                   "EstatePlanModel"."has_selected_rlt" AS "hasSelectedRlt",
+                   "EstatePlanModel"."independent_admin_type" AS "independentAdminType",
+                   "EstatePlanModel"."has_digital_assets" AS "hasDigitalAssets",
+                   "EstatePlanModel"."has_life_insurance" AS "hasLifeInsurance",
+                   "EstatePlanModel"."plan_type" AS "planType",
+                   "EstatePlanModel"."last_section_completed_updated_at" AS "lastSectionCompletedUpdatedAt",
+                   "EstatePlanModel"."mirror_of" AS "mirrorOf",
+                   "EstatePlanModel"."personal_statement" AS "personalStatement",
+                   "EstatePlanModel"."most_recent_completion_event_id" AS "mostRecentCompletionEventId",
+                   "EstatePlanModel"."has_personal_statement" AS "hasPersonalStatement",
+                   "EstatePlanModel"."review_status_updated_source" AS "reviewStatusUp    datedSource",
+                   "EstatePlanModel"."review_status_updated_by" AS "reviewStatusUpdatedBy",
+                   "EstatePlanModel"."review_status_updated_at" AS "reviewStatusUpdatedAt",
+                   "EstatePlanModel"."review_notes" AS "reviewNotes",
+                   "EstatePlanModel"."finalized_at" AS "finalizedAt",
+                   "EstatePlanModel"."custom_plan_name" AS "customPlanName",
+                   "EstatePlanModel"."has_completed_find_a_notary" AS "hasCompletedFindANotary",
+                   "EstatePlanModel"."created_at" AS "createdAt",
+                   "EstatePlanModel"."updated_at" AS "updatedAt",
+                   fn_calculate_times_reviewed("EstatePlanModel"."rand_id") AS "timesReviewed",
+                   "profile"."id" AS "profile.id",
+                   "profile"."rand_id" AS "profile.randId",
+                   "profile"."city" AS "profile.city",
+                   "profile"."state" AS "profile.administrativeArea",
+                   "profile"."country" AS "profile.country",
+                   "profile"."zip_code" AS "profile.postalCode",
+                   "profile"."county" AS "profile.county",
+                   "profile"."currency" AS "profile.currency",
+                   "profile"."gender" AS "profile.gender",
+                   "profile"."gender_desc" AS "profile.genderDesc",
+                   "profile"."birthdate" AS "profile.birthDate",
+                   "profile"."products" AS "profile.products",
+                   "profile"."flags" AS "profile.flags",
+                   "profile"."account_id" AS "profile.accountId",
+                   "profile"."address_1" AS "profile.address1",
+                   "profile"."address_2" AS "profile.address2",
+                   "profile"."f_name" AS "profile.fullName",
+                   "profile"."preferred_name" AS "profile.preferredName",
+                   "profile"."preferred_pronouns" AS "profile.preferredPronouns",
+                   "profile"."phone" AS "profile.phone",
+                   "profile"."terms_accepted_on" AS "profile.termsAcceptedOn",
+                   "profile"."terms_accepted_version" AS "profile.termsAcceptedVersion",
+                   "profile"."created_at" AS "profile.createdAt",
+                   "profile"."updated_at" AS "profile.updatedAt",
+                   "profile"."deleted_at" AS "profile.deletedAt",
+                   "profile->user"."id" AS "profile.user.id",
+                   "profile->user"."rand_id" AS "profile.user.randId",
+                   "profile->user"."encrypted_password" AS "profile.user.encryptedPassword",
+                   "profile->user"."email" AS "profile.user.email",
+                   "profile->user"."confirmed_at" AS "profile.user.confirmedAt",
+                   "profile->user"."confirmatio    n_sent_at" AS "profile.user.confirmationSentAt",
+                   "profile->user"."confirmation_token" AS "profile.user.confirmationToken",
+                   "profile->user"."reset_password_sent_at" AS "profile.user.resetPasswordSentAt",
+                   "profile->user"."reset_password_token" AS "profile.user.resetPasswordToken",
+                   "profile->user"."sign_in_count" AS "profile.user.signInCount",
+                   "profile->user"."current_sign_in_at" AS "profile.user.currentSignInAt",
+                   "profile->user"."current_sign_in_ip" AS "profile.user.currentSignInIp",
+                   "profile->user"."last_sign_in_at" AS "profile.user.lastSignInAt",
+                   "profile->user"."last_sign_in_ip" AS "profile.user.lastSignInIp",
+                   "profile->user"."terms" AS "profile.user.terms",
+                   "profile->user"."created_at" AS "profile.user.createdAt",
+                   "profile->user"."updated_at" AS "profile.user.updatedAt",
+                   "profile->user"."deleted_at" AS "profile.user.deletedAt"
+              FROM "estate_plans" AS "EstatePlanModel"
+   LEFT OUTER JOIN "profiles" AS "profile"
+                ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+               AND ("profile"."deleted_at" IS NULL)
+   LEFT OUTER JOIN "users" AS "profile->user"
+                ON "profile"."account_id" = "profile->user"."rand_id"
+               AND ("profile->user"."deleted_at" IS NULL)
+             WHERE "EstatePlanModel"."rand_id" IN (NULL);

# 2022-10-05 14:05:37.764713
+\e

# 2022-10-05 14:05:44.223763
+            SELECT "EstatePlanModel"."id",
+                   "EstatePlanModel"."rand_id" AS "randId",
+                   "EstatePlanModel"."first_completion_event_id" AS "firstCompletionEventId",
+                   "EstatePlanModel"."is_fake" AS "isFake",
+                   "EstatePlanModel"."meta_info" AS "metaInfo",
+                   "EstatePlanModel"."profile_id" AS "profileId",
+                   "EstatePlanModel"."is_joint" AS "isJoint",
+                   "EstatePlanModel"."has_permission_to_share_info" AS "hasPermissionToShareInfo",
+                   "EstatePlanModel"."has_no_contest_clause" AS "hasNoContestClause",
+                   "EstatePlanModel"."has_disinheritance_clause" AS "hasDisinheritanceClause",
+                   "EstatePlanModel"."has_children" AS "hasChildren",
+                   "EstatePlanModel"."has_minor_children"     AS "hasMinorChildren",
+                   "EstatePlanModel"."has_pets" AS "hasPets",
+                   "EstatePlanModel"."has_custodians" AS "hasCustodians",
+                   "EstatePlanModel"."marital_status" AS "maritalStatus",
+                   "EstatePlanModel"."use_successor_trustees_as_will_executors" AS "useSuccessorTrusteesAsWillExecutors",
+                   "EstatePlanModel"."has_specific_gifts" AS "hasSpecificGifts",
+                   "EstatePlanModel"."is_reasonable_comp_to_pet_caregiver" AS "isReasonableCompToPetCaregiver",
+                   "EstatePlanModel"."last_section_completed" AS "lastSectionCompleted",
+                   "EstatePlanModel"."asset_value_range" AS "assetValueRange",
+                   "EstatePlanModel"."pet_expenses" AS "petExpenses",
+                   "EstatePlanModel"."pet_expenses_currency" AS "petExpensesCurrency",
+                   "EstatePlanModel"."ref_org_id" AS "refOrgId",
+                   "EstatePlanModel"."has_third_witness" AS "hasThirdWitness",
+                   "EstatePlanModel"."has_digital_executor" AS "hasDigitalExecutor",
+                   "EstatePlanModel"."has_self_proving_affidavit" AS "hasSelfProvingAffidavit",
+                   "EstatePlanModel"."has_selected_rlt" AS "hasSelectedRlt",
+                   "EstatePlanModel"."independent_admin_type" AS "independentAdminType",
+                   "EstatePlanModel"."has_digital_assets" AS "hasDigitalAssets",
+                   "EstatePlanModel"."has_life_insurance" AS "hasLifeInsurance",
+                   "EstatePlanModel"."plan_type" AS "planType",
+                   "EstatePlanModel"."last_section_completed_updated_at" AS "lastSectionCompletedUpdatedAt",
+                   "EstatePlanModel"."mirror_of" AS "mirrorOf",
+                   "EstatePlanModel"."personal_statement" AS "personalStatement",
+                   "EstatePlanModel"."most_recent_completion_event_id" AS "mostRecentCompletionEventId",
+                   "EstatePlanModel"."has_personal_statement" AS "hasPersonalStatement",
+                   "EstatePlanModel"."review_status_updated_source" AS "reviewStatusUp    datedSource",
+                   "EstatePlanModel"."review_status_updated_by" AS "reviewStatusUpdatedBy",
+                   "EstatePlanModel"."review_status_updated_at" AS "reviewStatusUpdatedAt",
+                   "EstatePlanModel"."review_notes" AS "reviewNotes",
+                   "EstatePlanModel"."finalized_at" AS "finalizedAt",
+                   "EstatePlanModel"."custom_plan_name" AS "customPlanName",
+                   "EstatePlanModel"."has_completed_find_a_notary" AS "hasCompletedFindANotary",
+                   "EstatePlanModel"."created_at" AS "createdAt",
+                   "EstatePlanModel"."updated_at" AS "updatedAt",
+                   fn_calculate_times_reviewed("EstatePlanModel"."rand_id") AS "timesReviewed",
+                   "profile"."id" AS "profile.id",
+                   "profile"."rand_id" AS "profile.randId",
+                   "profile"."city" AS "profile.city",
+                   "profile"."state" AS "profile.administrativeArea",
+                   "profile"."country" AS "profile.country",
+                   "profile"."zip_code" AS "profile.postalCode",
+                   "profile"."county" AS "profile.county",
+                   "profile"."currency" AS "profile.currency",
+                   "profile"."gender" AS "profile.gender",
+                   "profile"."gender_desc" AS "profile.genderDesc",
+                   "profile"."birthdate" AS "profile.birthDate",
+                   "profile"."products" AS "profile.products",
+                   "profile"."flags" AS "profile.flags",
+                   "profile"."account_id" AS "profile.accountId",
+                   "profile"."address_1" AS "profile.address1",
+                   "profile"."address_2" AS "profile.address2",
+                   "profile"."f_name" AS "profile.fullName",
+                   "profile"."preferred_name" AS "profile.preferredName",
+                   "profile"."preferred_pronouns" AS "profile.preferredPronouns",
+                   "profile"."phone" AS "profile.phone",
+                   "profile"."terms_accepted_on" AS "profile.termsAcceptedOn",
+                   "profile"."terms_accepted_version" AS "profile.termsAcceptedVersion",
+                   "profile"."created_at" AS "profile.createdAt",
+                   "profile"."updated_at" AS "profile.updatedAt",
+                   "profile"."deleted_at" AS "profile.deletedAt",
+                   "profile->user"."id" AS "profile.user.id",
+                   "profile->user"."rand_id" AS "profile.user.randId",
+                   "profile->user"."encrypted_password" AS "profile.user.encryptedPassword",
+                   "profile->user"."email" AS "profile.user.email",
+                   "profile->user"."confirmed_at" AS "profile.user.confirmedAt",
+                   "profile->user"."confirmation_sent_at" AS "profile.user.confirmationSentAt",
+                   "profile->user"."confirmation_token" AS "profile.user.confirmationToken",
+                   "profile->user"."reset_password_sent_at" AS "profile.user.resetPasswordSentAt",
+                   "profile->user"."reset_password_token" AS "profile.user.resetPasswordToken",
+                   "profile->user"."sign_in_count" AS "profile.user.signInCount",
+                   "profile->user"."current_sign_in_at" AS "profile.user.currentSignInAt",
+                   "profile->user"."current_sign_in_ip" AS "profile.user.currentSignInIp",
+                   "profile->user"."last_sign_in_at" AS "profile.user.lastSignInAt",
+                   "profile->user"."last_sign_in_ip" AS "profile.user.lastSignInIp",
+                   "profile->user"."terms" AS "profile.user.terms",
+                   "profile->user"."created_at" AS "profile.user.createdAt",
+                   "profile->user"."updated_at" AS "profile.user.updatedAt",
+                   "profile->user"."deleted_at" AS "profile.user.deletedAt"
+              FROM "estate_plans" AS "EstatePlanModel"
+   LEFT OUTER JOIN "profiles" AS "profile"
+                ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+               AND ("profile"."deleted_at" IS NULL)
+   LEFT OUTER JOIN "users" AS "profile->user"
+                ON "profile"."account_id" = "profile->user"."rand_id"
+               AND ("profile->user"."deleted_at" IS NULL)
+             WHERE "EstatePlanModel"."rand_id" IN (NULL);

# 2022-10-05 14:05:53.862292
+\e

# 2022-10-05 14:05:59.968200
+            SELECT "EstatePlanModel"."id",
+                   "EstatePlanModel"."rand_id" AS "randId",
+                   "EstatePlanModel"."first_completion_event_id" AS "firstCompletionEventId",
+                   "EstatePlanModel"."is_fake" AS "isFake",
+                   "EstatePlanModel"."meta_info" AS "metaInfo",
+                   "EstatePlanModel"."profile_id" AS "profileId",
+                   "EstatePlanModel"."is_joint" AS "isJoint",
+                   "EstatePlanModel"."has_permission_to_share_info" AS "hasPermissionToShareInfo",
+                   "EstatePlanModel"."has_no_contest_clause" AS "hasNoContestClause",
+                   "EstatePlanModel"."has_disinheritance_clause" AS "hasDisinheritanceClause",
+                   "EstatePlanModel"."has_children" AS "hasChildren",
+                   "EstatePlanModel"."has_minor_children"     AS "hasMinorChildren",
+                   "EstatePlanModel"."has_pets" AS "hasPets",
+                   "EstatePlanModel"."has_custodians" AS "hasCustodians",
+                   "EstatePlanModel"."marital_status" AS "maritalStatus",
+                   "EstatePlanModel"."use_successor_trustees_as_will_executors" AS "useSuccessorTrusteesAsWillExecutors",
+                   "EstatePlanModel"."has_specific_gifts" AS "hasSpecificGifts",
+                   "EstatePlanModel"."is_reasonable_comp_to_pet_caregiver" AS "isReasonableCompToPetCaregiver",
+                   "EstatePlanModel"."last_section_completed" AS "lastSectionCompleted",
+                   "EstatePlanModel"."asset_value_range" AS "assetValueRange",
+                   "EstatePlanModel"."pet_expenses" AS "petExpenses",
+                   "EstatePlanModel"."pet_expenses_currency" AS "petExpensesCurrency",
+                   "EstatePlanModel"."ref_org_id" AS "refOrgId",
+                   "EstatePlanModel"."has_third_witness" AS "hasThirdWitness",
+                   "EstatePlanModel"."has_digital_executor" AS "hasDigitalExecutor",
+                   "EstatePlanModel"."has_self_proving_affidavit" AS "hasSelfProvingAffidavit",
+                   "EstatePlanModel"."has_selected_rlt" AS "hasSelectedRlt",
+                   "EstatePlanModel"."independent_admin_type" AS "independentAdminType",
+                   "EstatePlanModel"."has_digital_assets" AS "hasDigitalAssets",
+                   "EstatePlanModel"."has_life_insurance" AS "hasLifeInsurance",
+                   "EstatePlanModel"."plan_type" AS "planType",
+                   "EstatePlanModel"."last_section_completed_updated_at" AS "lastSectionCompletedUpdatedAt",
+                   "EstatePlanModel"."mirror_of" AS "mirrorOf",
+                   "EstatePlanModel"."personal_statement" AS "personalStatement",
+                   "EstatePlanModel"."most_recent_completion_event_id" AS "mostRecentCompletionEventId",
+                   "EstatePlanModel"."has_personal_statement" AS "hasPersonalStatement",
+                   "EstatePlanModel"."review_status_updated_source" AS "reviewStatusUp    datedSource",
+                   "EstatePlanModel"."review_status_updated_by" AS "reviewStatusUpdatedBy",
+                   "EstatePlanModel"."review_status_updated_at" AS "reviewStatusUpdatedAt",
+                   "EstatePlanModel"."review_notes" AS "reviewNotes",
+                   "EstatePlanModel"."finalized_at" AS "finalizedAt",
+                   "EstatePlanModel"."custom_plan_name" AS "customPlanName",
+                   "EstatePlanModel"."has_completed_find_a_notary" AS "hasCompletedFindANotary",
+                   "EstatePlanModel"."created_at" AS "createdAt",
+                   "EstatePlanModel"."updated_at" AS "updatedAt",
+                   fn_calculate_times_reviewed("EstatePlanModel"."rand_id") AS "timesReviewed",
+                   "profile"."id" AS "profile.id",
+                   "profile"."rand_id" AS "profile.randId",
+                   "profile"."city" AS "profile.city",
+                   "profile"."state" AS "profile.administrativeArea",
+                   "profile"."country" AS "profile.country",
+                   "profile"."zip_code" AS "profile.postalCode",
+                   "profile"."county" AS "profile.county",
+                   "profile"."currency" AS "profile.currency",
+                   "profile"."gender" AS "profile.gender",
+                   "profile"."gender_desc" AS "profile.genderDesc",
+                   "profile"."birthdate" AS "profile.birthDate",
+                   "profile"."products" AS "profile.products",
+                   "profile"."flags" AS "profile.flags",
+                   "profile"."account_id" AS "profile.accountId",
+                   "profile"."address_1" AS "profile.address1",
+                   "profile"."address_2" AS "profile.address2",
+                   "profile"."f_name" AS "profile.fullName",
+                   "profile"."preferred_name" AS "profile.preferredName",
+                   "profile"."preferred_pronouns" AS "profile.preferredPronouns",
+                   "profile"."phone" AS "profile.phone",
+                   "profile"."terms_accepted_on" AS "profile.termsAcceptedOn",
+                   "profile"."terms_accepted_version" AS "profile.termsAcceptedVersion",
+                   "profile"."created_at" AS "profile.createdAt",
+                   "profile"."updated_at" AS "profile.updatedAt",
+                   "profile"."deleted_at" AS "profile.deletedAt",
+                   "profile->user"."id" AS "profile.user.id",
+                   "profile->user"."rand_id" AS "profile.user.randId",
+                   "profile->user"."encrypted_password" AS "profile.user.encryptedPassword",
+                   "profile->user"."email" AS "profile.user.email",
+                   "profile->user"."confirmed_at" AS "profile.user.confirmedAt",
+                   "profile->user"."confirmation_sent_at" AS "profile.user.confirmationSentAt",
+                   "profile->user"."confirmation_token" AS "profile.user.confirmationToken",
+                   "profile->user"."reset_password_sent_at" AS "profile.user.resetPasswordSentAt",
+                   "profile->user"."reset_password_token" AS "profile.user.resetPasswordToken",
+                   "profile->user"."sign_in_count" AS "profile.user.signInCount",
+                   "profile->user"."current_sign_in_at" AS "profile.user.currentSignInAt",
+                   "profile->user"."current_sign_in_ip" AS "profile.user.currentSignInIp",
+                   "profile->user"."last_sign_in_at" AS "profile.user.lastSignInAt",
+                   "profile->user"."last_sign_in_ip" AS "profile.user.lastSignInIp",
+                   "profile->user"."terms" AS "profile.user.terms",
+                   "profile->user"."created_at" AS "profile.user.createdAt",
+                   "profile->user"."updated_at" AS "profile.user.updatedAt",
+                   "profile->user"."deleted_at" AS "profile.user.deletedAt"
+              FROM "estate_plans" AS "EstatePlanModel"
+   LEFT OUTER JOIN "profiles" AS "profile"
+                ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+               AND ("profile"."deleted_at" IS NULL)
+   LEFT OUTER JOIN "users" AS "profile->user"
+                ON "profile"."account_id" = "profile->user"."rand_id"
+               AND ("profile->user"."deleted_at" IS NULL)
+             -- WHERE "EstatePlanModel"."rand_id" IN (NULL);

# 2022-10-05 14:10:24.909587
+31  Executing (default): SELECT "EstatePlanModel".* FROM (SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."update    d_at" AS "updatedAt" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_    id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id"     = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) WHERE ("EstatePlanModel"."last_section_completed" = 'rev    iew' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) AND ( SELECT "e    state_id" FROM "estate_charitable_gifts" AS "charitableGifts" WHERE (("charitableGifts"."deleted_at" IS NULL AND "charitableGif    ts"."created_at" > '2022-01-25 15:00:00.000 +00:00') AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id") LIMIT 1 )     IS NOT NULL ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0) AS "EstatePlanModel" INNER JOIN "estate_charitable    _gifts" AS "charitableGifts" ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at"     IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') ORDER BY "updatedAt" DESC; {
+
+
+}
+

# 2022-10-05 14:10:26.162693
+\e

# 2022-10-05 14:15:24.227383
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:15:45.823960
+\e

# 2022-10-05 14:19:23.627480
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:30:09.245337
+\e

# 2022-10-05 14:30:14.442602
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 0
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:30:57.064610
+\e

# 2022-10-05 14:33:26.252848
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 0
+                      AND (
+                            WITH cte_ecg AS (
+                              SELECT rand_id,
+                                     estate_id
+                                FROM estate_charitable_gifts
+                               WHERE estate_id = "EstatePlanModel.rand_id"
+                               LIMIT 1
+                            )
+                            SELECT COUNT(ecge.*)
+                              FROM estate_charitable_gift_events ecge
+                              JOIN cte_ecg
+                                ON ecge.estate_charitable_gift_id = cte_ecg.rand_id
+                             WHERE ecge.event_type = 'gift_review_update'
+                               AND ecge.created_source = 'freewill_user';
+                          ) >= 0
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:33:27.845884
+\e

# 2022-10-05 14:33:31.993249
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 0
+                      AND (
+                            WITH cte_ecg AS (
+                              SELECT rand_id,
+                                     estate_id
+                                FROM estate_charitable_gifts
+                               WHERE estate_id = "EstatePlanModel.rand_id"
+                               LIMIT 1
+                            )
+                            SELECT COUNT(ecge.*)
+                              FROM estate_charitable_gift_events ecge
+                              JOIN cte_ecg
+                                ON ecge.estate_charitable_gift_id = cte_ecg.rand_id
+                             WHERE ecge.event_type = 'gift_review_update'
+                               AND ecge.created_source = 'freewill_user'
+                          ) >= 0
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:33:33.747173
+\e

# 2022-10-05 14:46:40.632739
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 0
+                      AND (
+                            WITH cte_ecg AS (
+                              SELECT rand_id,
+                                     estate_id
+                                FROM estate_charitable_gifts
+                               WHERE estate_id = "EstatePlanModel.rand_id"
+                               LIMIT 1
+                            )
+                            SELECT COUNT(ecge.*)
+                              FROM estate_charitable_gift_events ecge
+                              JOIN cte_ecg
+                                ON ecge.estate_charitable_gift_id = cte_ecg.rand_id
+                             WHERE ecge.event_type = 'gift_review_update'
+                               AND ecge.created_source = 'freewill_user'
+                          ) >= 0
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:46:50.145425
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 0
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:46:55.942710
+\e

# 2022-10-05 14:47:00.898234
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:52:28.053584
+\e

# 2022-10-05 14:52:34.619037
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 2
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:52:47.759153
+\e

# 2022-10-05 14:53:07.963434
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") = 2
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:53:18.222161
+\e

# 2022-10-05 14:53:22.122328
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") = 0
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:53:28.116646
+\e

# 2022-10-05 14:53:36.181590
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-05 14:55:13.093278
+\e

# 2022-10-05 14:56:12.623767
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:35:29.561040
+\e

# 2022-10-06 11:35:33.131858
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:35:36.078741
+\e

# 2022-10-06 11:37:05.720281
+\d estat

# 2022-10-06 11:37:08.711459
+\d estate_charitable_gift_events

# 2022-10-06 11:37:11.791434
+\q

# 2022-10-06 11:38:08.637425
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."randId" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:38:13.806655
+\e

# 2022-10-06 11:38:20.026369
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:38:22.495241
+\e

# 2022-10-06 11:38:27.427697
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."rand_id")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:38:30.126871
+\e

# 2022-10-06 11:38:40.344617
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:38:45.382803
+\e

# 2022-10-06 11:46:54.435604
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."rand_id")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:46:57.366291
+\e

# 2022-10-06 11:47:10.722343
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:47:14.358939
+\e

# 2022-10-06 11:47:19.898459
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:47:32.221935
+\e

# 2022-10-06 11:47:35.316293
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:47:37.430449
+\e

# 2022-10-06 11:47:48.747976
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+     WHERE count > 1
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:47:49.926788
+\e

# 2022-10-06 11:48:21.589921
+    SELECT "EstatePlanModel".* --,
+           -- COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:48:24.848042
+\e

# 2022-10-06 11:48:36.548055
+    SELECT "EstatePlanModel".* --,
+           -- COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:48:43.134229
+\e

# 2022-10-06 11:48:46.977043
+    SELECT "EstatePlanModel".* --,
+           -- COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:48:47.670223
+\e

# 2022-10-06 11:49:00.841209
+    SELECT "EstatePlanModel".* --,
+           -- COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:49:10.757491
+\e

# 2022-10-06 11:49:15.097131
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:49:16.630612
+\e

# 2022-10-06 11:49:29.739452
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+INNER JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:49:41.244495
+\e

# 2022-10-06 11:49:46.913563
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:49:53.998323
+\e

# 2022-10-06 11:49:57.440760
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:49:58.694422
+\e

# 2022-10-06 11:50:03.546018
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+INNER JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:50:11.863239
+\e

# 2022-10-06 11:50:21.068757
+    SELECT "EstatePlanModel".*,
+           COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+INNER JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel".*
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:50:34.141909
+\e

# 2022-10-06 11:51:09.449201
+    SELECT "EstatePlanModel".*,
+           -- COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+           COUNT("charitableGiftEvents"."id")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+INNER JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:51:15.502038
+\e

# 2022-10-06 11:51:20.759294
+    SELECT "EstatePlanModel".*,
+           -- COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+           COUNT("charitableGiftEvents"."id")
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:51:28.442788
+\e

# 2022-10-06 11:51:40.584313
+    SELECT "EstatePlanModel".*,
+           -- COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+           COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:51:43.742679
+\e

# 2022-10-06 11:52:01.428602
+    SELECT "EstatePlanModel".*,
+           -- COUNT("charitableGiftEvents"."id") OVER (PARTITION BY "EstatePlanModel"."randId")
+           COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+     WHERE "timesReviewed" >= 1
+  GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:52:03.878944
+\e

# 2022-10-06 11:55:29.462251
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND COUNT("charitableGiftEvents"."id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:55:31.540564
+\e

# 2022-10-06 11:56:13.989464
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+             HAVING COUNT("charitableGiftEvents"."id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:56:16.181282
+\e

# 2022-10-06 11:57:42.101915
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+             HAVING COUNT("charitableGiftEvents"."id") >= 1
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:57:43.086051
+\e

# 2022-10-06 11:58:23.637921
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt"
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+             HAVING COUNT("charitableGiftEvents"."id") >= 1
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:58:26.286020
+\e

# 2022-10-06 11:58:29.067626
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+             HAVING COUNT("charitableGiftEvents"."id") >= 1
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:58:31.086035
+\e

# 2022-10-06 11:58:37.488227
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+             HAVING COUNT("charitableGiftEvents"."id") >= 1
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:58:38.389074
+\e

# 2022-10-06 11:58:52.437784
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:59:00.110661
+\d estate_charitable_gift_events

# 2022-10-06 11:59:03.031747
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:59:03.605446
+\e

# 2022-10-06 11:59:09.955133
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:59:12.916512
+\e

# 2022-10-06 11:59:17.845254
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:59:24.061769
+\e

# 2022-10-06 11:59:35.388600
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 11:59:41.910045
+\e

# 2022-10-06 12:00:04.535435
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:00:09.292853
+\e

# 2022-10-06 12:00:14.233226
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:00:19.838178
+\e

# 2022-10-06 12:00:40.458432
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+         INNER JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:00:45.813203
+\e

# 2022-10-06 12:02:13.818094
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:02:50.411400
+select count(*) from estate_charitable_gifts where estate_id = 'JmpsTLkK';

# 2022-10-06 12:02:59.290372
+select count(*) from estate_charitable_gifts where estate_id = 'HMn0BwzO';

# 2022-10-06 12:03:05.843603
+select count(*) from estate_charitable_gifts where estate_id = 'Ve3ggTuN';

# 2022-10-06 12:03:13.354175
+select count(*) from estate_charitable_gifts where estate_id = 'Y0XceAZa';

# 2022-10-06 12:03:16.671811
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:03:18.488511
+\e

# 2022-10-06 12:03:49.654844
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:03:53.496731
+\e

# 2022-10-06 12:04:00.580498
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND (
+                 "charitableGifts"."deleted_at" IS NULL
+             AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+           )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:04:02.168046
+\e

# 2022-10-06 12:04:41.043921
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:04:48.287454
+\e

# 2022-10-06 12:05:05.635188
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:05:09.287455
+\e

# 2022-10-06 12:05:15.368474
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+LEFT JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:05:17.293889
+\e

# 2022-10-06 12:05:21.266040
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+ JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:05:23.141828
+\e

# 2022-10-06 12:05:26.792949
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+OUTER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:05:28.575102
+\e

# 2022-10-06 12:05:32.178547
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+LEFT OUTER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:05:33.958139
+\e

# 2022-10-06 12:06:35.949993
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:06:49.979262
+select count(*) from estate_charitable_gifts where estate_id = 'HMn0BwzO';

# 2022-10-06 12:06:56.501202
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:06:58.997800
+\e

# 2022-10-06 12:07:19.253774
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:07:23.957286
+\e

# 2022-10-06 12:07:41.162621
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:07:43.933150
+\e

# 2022-10-06 12:08:26.951181
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "testing_1",
+                    COUNT("charitableGifts"."rand_id") AS "testing_2",
+                    COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:08:34.131704
+\e

# 2022-10-06 12:08:38.390049
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "testing_1",
+                    COUNT("charitableGifts"."rand_id") AS "testing_2",
+                    COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+         INNER JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:08:42.804639
+\e

# 2022-10-06 12:08:59.467497
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "testing_1",
+                    COUNT("charitableGifts"."rand_id") AS "testing_2",
+                    COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+         INNER JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:09:04.260225
+select count(null)
+;

# 2022-10-06 12:09:06.525309
+select count(null);

# 2022-10-06 12:09:10.937880
+select count(null) / 1;

# 2022-10-06 12:09:14.187565
+select count(null) / 0;

# 2022-10-06 12:09:15.452398
+select count(null) / 1;

# 2022-10-06 12:09:19.554501
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("charitableGiftEvents"."id") AS "testing_1",
+                    COUNT("charitableGifts"."rand_id") AS "testing_2",
+                    COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+         INNER JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:09:20.780198
+\e

# 2022-10-06 12:10:31.913640
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+         INNER JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:10:46.264906
+\e

# 2022-10-06 12:10:50.723951
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:11:01.985308
+\e

# 2022-10-06 12:11:45.511277
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                      AND "charitableGiftEvents"."event_type" = '???'
+                      AND "charitableGiftEvents"."source" = 'freewill_user'
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:11:53.117818
+select * from estate_charitable_gift_events limit 10;

# 2022-10-06 12:12:09.175547
+select * from estate_charitable_gift_events where created_source = 'freewill_user';

# 2022-10-06 12:12:13.630435
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                      AND "charitableGiftEvents"."event_type" = '???'
+                      AND "charitableGiftEvents"."source" = 'freewill_user'
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:12:14.413467
+\e

# 2022-10-06 12:12:27.693797
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                      AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                      AND "charitableGiftEvents"."created_source" = 'freewill_user'
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:12:29.888131
+\e

# 2022-10-06 12:12:41.268304
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:12:55.822677
+\e

# 2022-10-06 12:13:04.709952
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:13:06.879761
+\e

# 2022-10-06 12:15:05.929468
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:15:06.884926
+\e

# 2022-10-06 12:15:10.784493
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 0
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:15:12.437016
+\e

# 2022-10-06 12:15:23.674557
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:15:39.552010
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO');

# 2022-10-06 12:16:11.885995
+select * from estate_plans where rand_id = '001ddPVU';

# 2022-10-06 12:16:24.215656
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = '001ddPVU');

# 2022-10-06 12:16:34.158960
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO');

# 2022-10-06 12:17:08.992129
+insert into estate_charitable_gift_events
+(
+  estate_charitable_gift_id,
+  created_source,
+  event_type
+)
+values
+(
+  'cHtEwMYL',
+  'freewill_user',
+  'gift_review_update'
+);

# 2022-10-06 12:17:21.970710
+insert into estate_charitable_gift_events
+(
+  estate_charitable_gift_id,
+  created_source,
+  event_type
+)
+values
+(
+  'WUzuBoRF',
+  'freewill_user',
+  'gift_review_update'
+);

# 2022-10-06 12:17:27.315894
+select * from estate_plans where rand_id = '001ddPVU';

# 2022-10-06 12:17:32.227015
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO');

# 2022-10-06 12:17:39.326910
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:17:45.373955
+\e

# 2022-10-06 12:18:30.156689
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = "freewill_user"
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:18:32.633562
+\e

# 2022-10-06 12:18:37.948848
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:20:10.613722
+select count(distinct ep.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id join estate_charitable_gift_events ecge on ecg.rand_id = ecge.estate_charitable_gift_id where ecge.created_source = 'freewill_user' and ecge.event_type = 'gift_review_update';

# 2022-10-06 12:20:24.928558
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:20:27.143908
+\e

# 2022-10-06 12:20:40.054958
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:21:19.517036
+select count(distinct ep.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id join estate_charitable_gift_events ecge on ecg.rand_id = ecge.estate_charitable_gift_id where ecge.created_source = 'freewill_user' and ecge.event_type = 'gift_review_update' and ecg.deleted_at is null;

# 2022-10-06 12:21:58.661170
+select count(distinct ep.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id join estate_charitable_gift_events ecge on ecg.rand_id = ecge.estate_charitable_gift_id where ecge.created_source = 'freewill_user' and ecge.event_type = 'gift_review_update' and ecg.deleted_at is null and ecg.created_at > '2022-01-25'::timestamp;

# 2022-10-06 12:22:12.696982
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:22:14.727137
+\e

# 2022-10-06 12:22:36.928379
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:22:37.991679
+\e

# 2022-10-06 12:22:51.646971
+select count(distinct ep.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id join estate_charitable_gift_events ecge on ecg.rand_id = ecge.estate_charitable_gift_id where ecge.created_source = 'freewill_user' and ecge.event_type = 'gift_review_update' and ecg.deleted_at is null and ecg.created_at > '2022-01-25'::timestamp;

# 2022-10-06 12:22:52.943040
+\e

# 2022-10-06 12:23:27.514610
+select count(distinct ep.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id join estate_charitable_gift_events ecge on ecg.rand_id = ecge.estate_charitable_gift_id join profiles p on ep.profile_id = p.rand_id join users u on p.user_id = u.rand_id where ecge.created_source = 'freewill_user' and ecge.event_type = 'gift_review_update' and ecg.deleted_at is null and ecg.created_at > '2022-01-25'::timestamp;

# 2022-10-06 12:23:35.125965
+\d estate_plans

# 2022-10-06 12:23:48.453592
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:23:49.150361
+\e

# 2022-10-06 12:24:07.238374
+select count(distinct ep.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id join estate_charitable_gift_events ecge on ecg.rand_id = ecge.estate_charitable_gift_id join profiles p on ep.profile_id = p.rand_id join users u on p.user_id = u.rand_id where ecge.created_source = 'freewill_user' and ecge.event_type = 'gift_review_update' and ecg.deleted_at is null and ecg.created_at > '2022-01-25'::timestamp;

# 2022-10-06 12:24:07.973955
+\e

# 2022-10-06 12:24:17.981474
+select count(distinct ep.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id join estate_charitable_gift_events ecge on ecg.rand_id = ecge.estate_charitable_gift_id join profiles p on ep.profile_id = p.rand_id join users u on p.account_id = u.rand_id where ecge.created_source = 'freewill_user' and ecge.event_type = 'gift_review_update' and ecg.deleted_at is null and ecg.created_at > '2022-01-25'::timestamp;

# 2022-10-06 12:24:19.679405
+\e

# 2022-10-06 12:24:32.222952
+select count(distinct ep.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id join estate_charitable_gift_events ecge on ecg.rand_id = ecge.estate_charitable_gift_id join profiles p on ep.profile_id = p.rand_id join users u on p.account_id = u.rand_id where ecge.created_source = 'freewill_user' and ecge.event_type = 'gift_review_update' and ecg.deleted_at is null and ecg.created_at > '2022-01-25'::timestamp and p.deleted_at is null and u.deleted_at is null;

# 2022-10-06 12:24:39.053205
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:24:39.597946
+\e

# 2022-10-06 12:27:10.652992
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:27:19.448671
+select count(distinct ep.rand_id) from estate_plans ep join estate_charitable_gifts ecg ON ecg.estate_id = ep.rand_id join estate_charitable_gift_events ecge on ecg.rand_id = ecge.estate_charitable_gift_id join profiles p on ep.profile_id = p.rand_id join users u on p.account_id = u.rand_id where ecge.created_source = 'freewill_user' and ecge.event_type = 'gift_review_update' and ecg.deleted_at is null and ecg.created_at > '2022-01-25'::timestamp and p.deleted_at is null and u.deleted_at is null;

# 2022-10-06 12:27:20.660168
+\e

# 2022-10-06 12:28:07.959753
+select count(distinct ep.rand_id)
+  from estate_plans ep
+  join estate_charitable_gifts ecg
+    ON ecg.estate_id = ep.rand_id
+  join estate_charitable_gift_events ecge
+    on ecg.rand_id = ecge.estate_charitable_gift_id
+  join profiles p
+    on ep.profile_id = p.rand_id
+  join users u
+    on p.account_id = u.rand_id
+ where ecge.created_source = 'freewill_user'
+   and ecge.event_type = 'gift_review_update'
+   and ecg.deleted_at is null
+   and ecg.created_at > '2022-01-25'::timestamp
+   and p.deleted_at is null
+   and u.deleted_at is null;

# 2022-10-06 12:28:08.692239
+\e

# 2022-10-06 12:28:41.325530
+SELECT COUNT(DISTINCT ep.rand_id)
+  FROM estate_plans ep
+  JOIN estate_charitable_gifts ecg
+    ON ecg.estate_id = ep.rand_id
+  JOIN estate_charitable_gift_events ecge
+    ON ecg.rand_id = ecge.estate_charitable_gift_id
+  JOIN profiles p
+    ON ep.profile_id = p.rand_id
+  JOIN users u
+    ON p.account_id = u.rand_id
+ WHERE ecge.created_source = 'freewill_user'
+   AND ecge.event_type = 'gift_review_update'
+   AND ecg.deleted_at IS NULL
+   AND ecg.created_at > '2022-01-25'::timestamp
+   AND p.deleted_at IS NULL
+   AND u.deleted_at IS NULL;

# 2022-10-06 12:28:42.308629
+\e

# 2022-10-06 12:30:47.091335
+SELECT COUNT(DISTINCT ep.rand_id)
+  FROM estate_plans ep
+  JOIN estate_charitable_gifts ecg
+    ON ecg.estate_id = ep.rand_id
+  JOIN estate_charitable_gift_events ecge
+    ON ecg.rand_id = ecge.estate_charitable_gift_id
+  JOIN profiles p
+    ON ep.profile_id = p.rand_id
+  JOIN users u
+    ON p.account_id = u.rand_id
+ WHERE ecge.created_source = 'freewill_user'
+   AND ecge.event_type = 'gift_review_update'
+   AND ecg.deleted_at IS NULL
+   AND ecg.created_at > '2022-01-25'::timestamp
+   AND p.deleted_at IS NULL
+   AND u.deleted_at IS NULL;

# 2022-10-06 12:30:52.147202
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:30:52.755746
+\e

# 2022-10-06 12:31:32.146832
+SELECT COUNT(DISTINCT ep.rand_id)
+  FROM estate_plans ep
+  JOIN estate_charitable_gifts ecg
+    ON ecg.estate_id = ep.rand_id
+  JOIN estate_charitable_gift_events ecge
+    ON ecg.rand_id = ecge.estate_charitable_gift_id
+  JOIN profiles p
+    ON ep.profile_id = p.rand_id
+  JOIN users u
+    ON p.account_id = u.rand_id
+ WHERE ecge.created_source = 'freewill_user'
+   AND ecge.event_type = 'gift_review_update'
+   AND ecg.deleted_at IS NULL
+   AND ecg.created_at > '2022-01-25'::timestamp
+   AND p.deleted_at IS NULL
+   AND u.deleted_at IS NULL;

# 2022-10-06 12:31:32.714216
+\e

# 2022-10-06 12:31:53.204373
+SELECT COUNT(DISTINCT ep.rand_id)
+  FROM estate_plans ep
+  JOIN estate_charitable_gifts ecg
+    ON ecg.estate_id = ep.rand_id
+  JOIN estate_charitable_gift_events ecge
+    ON ecg.rand_id = ecge.estate_charitable_gift_id
+  JOIN profiles p
+    ON ep.profile_id = p.rand_id
+  JOIN users u
+    ON p.account_id = u.rand_id
+ WHERE ecge.created_source = 'freewill_user'
+   AND ecge.event_type = 'gift_review_update'
+   AND ecg.deleted_at IS NULL
+   AND ecg.created_at > '2022-01-25'::timestamp
+   AND p.deleted_at IS NULL
+   AND u.deleted_at IS NULL
+   AND ep.last_section_completed = 'review'
+   AND ep.is_fake IS NULL
+;

# 2022-10-06 12:32:09.418875
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:32:10.033490
+\e

# 2022-10-06 12:32:13.322778
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:32:21.818907
+SELECT COUNT(DISTINCT ep.rand_id)
+  FROM estate_plans ep
+  JOIN estate_charitable_gifts ecg
+    ON ecg.estate_id = ep.rand_id
+  JOIN estate_charitable_gift_events ecge
+    ON ecg.rand_id = ecge.estate_charitable_gift_id
+  JOIN profiles p
+    ON ep.profile_id = p.rand_id
+  JOIN users u
+    ON p.account_id = u.rand_id
+ WHERE ecge.created_source = 'freewill_user'
+   AND ecge.event_type = 'gift_review_update'
+   AND ecg.deleted_at IS NULL
+   AND ecg.created_at > '2022-01-25'::timestamp
+   AND p.deleted_at IS NULL
+   AND u.deleted_at IS NULL;

# 2022-10-06 12:32:22.361363
+\e

# 2022-10-06 12:33:13.754966
+UPDATE estate_plans
+   SET last_section_completed = 'review',
+       is_fake = null
+ WHERE rand_id in
+(SELECT ep.rand_id
+  FROM estate_plans ep
+  JOIN estate_charitable_gifts ecg
+    ON ecg.estate_id = ep.rand_id
+  JOIN estate_charitable_gift_events ecge
+    ON ecg.rand_id = ecge.estate_charitable_gift_id
+  JOIN profiles p
+    ON ep.profile_id = p.rand_id
+  JOIN users u
+    ON p.account_id = u.rand_id
+ WHERE ecge.created_source = 'freewill_user'
+   AND ecge.event_type = 'gift_review_update'
+   AND ecg.deleted_at IS NULL
+   AND ecg.created_at > '2022-01-25'::timestamp
+   AND p.deleted_at IS NULL
+   AND u.deleted_at IS NULL);

# 2022-10-06 12:33:32.007576
+SELECT COUNT(DISTINCT ep.rand_id)
+  FROM estate_plans ep
+  JOIN estate_charitable_gifts ecg
+    ON ecg.estate_id = ep.rand_id
+  JOIN estate_charitable_gift_events ecge
+    ON ecg.rand_id = ecge.estate_charitable_gift_id
+  JOIN profiles p
+    ON ep.profile_id = p.rand_id
+  JOIN users u
+    ON p.account_id = u.rand_id
+ WHERE ecge.created_source = 'freewill_user'
+   AND ecge.event_type = 'gift_review_update'
+   AND ecg.deleted_at IS NULL
+   AND ecg.created_at > '2022-01-25'::timestamp
+   AND p.deleted_at IS NULL
+   AND u.deleted_at IS NULL
+   AND ep.last_section_completed = 'review'
+   AND ep.is_fake IS NULL
+;

# 2022-10-06 12:33:36.806713
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:34:06.750765
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = '5hCNAidB');

# 2022-10-06 12:34:17.949418
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:34:54.870547
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'F2NPGMEh');

# 2022-10-06 12:35:16.707867
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:35:17.292456
+\e

# 2022-10-06 12:35:25.348805
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 2
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:35:26.716801
+\e

# 2022-10-06 12:35:31.250812
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:35:53.159260
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'F2NPGMEh');

# 2022-10-06 12:36:07.525670
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO');

# 2022-10-06 12:36:43.814850
+insert into estate_charitable_gift_events
+(
+  estate_charitable_gift_id,
+  created_source,
+  event_type
+)
+values
+(
+  'WUzuBoRF',
+  'freewill_user',
+  'gift_review_update'
+);

# 2022-10-06 12:36:48.934440
+insert into estate_charitable_gift_events
+(
+  estate_charitable_gift_id,
+  created_source,
+  event_type
+)
+values
+(
+  'cHtEwMYL',
+  'freewill_user',
+  'gift_review_update'
+);

# 2022-10-06 12:36:52.270809
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO');

# 2022-10-06 12:37:01.849344
+   -- SELECT "EstatePlanModel".*
+   --   FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+                    COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+                    COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+         INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+                 ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+          LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+                 ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+              WHERE (
+                          "EstatePlanModel"."last_section_completed" = 'review'
+                      AND "EstatePlanModel"."is_fake" IS NULL
+                      -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                    )
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                    ) IS NOT NULL
+                AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+                AND "charitableGiftEvents"."created_source" = 'freewill_user'
+           GROUP BY "EstatePlanModel"."rand_id",
+                    "EstatePlanModel"."updated_at"
+             HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+           ORDER BY "EstatePlanModel"."updated_at" DESC
+              LIMIT 15
+              OFFSET 0
+--           ) AS "EstatePlanModel"
+-- INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+--         ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+--        AND (
+--                  "charitableGifts"."deleted_at" IS NULL
+--              AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+--            )
+ -- LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+ --        ON "charitableGifts"."rand_id" = "charitableGiftEvents"."estate_charitable_gift_id"
+  -- GROUP BY "EstatePlanModel"."randId", "EstatePlanModel"."updatedAt"
+--  ORDER BY "updatedAt" DESC;

# 2022-10-06 12:37:22.131261
+\e

# 2022-10-06 12:37:53.870187
+    SELECT "EstatePlanModel"."rand_id" AS "randId",
+           "EstatePlanModel"."updated_at" AS "updatedAt",
+           COUNT(DISTINCT "charitableGiftEvents"."id") AS "testing_1",
+           COUNT(DISTINCT "charitableGifts"."rand_id") AS "testing_2",
+           COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+      FROM "estate_plans" AS "EstatePlanModel"
+INNER JOIN "profiles" AS "profile"
+        ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+       AND ("profile"."deleted_at" IS NULL)
+INNER JOIN "users" AS "profile->user"
+        ON "profile"."account_id" = "profile->user"."rand_id"
+       AND ("profile->user"."deleted_at" IS NULL)
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+     WHERE (
+                 "EstatePlanModel"."last_section_completed" = 'review'
+             AND "EstatePlanModel"."is_fake" IS NULL
+             -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+           )
+       AND (
+             SELECT "estate_id"
+               FROM "estate_charitable_gifts" AS "charitableGifts"
+              WHERE (
+                      (
+                            "charitableGifts"."deleted_at" IS NULL
+                        AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                      )
+                      AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                    )
+              LIMIT 1
+           ) IS NOT NULL
+       AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+       AND "charitableGiftEvents"."created_source" = 'freewill_user'
+  GROUP BY "EstatePlanModel"."rand_id",
+           "EstatePlanModel"."updated_at"
+    HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+  ORDER BY "EstatePlanModel"."updated_at" DESC
+     LIMIT 15
+     OFFSET 0;

# 2022-10-06 12:37:54.979178
+\e

# 2022-10-06 12:38:03.399902
+    SELECT "EstatePlanModel"."rand_id" AS "randId",
+           "EstatePlanModel"."updated_at" AS "updatedAt",
+           COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+      FROM "estate_plans" AS "EstatePlanModel"
+INNER JOIN "profiles" AS "profile"
+        ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+       AND ("profile"."deleted_at" IS NULL)
+INNER JOIN "users" AS "profile->user"
+        ON "profile"."account_id" = "profile->user"."rand_id"
+       AND ("profile->user"."deleted_at" IS NULL)
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+     WHERE (
+                 "EstatePlanModel"."last_section_completed" = 'review'
+             AND "EstatePlanModel"."is_fake" IS NULL
+           )
+       AND (
+             SELECT "estate_id"
+               FROM "estate_charitable_gifts" AS "charitableGifts"
+              WHERE (
+                      (
+                            "charitableGifts"."deleted_at" IS NULL
+                        AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                      )
+                      AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                    )
+              LIMIT 1
+           ) IS NOT NULL
+       AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+       AND "charitableGiftEvents"."created_source" = 'freewill_user'
+  GROUP BY "EstatePlanModel"."rand_id",
+           "EstatePlanModel"."updated_at"
+    HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+  ORDER BY "EstatePlanModel"."updated_at" DESC
+     LIMIT 15
+     OFFSET 0;

# 2022-10-06 12:38:06.179521
+\e

# 2022-10-06 12:42:31.729726
+    SELECT "EstatePlanModel"."rand_id" AS "randId",
+           "EstatePlanModel"."updated_at" AS "updatedAt",
+           COUNT(DISTINCT "charitableGiftEvents"."id") / COUNT(DISTINCT "charitableGifts"."rand_id") AS "timesReviewed"
+      FROM "estate_plans" AS "EstatePlanModel"
+INNER JOIN "profiles" AS "profile"
+        ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+       AND ("profile"."deleted_at" IS NULL)
+INNER JOIN "users" AS "profile->user"
+        ON "profile"."account_id" = "profile->user"."rand_id"
+       AND ("profile->user"."deleted_at" IS NULL)
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+ LEFT JOIN "estate_charitable_gift_events" as "charitableGiftEvents"
+        ON "charitableGiftEvents"."estate_charitable_gift_id" = "charitableGifts"."rand_id"
+     WHERE (
+                 "EstatePlanModel"."last_section_completed" = 'review'
+             AND "EstatePlanModel"."is_fake" IS NULL
+           )
+       AND (
+             SELECT "estate_id"
+               FROM "estate_charitable_gifts" AS "charitableGifts"
+              WHERE (
+                      (
+                            "charitableGifts"."deleted_at" IS NULL
+                        AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                      )
+                      AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                    )
+              LIMIT 1
+           ) IS NOT NULL
+       AND "charitableGiftEvents"."event_type" = 'gift_review_update'
+       AND "charitableGiftEvents"."created_source" = 'freewill_user'
+  GROUP BY "EstatePlanModel"."rand_id",
+           "EstatePlanModel"."updated_at"
+    HAVING COUNT("charitableGiftEvents"."id") / COUNT("charitableGifts"."rand_id") >= 1
+  ORDER BY "EstatePlanModel"."updated_at" DESC
+     LIMIT 15
+     OFFSET 0;

# 2022-10-06 12:56:27.501013
+\d estate_charitable_gift_events

# 2022-10-06 13:16:44.385839
+Executing (default): SELECT "EstatePlanModel".*, "charitableGifts->charitableGiftEvents"."id" AS "charitableGifts.charitableGiftEvents.id", "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AS "charitableGifts.charitableGiftEvents.estateCharitableGiftId", "charitableGifts->charitableGiftEvents"."event_type" AS "charitableGifts.charitableGiftEvents.eventType", "charitableGifts->charitableGiftEvents"."event_details" AS "charitableGifts.charitableGiftEvents.eventDetails", "charitableGifts->charitableGiftEvents"."created_by" AS "charitableGifts.charitableGiftEvents.createdBy", "charitableGifts->charitableGiftEvents"."created_source" AS "charitableGifts.charitableGiftEvents.createdSource" FROM (SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", COUNT("EstateCharitableGiftEventModel"."id") AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) AND ( SELECT "estate_id" FROM "estate_charitable_gifts" AS "charitableGifts" WHERE (("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id") LIMIT 1 ) IS NOT NULL GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0) AS "EstatePlanModel" INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" ORDER BY "updatedAt" DESC; {
+
+

# 2022-10-06 13:16:45.424048
+\e

# 2022-10-06 13:17:22.946195
+SELECT "EstatePlanModel".*,
+       "charitableGifts->charitableGiftEvents"."id" AS "charitableGifts.charitableGiftEvents.id",
+       "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AS "charitableGifts.charitableGiftEvents.estateCharitableGiftId",
+       "charitableGifts->charitableGiftEvents"."event_type" AS "charitableGifts.charitableGiftEvents.eventType",
+       "charitableGifts->charitableGiftEvents"."event_details" AS "charitableGifts.charitableGiftEvents.eventDetails", "charitableGifts->charitableGiftEvents"."created_by" AS "charitableGifts.charitableGiftEvents.createdBy", "charitableGifts->charitableGiftEvents"."created_source" AS "charitableGifts.charitableGiftEvents.createdSource" FROM (SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", COUNT("EstateCharitableGiftEventModel"."id") AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) AND ( SELECT "estate_id" FROM "estate_charitable_gifts" AS "charitableGifts" WHERE (("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id") LIMIT 1 ) IS NOT NULL GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0) AS "EstatePlanModel" INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" ORDER BY "updatedAt" DESC;

# 2022-10-06 13:18:27.895664
+Executing (default): SELECT "EstatePlanModel".* FROM (SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", COUNT("EstateCharitableGiftEventModel"."id") AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) AND ( SELECT "estate_id" FROM "estate_charitable_gifts" AS "charitableGifts" WHERE (("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id") LIMIT 1 ) IS NOT NULL GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0) AS "EstatePlanModel" INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" ORDER BY "updatedAt" DESC; {
+
+;

# 2022-10-06 13:18:28.466853
+\e

# 2022-10-06 13:22:44.372693
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("EstateCharitableGiftEventModel"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+                AND "EstatePlanModel"."is_fake" IS NULL
+                AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1)
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                     ) IS NOT NULL
+            GROUP BY "randId", "updatedAt"
+            ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND ("charitableGifts"."deleted_at" IS NULL
+       AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+  ORDER BY "updatedAt" DESC;
+
+;

# 2022-10-06 13:24:08.637927
+\e

# 2022-10-06 13:29:07.118112
+    SELECT "EstatePlanModel".*
+      FROM (
+             SELECT "EstatePlanModel"."rand_id" AS "randId",
+                    "EstatePlanModel"."updated_at" AS "updatedAt",
+                    COUNT("EstateCharitableGiftEventModel"."id") AS "timesReviewed"
+               FROM "estate_plans" AS "EstatePlanModel"
+         INNER JOIN "profiles" AS "profile"
+                 ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+                AND ("profile"."deleted_at" IS NULL)
+         INNER JOIN "users" AS "profile->user"
+                 ON "profile"."account_id" = "profile->user"."rand_id"
+                AND ("profile->user"."deleted_at" IS NULL)
+              WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+                AND "EstatePlanModel"."is_fake" IS NULL
+                AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1)
+                AND (
+                      SELECT "estate_id"
+                        FROM "estate_charitable_gifts" AS "charitableGifts"
+                       WHERE (
+                               (
+                                     "charitableGifts"."deleted_at" IS NULL
+                                 AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00'
+                               )
+                               AND "charitableGifts"."estate_id" = "EstatePlanModel"."rand_id"
+                             )
+                       LIMIT 1
+                     ) IS NOT NULL
+            GROUP BY "randId", "updatedAt"
+            ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0
+           ) AS "EstatePlanModel"
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."randId" = "charitableGifts"."estate_id"
+       AND ("charitableGifts"."deleted_at" IS NULL
+       AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+  ORDER BY "updatedAt" DESC;
+
+;

# 2022-10-06 13:29:09.714858
+Executing (default): SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", COUNT("charitableGifts->charitableGiftEvents"."id") AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0; {
+
+;

# 2022-10-06 13:29:10.225838
+\e

# 2022-10-06 13:31:08.260399
+    SELECT "EstatePlanModel"."rand_id" AS "randId",
+           "EstatePlanModel"."updated_at" AS "updatedAt",
+           COUNT("charitableGifts->charitableGiftEvents"."id") AS "timesReviewed"
+      FROM "estate_plans" AS "EstatePlanModel"
+INNER JOIN "profiles" AS "profile"
+        ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+       AND ("profile"."deleted_at" IS NULL)
+INNER JOIN "users" AS "profile->user"
+        ON "profile"."account_id" = "profile->user"."rand_id"
+       AND ("profile->user"."deleted_at" IS NULL)
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id"
+       AND ("charitableGifts"."deleted_at" IS NULL
+       AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+     WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+       AND "EstatePlanModel"."is_fake" IS NULL
+       AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1)
+  GROUP BY "randId", "updatedAt"
+  ORDER BY "EstatePlanModel"."updated_at" DESC
+     LIMIT 15
+    OFFSET 0;
+
+;

# 2022-10-06 13:31:23.575828
+\e

# 2022-10-06 13:33:25.496637
+    SELECT "EstatePlanModel"."rand_id" AS "randId",
+           "EstatePlanModel"."updated_at" AS "updatedAt",
+           COUNT("charitableGifts->charitableGiftEvents"."id") AS "timesReviewed"
+      FROM "estate_plans" AS "EstatePlanModel"
+INNER JOIN "profiles" AS "profile"
+        ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+       AND ("profile"."deleted_at" IS NULL)
+INNER JOIN "users" AS "profile->user"
+        ON "profile"."account_id" = "profile->user"."rand_id"
+       AND ("profile->user"."deleted_at" IS NULL)
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+        ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id"
+       AND ("charitableGifts"."deleted_at" IS NULL
+       AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+        ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+     WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+       AND "EstatePlanModel"."is_fake" IS NULL
+       AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1)
+  GROUP BY "randId", "updatedAt"
+  ORDER BY "EstatePlanModel"."updated_at" DESC
+     LIMIT 15
+    OFFSET 0;
+
+;

# 2022-10-06 13:36:03.919788
+Executing (default): SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", COUNT("charitableGifts->charitableGiftEvents"."id") AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0; {
+
+

# 2022-10-06 13:36:04.592178
+\e

# 2022-10-06 13:36:12.014822
+SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", COUNT("charitableGifts->charitableGiftEvents"."id") AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-06 13:36:30.952232
+\e

# 2022-10-06 13:40:39.674826
+SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", COUNT("charitableGifts->charitableGiftEvents"."id") AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-06 13:49:30.667274
+Executing (default): SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", div(COUNT("charitableGifts->charitableGiftEvents"."id"), COUNT("charitableGifts"."rand_id")) AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0; {
+

# 2022-10-06 13:49:32.187319
+\e

# 2022-10-06 13:50:25.581262
+SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", div(COUNT("charitableGifts->charitableGiftEvents"."id"), COUNT("charitableGifts"."rand_id")) AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-06 13:51:02.172039
+select div(4, 2);

# 2022-10-06 13:51:09.124189
+SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", div(COUNT("charitableGifts->charitableGiftEvents"."id"), COUNT("charitableGifts"."rand_id")) AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-06 13:51:10.202011
+\e

# 2022-10-06 13:52:24.446196
+SELECT "EstatePlanModel"."rand_id" AS "randId",
+       "EstatePlanModel"."updated_at" AS "updatedAt",
+       COUNT("charitableGifts->charitableGiftEvents"."id") AS "numEvents",
+       COUNT("charitableGifts"."rand_id") AS "numGifts",
+       div(COUNT("charitableGifts->charitableGiftEvents"."id"), COUNT("charitableGifts"."rand_id")) AS "timesReviewed"
+
+FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-06 13:53:10.227659
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO');

# 2022-10-06 13:53:57.932443
+SELECT "EstatePlanModel"."rand_id" AS "randId",
+       "EstatePlanModel"."updated_at" AS "updatedAt",
+       COUNT("charitableGifts->charitableGiftEvents"."id") AS "numEvents",
+       COUNT("charitableGifts"."rand_id") AS "numGifts",
+       div(COUNT("charitableGifts->charitableGiftEvents"."id"), COUNT("charitableGifts"."rand_id")) AS "timesReviewed"
+
+FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-06 13:53:59.404316
+\e

# 2022-10-06 13:55:29.430507
+SELECT "EstatePlanModel"."rand_id" AS "randId",
+       "EstatePlanModel"."updated_at" AS "updatedAt",
+       COUNT("charitableGifts->charitableGiftEvents"."id") AS "numEvents",
+       COUNT("charitableGifts"."rand_id") AS "numGifts",
+       div(COUNT("charitableGifts->charitableGiftEvents"."id"), COUNT("charitableGifts"."rand_id")) AS "timesReviewed"
+FROM "estate_plans" AS "EstatePlanModel"
+INNER JOIN "profiles" AS "profile"
+  ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+ AND ("profile"."deleted_at" IS NULL)
+INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL)
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1)
+GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-06 13:55:45.696257
+\e

# 2022-10-06 13:56:01.953430
+SELECT "EstatePlanModel"."rand_id" AS "randId",
+       "EstatePlanModel"."updated_at" AS "updatedAt",
+       COUNT("charitableGifts->charitableGiftEvents"."id") AS "numEvents",
+       COUNT("charitableGifts"."rand_id") AS "numGifts",
+       div(COUNT("charitableGifts->charitableGiftEvents"."id"), COUNT("charitableGifts"."rand_id")) AS "timesReviewed"
+FROM "estate_plans" AS "EstatePlanModel"
+INNER JOIN "profiles" AS "profile"
+  ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+ AND ("profile"."deleted_at" IS NULL)
+INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL)
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL
+GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-06 13:56:03.408230
+\e

# 2022-10-06 13:56:15.145261
+SELECT "EstatePlanModel"."rand_id" AS "randId",
+       "EstatePlanModel"."updated_at" AS "updatedAt",
+       COUNT("charitableGifts->charitableGiftEvents"."id") AS "numEvents",
+       COUNT("charitableGifts"."rand_id") AS "numGifts",
+       div(COUNT("charitableGifts->charitableGiftEvents"."id"), COUNT("charitableGifts"."rand_id")) AS "timesReviewed"
+FROM "estate_plans" AS "EstatePlanModel"
+INNER JOIN "profiles" AS "profile"
+  ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+ AND ("profile"."deleted_at" IS NULL)
+INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL)
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+  AND "EstatePlanModel"."is_fake" IS NULL
+GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-06 13:56:18.465295
+\e

# 2022-10-06 13:56:24.536828
+SELECT "EstatePlanModel"."rand_id" AS "randId",
+       "EstatePlanModel"."updated_at" AS "updatedAt",
+       COUNT("charitableGifts->charitableGiftEvents"."id") AS "numEvents",
+       COUNT("charitableGifts"."rand_id") AS "numGifts",
+       div(COUNT("charitableGifts->charitableGiftEvents"."id"), COUNT("charitableGifts"."rand_id")) AS "timesReviewed"
+FROM "estate_plans" AS "EstatePlanModel"
+INNER JOIN "profiles" AS "profile"
+  ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+ AND ("profile"."deleted_at" IS NULL)
+INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL)
+INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+  AND "EstatePlanModel"."is_fake" IS NULL)
+GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-06 13:56:28.600561
+\e

# 2022-10-07 11:22:08.732293
+select count(distinct ep.rand_id)
+;

# 2022-10-07 11:22:19.698787
+select count(distinct rand_id) from estate_plans;

# 2022-10-07 11:22:34.069398
+select count(distinct estate_id) from estate_charitable_gifts;

# 2022-10-07 11:22:39.426046
+select count(estate_id) from estate_charitable_gifts;

# 2022-10-07 11:22:40.907827
+select count(distinct estate_id) from estate_charitable_gifts;

# 2022-10-07 11:22:46.708368
+select distinct count(estate_id) from estate_charitable_gifts;

# 2022-10-07 11:22:49.814009
+select count(distinct estate_id) from estate_charitable_gifts;

# 2022-10-07 11:25:16.122037
+select count(distinct(estate_id)) from estate_charitable_gifts;

# 2022-10-07 11:28:16.557349
+Executing (default): SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0; {
+
+;

# 2022-10-07 11:28:17.008676
+\e

# 2022-10-07 11:28:57.165465
+SELECT "EstatePlanModel"."rand_id" AS "randId",
+       "EstatePlanModel"."updated_at" AS "updatedAt",
+       div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) AS "timesReviewed"
+  FROM "estate_plans" AS "EstatePlanModel"
+INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1) GROUP BY "randId", "updatedAt" ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0
+;

# 2022-10-07 11:30:30.564123
+\e

# 2022-10-07 11:33:55.968082
+         SELECT "EstatePlanModel"."rand_id" AS "randId",
+                "EstatePlanModel"."updated_at" AS "updatedAt",
+                div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) AS "timesReviewed"
+           FROM "estate_plans" AS "EstatePlanModel"
+     INNER JOIN "profiles" AS "profile"
+             ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+            AND ("profile"."deleted_at" IS NULL)
+     INNER JOIN "users" AS "profile->user"
+             ON "profile"."account_id" = "profile->user"."rand_id"
+            AND ("profile->user"."deleted_at" IS NULL)
+     INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+             ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id"
+            AND ("charitableGifts"."deleted_at" IS NULL
+            AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+             ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+            AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update'
+            AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+          WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+            AND "EstatePlanModel"."is_fake" IS NULL
+            -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1)
+         HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 1
+       GROUP BY "randId", "updatedAt"
+       ORDER BY "EstatePlanModel"."updated_at" DESC
+       LIMIT 15
+       OFFSET 0
+;

# 2022-10-07 11:33:57.729960
+\e

# 2022-10-07 11:34:04.173671
+         SELECT "EstatePlanModel"."rand_id" AS "randId",
+                "EstatePlanModel"."updated_at" AS "updatedAt",
+                div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) AS "timesReviewed"
+           FROM "estate_plans" AS "EstatePlanModel"
+     INNER JOIN "profiles" AS "profile"
+             ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+            AND ("profile"."deleted_at" IS NULL)
+     INNER JOIN "users" AS "profile->user"
+             ON "profile"."account_id" = "profile->user"."rand_id"
+            AND ("profile->user"."deleted_at" IS NULL)
+     INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+             ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id"
+            AND ("charitableGifts"."deleted_at" IS NULL
+            AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+             ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+            AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update'
+            AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+         HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 1
+          WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+            AND "EstatePlanModel"."is_fake" IS NULL
+            -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1)
+       GROUP BY "randId", "updatedAt"
+       ORDER BY "EstatePlanModel"."updated_at" DESC
+       LIMIT 15
+       OFFSET 0
+;

# 2022-10-07 11:34:05.354707
+\e

# 2022-10-07 11:34:34.703315
+         SELECT "EstatePlanModel"."rand_id" AS "randId",
+                "EstatePlanModel"."updated_at" AS "updatedAt",
+                div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) AS "timesReviewed"
+           FROM "estate_plans" AS "EstatePlanModel"
+     INNER JOIN "profiles" AS "profile"
+             ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+            AND ("profile"."deleted_at" IS NULL)
+     INNER JOIN "users" AS "profile->user"
+             ON "profile"."account_id" = "profile->user"."rand_id"
+            AND ("profile->user"."deleted_at" IS NULL)
+     INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+             ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id"
+            AND ("charitableGifts"."deleted_at" IS NULL
+            AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+             ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+            AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update'
+            AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+          WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+            AND "EstatePlanModel"."is_fake" IS NULL
+            -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1)
+       GROUP BY "randId", "updatedAt"
+         HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 1
+       ORDER BY "EstatePlanModel"."updated_at" DESC
+       LIMIT 15
+       OFFSET 0
+;

# 2022-10-07 11:34:37.075403
+\e

# 2022-10-07 11:34:46.006218
+         SELECT "EstatePlanModel"."rand_id" AS "randId",
+                "EstatePlanModel"."updated_at" AS "updatedAt",
+                div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) AS "timesReviewed"
+           FROM "estate_plans" AS "EstatePlanModel"
+     INNER JOIN "profiles" AS "profile"
+             ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+            AND ("profile"."deleted_at" IS NULL)
+     INNER JOIN "users" AS "profile->user"
+             ON "profile"."account_id" = "profile->user"."rand_id"
+            AND ("profile->user"."deleted_at" IS NULL)
+     INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+             ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id"
+            AND ("charitableGifts"."deleted_at" IS NULL
+            AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+             ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+            AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update'
+            AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+          WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+            AND "EstatePlanModel"."is_fake" IS NULL
+            -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                )
+       GROUP BY "randId", "updatedAt"
+         HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 1
+       ORDER BY "EstatePlanModel"."updated_at" DESC
+       LIMIT 15
+       OFFSET 0
+;

# 2022-10-07 11:34:51.464832
+\e

# 2022-10-07 11:35:00.277635
+         SELECT "EstatePlanModel"."rand_id" AS "randId",
+                "EstatePlanModel"."updated_at" AS "updatedAt",
+                div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) AS "timesReviewed"
+           FROM "estate_plans" AS "EstatePlanModel"
+     INNER JOIN "profiles" AS "profile"
+             ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+            AND ("profile"."deleted_at" IS NULL)
+     INNER JOIN "users" AS "profile->user"
+             ON "profile"."account_id" = "profile->user"."rand_id"
+            AND ("profile->user"."deleted_at" IS NULL)
+     INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+             ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id"
+            AND ("charitableGifts"."deleted_at" IS NULL
+            AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+             ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+            AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update'
+            AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+          WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+            AND "EstatePlanModel"."is_fake" IS NULL
+            -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                )
+       GROUP BY "randId", "updatedAt"
+         -- HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 1
+       ORDER BY "EstatePlanModel"."updated_at" DESC
+       LIMIT 15
+       OFFSET 0
+;

# 2022-10-07 12:23:48.251560
+\e

# 2022-10-07 12:23:55.558887
+         SELECT "EstatePlanModel"."rand_id" AS "randId",
+                "EstatePlanModel"."updated_at" AS "updatedAt",
+                div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) AS "timesReviewed"
+           FROM "estate_plans" AS "EstatePlanModel"
+     INNER JOIN "profiles" AS "profile"
+             ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+            AND ("profile"."deleted_at" IS NULL)
+     INNER JOIN "users" AS "profile->user"
+             ON "profile"."account_id" = "profile->user"."rand_id"
+            AND ("profile->user"."deleted_at" IS NULL)
+     INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+             ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id"
+            AND ("charitableGifts"."deleted_at" IS NULL
+            AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+             ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+            AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update'
+            AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+          WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+            AND "EstatePlanModel"."is_fake" IS NULL
+            -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1
+                )
+       GROUP BY "randId", "updatedAt"
+         HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 1
+       ORDER BY "EstatePlanModel"."updated_at" DESC
+       LIMIT 15
+       OFFSET 0
+;

# 2022-10-07 12:36:03.955690
+Executing (default): SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) AS "timesReviewed" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL) GROUP BY "randId", "updatedAt" HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 1 ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0; {
+
+;

# 2022-10-07 12:36:04.380531
+\e

# 2022-10-07 12:36:27.918691
+SELECT "EstatePlanModel"."rand_id" AS "randId",
+       "EstatePlanModel"."updated_at" AS "updatedAt",
+       div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) AS "timesReviewed"
+  FROM "estate_plans" AS "EstatePlanModel"
+INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL) GROUP BY "randId", "updatedAt" HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 1 ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0
+;

# 2022-10-07 12:37:17.646906
+         SELECT "EstatePlanModel"."rand_id" AS "randId",
+                "EstatePlanModel"."updated_at" AS "updatedAt",
+                div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) AS "timesReviewed"
+           FROM "estate_plans" AS "EstatePlanModel"
+     INNER JOIN "profiles" AS "profile"
+             ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+            AND ("profile"."deleted_at" IS NULL)
+     INNER JOIN "users" AS "profile->user"
+             ON "profile"."account_id" = "profile->user"."rand_id"
+            AND ("profile->user"."deleted_at" IS NULL)
+     INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+             ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id"
+            AND ("charitableGifts"."deleted_at" IS NULL
+            AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+             ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+            AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update'
+            AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+          WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+            AND "EstatePlanModel"."is_fake" IS NULL
+            -- AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1)
+         HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 1
+       GROUP BY "randId", "updatedAt"
+       ORDER BY "EstatePlanModel"."updated_at" DESC
+       LIMIT 15
+       OFFSET 0
+;

# 2022-10-07 12:37:19.520949
+\e

# 2022-10-07 12:37:42.228192
+         SELECT "EstatePlanModel"."rand_id" AS "randId",
+                "EstatePlanModel"."updated_at" AS "updatedAt",
+                fn_calculate_times_reviewed("EstatePlanModel"."rand_id") AS "timesReviewed"
+           FROM "estate_plans" AS "EstatePlanModel"
+     INNER JOIN "profiles" AS "profile"
+             ON "EstatePlanModel"."profile_id" = "profile"."rand_id"
+            AND ("profile"."deleted_at" IS NULL)
+     INNER JOIN "users" AS "profile->user"
+             ON "profile"."account_id" = "profile->user"."rand_id"
+            AND ("profile->user"."deleted_at" IS NULL)
+     INNER JOIN "estate_charitable_gifts" AS "charitableGifts"
+             ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id"
+            AND ("charitableGifts"."deleted_at" IS NULL
+            AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00')
+LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+             ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id"
+            AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update'
+            AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+          WHERE ("EstatePlanModel"."last_section_completed" = 'review'
+            AND "EstatePlanModel"."is_fake" IS NULL
+            AND fn_calculate_times_reviewed("EstatePlanModel"."rand_id") >= 1)
+       GROUP BY "randId", "updatedAt"
+       ORDER BY "EstatePlanModel"."updated_at" DESC
+       LIMIT 15
+       OFFSET 0
+;

# 2022-10-07 13:05:18.228494
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'GSLAZ5bn');

# 2022-10-07 13:06:30.717669
+SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL) GROUP BY "randId", "updatedAt" HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 2 ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0; 

# 2022-10-07 13:06:34.050029
+\e

# 2022-10-07 13:07:19.237376
+SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", count(distinct("charitableGifts->charitableGiftEevnts"."id")) as "eventsCount" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL) GROUP BY "randId", "updatedAt" HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 2 ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-07 13:07:26.002881
+\e

# 2022-10-07 13:07:30.195945
+SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", count(distinct("charitableGifts->charitableGiftEvents"."id")) as "eventsCount" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL) GROUP BY "randId", "updatedAt" HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 2 ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-07 13:07:34.378700
+\e

# 2022-10-07 13:07:53.558002
+SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."updated_at" AS "updatedAt", count(distinct("charitableGifts->charitableGiftEvents"."id")) as "eventsCount" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE ("EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL) GROUP BY "randId", "updatedAt" HAVING div(COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")), COUNT(DISTINCT("charitableGifts"."rand_id"))) >= 2 ORDER BY "EstatePlanModel"."updated_at" DESC LIMIT 15 OFFSET 0;

# 2022-10-07 13:17:08.236657
+select '10';

# 2022-10-07 13:17:13.842133
+select typeof('10');

# 2022-10-07 13:17:24.585197
+select pg_typeof('10');

# 2022-10-07 13:17:28.084959
+select pg_typeof('10'::text);

# 2022-10-07 13:17:30.131291
+select pg_typeof('10');

# 2022-10-07 13:17:55.932752
+select pg_typeof(cast('10') as int);

# 2022-10-07 13:18:17.602191
+select pg_typeof(cast('10')::int);

# 2022-10-07 13:18:19.450915
+select pg_typeof(cast('10')::integer);

# 2022-10-07 13:18:26.029050
+select pg_typeof('10'::integer);

# 2022-10-07 13:18:32.901251
+select '10'::integer;

# 2022-10-07 13:19:03.613322
+select CAST('10') AS integer;

# 2022-10-10 11:57:16.774895
+select 1 / 3;

# 2022-10-10 11:57:19.071282
+select 2 / 3;

# 2022-10-10 11:57:20.831416
+select 3 / 3;

# 2022-10-10 11:57:24.333894
+select 4 / 3;

# 2022-10-10 11:57:25.990338
+select 5 / 3;

# 2022-10-10 11:57:27.558230
+select 6 / 3;

# 2022-10-10 12:20:09.610349
+select counT(*) from estate_plans;

# 2022-10-10 12:23:48.400644
+select 6 / 3.0;

# 2022-10-10 12:23:50.513599
+select 5 / 3.0;

# 2022-10-10 12:23:52.657040
+select 3 / 3.0;

# 2022-10-10 12:23:59.104394
+select 6 / 3::float;

# 2022-10-10 12:24:01.831938
+select 5 / 3::float;

# 2022-10-10 12:24:03.810507
+select 4 / 3::float;

# 2022-10-10 12:35:43.170443
+select 4 / 3 + 0.0;

# 2022-10-10 12:35:45.709504
+select 4 / (3 + 0.0);

# 2022-10-10 12:36:00.465582
+select div(4, 3 + 0.0);

# 2022-10-10 12:36:04.881972
+select div(5, 3 + 0.0);

# 2022-10-10 12:36:07.409095
+select div(5, 3 + 1.0;

# 2022-10-10 12:36:09.288722
+select div(5, 3 + 1.0);

# 2022-10-10 12:36:16.881534
+select div(5, 3.0);

# 2022-10-10 12:36:18.842035
+select div(6, 3.0);

# 2022-10-10 12:37:33.931730
+select div(5, 3);

# 2022-10-10 12:37:36.483976
+select mod(5, 3);

# 2022-10-10 12:38:13.309178
+select div(1,2);

# 2022-10-10 12:38:15.793785
+select mod(1,2);

# 2022-10-10 12:38:47.863569
+select mod(1,2) + div(1,2);

# 2022-10-10 12:38:52.264087
+select mod(1,3) + div(1,3);

# 2022-10-10 12:38:56.142257
+select mod(1,99) + div(1,99);

# 2022-10-10 12:39:05.701125
+select mod(3,1) + div(3,1);

# 2022-10-10 12:39:15.264210
+select mod(3,2) + div(3,2);

# 2022-10-10 12:39:55.801473
+select mod(5,3) + div(5,3);

# 2022-10-10 12:40:40.150207
+select add(1,2);

# 2022-10-10 12:41:14.667553
+select sum(1,2);

# 2022-10-10 12:41:21.306754
+select sum(1);

# 2022-10-10 12:43:13.942606
+select ceil(1.2);

# 2022-10-10 12:43:51.161322
+select mod(5,3) + div(5,3);

# 2022-10-10 12:43:56.289455
+select mod(5,4) + div(5,4);

# 2022-10-10 12:44:12.017426
+select mod(5,5) + div(5,5);

# 2022-10-10 12:44:15.264546
+select mod(5,1) + div(5,1);

# 2022-10-10 12:44:19.225700
+select mod(5,2) + div(5,2);

# 2022-10-10 12:50:15.419530
+select round(1.2);

# 2022-10-10 12:50:17.403356
+select round(1.6);

# 2022-10-10 14:18:27.774292
+select count(*) from estate_plans;

# 2022-10-10 14:18:32.317963
+select rand_id from estate_plans;

# 2022-10-10 14:40:46.178942
+Executing (default): SELECT "EstatePlanModel"."rand_id" AS "randId", "EstatePlanModel"."rand_id" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' WHERE "EstatePlanModel"."last_section_completed" = 'review' AND "EstatePlanModel"."is_fake" IS NULL GROUP BY "EstatePlanModel"."rand_id" HAVING COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")) >= 1; {
+
+;

# 2022-10-10 14:40:46.570755
+\e

# 2022-10-10 14:41:28.036589
+SELECT "EstatePlanModel"."rand_id" AS "randId",
+       "EstatePlanModel"."rand_id"
+  FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+ WHERE "EstatePlanModel"."last_section_completed" = 'review'
+   AND "EstatePlanModel"."is_fake" IS NULL
+ GROUP BY "EstatePlanModel"."rand_id"
+HAVING COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")) >= 1
+;

# 2022-10-10 14:41:31.137857
+\e

# 2022-10-10 14:41:52.140296
+SELECT "EstatePlanModel"."rand_id" AS "randId",
+       COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id"))
+  FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+ WHERE "EstatePlanModel"."last_section_completed" = 'review'
+   AND "EstatePlanModel"."is_fake" IS NULL
+ GROUP BY "EstatePlanModel"."rand_id"
+HAVING COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")) >= 1
+;

# 2022-10-10 14:42:07.841040
+\e

# 2022-10-10 14:42:12.878423
+SELECT "EstatePlanModel"."rand_id" AS "randId",
+       array_agg(DISTINCT("charitableGifts->charitableGiftEvents"."id"))
+  FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND ("charitableGifts"."deleted_at" IS NULL AND "charitableGifts"."created_at" > '2022-01-25 15:00:00.000 +00:00') LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND "charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'
+ WHERE "EstatePlanModel"."last_section_completed" = 'review'
+   AND "EstatePlanModel"."is_fake" IS NULL
+ GROUP BY "EstatePlanModel"."rand_id"
+HAVING COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")) >= 1
+;

# 2022-10-10 14:42:41.595613
+select * from estate_charitable_gift_events where id in [19556, 19557, 19558, 19559, 19560, 19561, 19562, 19563, 19564];

# 2022-10-10 14:42:52.028790
+select * from estate_charitable_gift_events where id in (19556, 19557, 19558, 19559, 19560, 19561, 19562, 19563, 19564);

# 2022-10-10 14:43:19.134196
+select * from estate_charitable_gifts where rand_id in (select estate_charitable_gift_id from estate_charitable_gift_events where id in (19556, 19557, 19558, 19559, 19560, 19561, 19562, 19563, 19564));

# 2022-10-10 14:46:54.472837
+select fn_calculate_times_reviewed('5hCNAidB');

# 2022-10-10 14:47:31.412379
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = '5hCNAidB');

# 2022-10-10 14:52:18.043596
+select fn_calculate_times_reviewed('5hCNAidB');

# 2022-10-10 14:52:25.782919
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = '5hCNAidB');

# 2022-10-10 14:53:55.157442
+select fn_calculate_times_reviewed('Djqm2thg');

# 2022-10-10 15:19:52.871620
+select * from estate_plans where rand_id = '7mNRqxPL';

# 2022-10-10 15:25:28.630907
+select last_section_completed, updated_at from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-11 11:47:24.962992
+select is_fake, last_section_completed, updated_at from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-11 12:14:32.702048
+\q

# 2022-10-11 12:14:50.699566
+select count(*) from estate_charitable_gift_events where created_source = 'freewill_user';

# 2022-10-11 12:37:20.995280
+select count(*) from estate_plans ep join estate_charitable_gifts ecg on ecg.estate_id = ep.rand_id join estate_charitable_gift_events ecge on ecge.estate_charitable_gift_id = ecg.rand_id where ecge.created_source = 'freewill_user' and ecge.event_type = 'gift_review_update';

# 2022-10-11 12:37:30.409143
+select count(*) from estate_plans ep join estate_charitable_gifts ecg on ecg.estate_id = ep.rand_id join estate_charitable_gift_events ecge on ecge.estate_charitable_gift_id = ecg.rand_id where ecge.created_source = 'freewill_user' and ecge.event_type = 'gift_review_update' and ep.is_fake is null;

# 2022-10-11 12:38:40.147974
+select * from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-11 12:40:09.811333
+select count(*) from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO')

# 2022-10-11 12:40:11.939887
+select count(*) from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO');

# 2022-10-11 12:40:17.419130
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO');

# 2022-10-11 12:41:01.482127
+select * from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-11 13:09:46.954554
+\q

# 2022-10-11 13:09:52.444236
+select * from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-13 12:24:22.198880
+\q

# 2022-10-13 12:24:36.379672
+select * from estate_plans where rand_id = 'YXS915Am';

# 2022-10-14 13:47:59.423377
+\d completion_events

# 2022-10-14 13:48:21.114666
+select * from completion_events limit 10;

# 2022-10-14 13:48:40.487165
+select * from rand_ids_in_use where rand_id = 'OKtMenAr';

# 2022-10-14 13:48:53.447012
+select * from estate_plans where rand_id = 'OKtMenAr';

# 2022-10-20 11:34:52.063675
+select * from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-20 11:35:21.172491
+update estate_plans set is_fake = true where rand_id = 'HMn0BwzO';

# 2022-10-20 12:08:54.944457
+select * from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-20 12:09:24.234801
+update estate_plans set is_fake = true where rand_id = 'HMn0BwzO';

# 2022-10-20 12:10:46.284183
+select * from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-20 12:10:48.161810
+update estate_plans set is_fake = true where rand_id = 'HMn0BwzO';

# 2022-10-20 12:10:55.498966
+select * from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-20 12:12:02.462738
+select rand_id, is_fake from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-21 12:14:33.339199
+\d estate_charitable_gift_events

# 2022-10-24 12:31:59.742673
+select rand_id, is_fake from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-24 12:32:13.485781
+select rand_id, is_fake, fn_calculate_times_reviewed('HMn0BwzO') from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-24 12:32:59.845078
+select * from estate_charitable_gifts where estate_id = 'HMn0BwzO';

# 2022-10-24 12:33:27.970524
+\q

# 2022-10-24 12:33:36.274600
+select rand_id, is_fake, fn_calculate_times_reviewed('HMn0BwzO') from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-24 12:34:58.176782
+select * from users where email ilike '%riley%freewill%';

# 2022-10-24 12:35:20.604741
+select * from users where email ilike 'riley@freewill.com';

# 2022-10-24 12:35:34.635105
+select * from estate_plans where rand_id = 'Uj6GRPtc';

# 2022-10-24 12:35:51.461172
+select * from estate_plans where account_id = 'Uj6GRPtc';

# 2022-10-24 12:35:56.003583
+\d estate_plans

# 2022-10-24 12:36:11.286151
+select rand_id from profiles where account_id = 'Uj6GRPtc';

# 2022-10-24 12:36:24.823407
+select * from estate_plans where profile_id in (select rand_id from profiles where account_id = 'Uj6GRPtc');

# 2022-10-24 12:36:38.005816
+select rand_id, is_fake, fn_calculate_times_reviewed('HMn0BwzO') from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-24 12:36:45.829387
+select rand_id, is_fake from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-24 12:37:28.790186
+select created_at, updated_at from estate_charitable_gifts where estate_id = 'HMn0BwzO' order by created_at desc;

# 2022-10-24 12:37:37.734014
+select created_at, updated_at from estate_charitable_gifts where estate_id = 'HMn0BwzO' order by created_at asc;

# 2022-10-24 13:53:38.739979
+select rand_id, is_fake, fn_calculate_times_reviewed('HMn0BwzO') from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-24 13:54:35.802250
+select * from estate_charitable_gift_events limit 1;

# 2022-10-24 13:54:49.205869
+select * from estate_charitable_gift_events where event_type = 'gift_review_update';

# 2022-10-24 13:55:07.681162
+select event_details->>'valid' from estate_charitable_gift_events where event_type = 'gift_review_update';

# 2022-10-24 13:55:15.482413
+select event_details->>'reason' from estate_charitable_gift_events where event_type = 'gift_review_update';

# 2022-10-24 13:55:25.775265
+select event_details->>'value' from estate_charitable_gift_events where event_type = 'gift_review_update';

# 2022-10-24 13:55:32.859434
+select distinct event_details->>'value' from estate_charitable_gift_events where event_type = 'gift_review_update';

# 2022-10-24 13:56:02.399368
+select rand_id, is_fake, fn_calculate_times_reviewed('HMn0BwzO') from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-25 11:32:49.607430
+\d estate_charitable_gift_events

# 2022-10-25 11:33:06.152613
+select count(*) from estate_charitable_gift_events where event_details is null;

# 2022-10-25 11:33:40.985518
+select ((null)::jsonb)->>'value';

# 2022-10-25 11:33:45.626120
+select ((null)::jsonb);

# 2022-10-25 11:33:48.464867
+select ((null);

# 2022-10-25 11:33:51.526440
+select null;

# 2022-10-25 11:34:10.297936
+select ('{"value":"riley"}')::jsonb->>'riley';

# 2022-10-25 11:34:15.855133
+select ('{"value":"riley"}')::jsonb;

# 2022-10-25 11:34:23.405273
+select (('{"value":"riley"}')::jsonb)->'riley';

# 2022-10-25 11:34:25.606492
+select (('{"value":"riley"}')::jsonb)->>'riley';

# 2022-10-25 11:34:29.472987
+select (('{"value":"riley"}')::jsonb)->>'value';

# 2022-10-25 11:34:31.633244
+select (('{"value":"riley"}')::jsonb)->'value';

# 2022-10-25 11:34:33.010340
+select (('{"value":"riley"}')::jsonb)->>'value';

# 2022-10-25 11:34:39.697541
+select ((null)::jsonb)->>'value';

# 2022-10-25 11:47:44.373946
+select null in (1,2);

# 2022-10-25 11:47:48.277842
+select null in (1,2,3);

# 2022-10-25 11:48:03.023259
+select distinct event_details->>'value' from estate_charitable_gift_events where event_type = 'gift_review_update';

# 2022-10-25 11:48:44.598888
+select (('{"value":"riley"}')::jsonb)->>'value';

# 2022-10-25 11:48:54.193191
+select coalesce((('{"value":"riley"}')::jsonb)->>'value', false);

# 2022-10-25 11:49:18.103764
+select coalesce((('{"value":"riley"}')::jsonb)->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 11:49:27.735980
+select coalesce((('{"value":"VALID"}')::jsonb)->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 11:49:32.933719
+select coalesce(((null)::jsonb)->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 11:49:45.024305
+select coalesce((('{"value":null}')::jsonb)->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 11:49:59.857407
+select coalesce((('{"riley":"VALID"}')::jsonb)->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 11:50:21.064702
+select rand_id, is_fake, fn_calculate_times_reviewed('HMn0BwzO') from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-25 11:51:11.009681
+select * from estate_charitable_gift_events where event_type = 'gift_review_update' and created_source = 'freewill_user' and estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO');

# 2022-10-25 11:51:49.526337
+\q

# 2022-10-25 11:51:54.123770
+select * from estate_charitable_gift_events where event_type = 'gift_review_update' and created_source = 'freewill_user' and estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO');

# 2022-10-25 11:52:47.443635
+select rand_id, is_fake, fn_calculate_times_reviewed('HMn0BwzO') from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-25 12:06:57.517319
+select * from estate_charitable_gift_events where event_type = 'gift_review_update' and created_source = 'freewill_user' and estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = 'HMn0BwzO');

# 2022-10-25 12:07:28.138777
+select rand_id, is_fake, fn_calculate_times_reviewed('HMn0BwzO') from estate_plans where rand_id = 'HMn0BwzO';

# 2022-10-25 12:15:10.221224
+select coalesce((('{"riley":"VALID"}')::jsonb)->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:15:14.384967
+select coalesce((('{"riley":"VALID"}')::jsonb) ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:15:21.117890
+select coalesce((('{"value":"VALID"}')::jsonb) ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:17:04.668625
+select coalesce(('{"value":"VALID"}')::jsonb ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:17:10.057748
+select coalesce(('{"value":"aVALID"}')::jsonb ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:17:11.253017
+select coalesce(('{"value":"VALID"}')::jsonb ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:17:16.333735
+select coalesce(('{"riley":"VALID"}')::jsonb ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:17:17.815643
+select coalesce(('{"value":"VALID"}')::jsonb ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:17:23.988403
+select coalesce('{"value":"VALID"}'::jsonb ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:17:33.244828
+select coalesce('{"riley":"VALID"}'::jsonb ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:17:35.308020
+select coalesce('{"value":"VALID"}'::jsonb ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:17:39.662178
+select coalesce('{"value":"aVALID"}'::jsonb ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:17:54.629607
+select coalesce('{"value":"VALID"}'::jsonb ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:18:02.980667
+select coalesce(null ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:18:12.460787
+select coalesce(null::jsonb ->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:18:19.134358
+select coalesce(null ::jsonb->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-25 12:18:30.886835
+select coalesce('{"value":"VALID"}' ::jsonb->>'value' in ('VALID', 'INVALID'), false);

# 2022-10-31 11:49:35.404065
+\q

# 2022-10-31 11:50:02.806605
+select count(*) from estate_charitable_gift_events where created_source = 'freewill_user';

# 2022-10-31 11:50:18.997725
+select count(*) from estate_charitable_gift_events where created_source = 'freewill_user' and event_type = 'gift_review_update';

# 2022-10-31 11:50:32.187301
+select count(*) from estate_charitable_gift_events where created_source = 'freewill_user' and event_type = 'gift_review_update' and event_details->>'value' in ('VALID', 'INVALID');

# 2022-10-31 12:14:49.235461
+\q

# 2022-10-31 12:14:57.273240
+select count(*) from estate_charitable_gift_events where created_source = 'freewill_user' and event_type = 'gift_review_update' and event_details->>'value' in ('VALID', 'INVALID');

# 2022-10-31 12:17:02.129104
+Executing (default): SELECT "EstatePlanModel"."rand_id", "EstatePlanModel"."rand_id" AS "randId" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND "charitableGifts"."deleted_at" IS NULL LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' AND ("charitableGifts->charitableGiftEvents"."event_details"#>>'{->>''value'' in}') = '(''VALID'', ''INVALID'')') WHERE "EstatePlanModel"."last_section_completed" = 'review' GROUP BY "EstatePlanModel"."rand_id" HAVING COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")) >= 1;

# 2022-10-31 12:17:03.265208
+\e

# 2022-10-31 12:17:09.493650
+SELECT "EstatePlanModel"."rand_id", "EstatePlanModel"."rand_id" AS "randId" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND "charitableGifts"."deleted_at" IS NULL LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' AND ("charitableGifts->charitableGiftEvents"."event_details"#>>'{->>''value'' in}') = '(''VALID'', ''INVALID'')') WHERE "EstatePlanModel"."last_section_completed" = 'review' GROUP BY "EstatePlanModel"."rand_id" HAVING COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")) >= 1;

# 2022-10-31 12:17:14.138459
+\e

# 2022-10-31 12:18:38.155664
+SELECT count(*) FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" WHERE "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' AND ("charitableGifts->charitableGiftEvents"."event_details"#>>'{->>''value'' in}') = '(''VALID'', ''INVALID'')') ;

# 2022-10-31 12:18:40.291852
+\e

# 2022-10-31 12:18:59.191362
+SELECT count(*) FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" WHERE ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' AND ("charitableGifts->charitableGiftEvents"."event_details"#>>'{->>''value'' in}') = '(''VALID'', ''INVALID'')') ;

# 2022-10-31 12:19:00.322026
+\e

# 2022-10-31 12:19:26.278637
+SELECT count(*) FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" WHERE ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' AND ("charitableGifts->charitableGiftEvents"."event_details">>'{->>''value'' in}') = '(''VALID'', ''INVALID'')') ;

# 2022-10-31 12:19:28.023512
+\e

# 2022-10-31 12:21:23.578069
+SELECT ("charitableGifts->charitableGiftEvents"."event_details")#>>'{->>''value'' in}' = '(''VALID'', ''INVALID'')')
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" WHERE ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'  ;

# 2022-10-31 12:21:26.470756
+\e

# 2022-10-31 12:21:32.213457
+SELECT ("charitableGifts->charitableGiftEvents"."event_details")#>>'{->>''value'' in}'
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" WHERE ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user'  ;

# 2022-10-31 12:21:33.398992
+\e

# 2022-10-31 12:21:40.641633
+SELECT ("charitableGifts->charitableGiftEvents"."event_details")#>>'{->>''value'' in}'
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" WHERE ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user';

# 2022-10-31 12:21:43.225384
+\e

# 2022-10-31 12:22:00.348441
+SELECT ("charitableGifts->charitableGiftEvents"."event_details")#>>'{->>''value'' in}' FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" WHERE ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update';

# 2022-10-31 12:22:01.575733
+\e

# 2022-10-31 12:22:25.881068
+SELECT event_details#>>'{->>''value'' in}' FROM "estate_charitable_gift_events";

# 2022-10-31 12:22:29.752932
+\e

# 2022-10-31 12:22:34.810836
+SELECT distinct event_details#>>'{->>''value'' in}' FROM "estate_charitable_gift_events";

# 2022-10-31 12:22:35.862931
+\e

# 2022-10-31 12:22:48.619183
+SELECT distinct event_details#>>'value' FROM "estate_charitable_gift_events";

# 2022-10-31 12:22:52.368620
+\e

# 2022-10-31 12:22:57.113719
+SELECT distinct event_details#>>'{->>''value'' in}' FROM "estate_charitable_gift_events";

# 2022-10-31 12:22:58.007110
+\e

# 2022-10-31 12:23:04.586706
+SELECT distinct event_details#>>'{value}' FROM "estate_charitable_gift_events";

# 2022-10-31 12:23:08.664114
+\e

# 2022-10-31 12:24:31.642075
+Executing (default): SELECT "EstatePlanModel"."rand_id", "EstatePlanModel"."rand_id" AS "randId" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND "charitableGifts"."deleted_at" IS NULL LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' AND ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = 'ANY(''VALID'', ''INVALID'')') WHERE "EstatePlanModel"."last_section_completed" = 'review' GROUP BY "EstatePlanModel"."rand_id" HAVING COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")) >= 1; 

# 2022-10-31 12:24:32.544793
+\e

# 2022-10-31 12:26:15.070427
+SELECT ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+-- ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = 'ANY(''VALID'', ''INVALID'')')
+
+;

# 2022-10-31 12:26:16.555189
+\e

# 2022-10-31 12:26:19.255360
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+-- ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = 'ANY(''VALID'', ''INVALID'')')
+
+;

# 2022-10-31 12:26:20.958385
+\e

# 2022-10-31 12:26:41.873249
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = 'ANY(''VALID'', ''INVALID'')')
+
+;

# 2022-10-31 12:26:44.652683
+\e

# 2022-10-31 12:26:54.807927
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = 'ANY(''VALID'', ''INVALID'')'
+
+;

# 2022-10-31 12:26:56.510176
+\e

# 2022-10-31 12:27:04.057616
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY(''VALID'', ''INVALID'')
+
+;

# 2022-10-31 12:27:06.231125
+\e

# 2022-10-31 12:27:14.625787
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY('VALID', 'INVALID')
+
+;

# 2022-10-31 12:27:16.869357
+\e

# 2022-10-31 12:27:30.705388
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY{'VALID', 'INVALID'}
+
+;

# 2022-10-31 12:27:33.558832
+\e

# 2022-10-31 12:28:54.153340
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY({'VALID', 'INVALID'})
+
+;

# 2022-10-31 12:28:55.961096
+\e

# 2022-10-31 12:29:04.369370
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY({'VALID', 'INVALID'})
+
+;

# 2022-10-31 12:29:12.032338
+select {1,2,3};

# 2022-10-31 12:29:20.242246
+select '{1,2,3}'::INTEGER[];

# 2022-10-31 12:29:28.067873
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY({'VALID', 'INVALID'})
+
+;

# 2022-10-31 12:29:28.529246
+\e

# 2022-10-31 12:30:15.746652
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY('{\'VALID\', \'INVALID\'}'::TEXT[])
+
+;

# 2022-10-31 12:30:19.289478
+\e

# 2022-10-31 12:30:25.484785
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY('{\'VALID\', \'INVALID\'}'::TEXT[])
+
+;

# 2022-10-31 12:30:31.361108
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY({'VALID', 'INVALID'})
+
+;

# 2022-10-31 12:30:37.523778
+select '{1,2,3}'::INTEGER[];

# 2022-10-31 12:30:38.440241
+\e

# 2022-10-31 12:30:50.592541
+select '{"riley","voor"}'::INTEGER[];

# 2022-10-31 12:30:55.875480
+select '{"riley","voor"}'::text[];

# 2022-10-31 12:31:01.261916
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY({'VALID', 'INVALID'})
+
+;

# 2022-10-31 12:31:01.841812
+\e

# 2022-10-31 12:31:14.073952
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY('{"VALID", "INVALID"}'::TEXT[])
+
+;

# 2022-10-31 12:31:45.579135
+\e

# 2022-10-31 12:31:53.007307
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY({"VALID", "INVALID"})
+
+;

# 2022-10-31 12:31:58.101478
+select '{"riley","voor"}'::text[];

# 2022-10-31 12:32:03.622081
+select {"riley","voor"};

# 2022-10-31 12:33:03.486388
+select '{"riley","voor"}';

# 2022-10-31 12:33:09.717520
+select '{"riley","voor"}'::text[];

# 2022-10-31 12:33:17.076377
+select '{"riley","voor"}'->0;

# 2022-10-31 12:33:23.333283
+select '{"riley","voor"}';

# 2022-10-31 12:33:38.824548
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY({"VALID", "INVALID"})
+
+;

# 2022-10-31 12:33:39.350594
+\e

# 2022-10-31 12:33:48.296865
+SELECT distinct ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}')
+
+FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY('{"VALID", "INVALID"}')
+
+;

# 2022-10-31 12:35:40.078018
+Executing (default): SELECT "EstatePlanModel"."rand_id", "EstatePlanModel"."rand_id" AS "randId" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND "charitableGifts"."deleted_at" IS NULL LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' AND ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = 'ANY(''{"VALID", "INVALID"}'')') WHERE "EstatePlanModel"."last_section_completed" = 'review' GROUP BY "EstatePlanModel"."rand_id" HAVING COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")) >= 1; 

# 2022-10-31 12:35:40.851947
+\e

# 2022-10-31 12:36:53.895476
+SELECT distinct "charitableGifts->charitableGiftEvents"."event_details"#>>'{value}' FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = 'ANY(''{"VALID", "INVALID"}'')')
+
+;

# 2022-10-31 12:36:55.459985
+\e

# 2022-10-31 12:36:59.622308
+SELECT distinct "charitableGifts->charitableGiftEvents"."event_details"#>>'{value}' FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = 'ANY(''{"VALID", "INVALID"}'')'
+
+;

# 2022-10-31 12:37:00.853034
+\e

# 2022-10-31 12:37:13.565038
+SELECT distinct "charitableGifts->charitableGiftEvents"."event_details"#>>'{value}' FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = 'ANY('{"VALID", "INVALID"}')'
+
+;

# 2022-10-31 12:37:15.761645
+\e

# 2022-10-31 12:37:20.450483
+SELECT distinct "charitableGifts->charitableGiftEvents"."event_details"#>>'{value}' FROM "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents"
+
+WHERE ("charitableGifts->charitableGiftEvents"."event_details"#>>'{value}') = ANY('{"VALID", "INVALID"}')
+
+;

# 2022-10-31 12:41:47.553278
+Executing (default): SELECT "EstatePlanModel"."rand_id", "EstatePlanModel"."rand_id" AS "randId" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND "charitableGifts"."deleted_at" IS NULL LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' AND "charitableGifts->charitableGiftEvents"."event_details"->>'value' IN ('VALID', 'INVALID')) WHERE "EstatePlanModel"."last_section_completed" = 'review' GROUP BY "EstatePlanModel"."rand_id" HAVING COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")) >= 1; 

# 2022-10-31 12:41:48.295917
+\e

# 2022-10-31 12:41:55.903065
+SELECT "EstatePlanModel"."rand_id", "EstatePlanModel"."rand_id" AS "randId" FROM "estate_plans" AS "EstatePlanModel" INNER JOIN "profiles" AS "profile" ON "EstatePlanModel"."profile_id" = "profile"."rand_id" AND ("profile"."deleted_at" IS NULL) INNER JOIN "users" AS "profile->user" ON "profile"."account_id" = "profile->user"."rand_id" AND ("profile->user"."deleted_at" IS NULL) INNER JOIN "estate_charitable_gifts" AS "charitableGifts" ON "EstatePlanModel"."rand_id" = "charitableGifts"."estate_id" AND "charitableGifts"."deleted_at" IS NULL LEFT OUTER JOIN "estate_charitable_gift_events" AS "charitableGifts->charitableGiftEvents" ON "charitableGifts"."rand_id" = "charitableGifts->charitableGiftEvents"."estate_charitable_gift_id" AND ("charitableGifts->charitableGiftEvents"."event_type" = 'gift_review_update' AND "charitableGifts->charitableGiftEvents"."created_source" = 'freewill_user' AND "charitableGifts->charitableGiftEvents"."event_details"->>'value' IN ('VALID', 'INVALID')) WHERE "EstatePlanModel"."last_section_completed" = 'review' GROUP BY "EstatePlanModel"."rand_id" HAVING COUNT(DISTINCT("charitableGifts->charitableGiftEvents"."id")) >= 1;

# 2022-10-31 12:43:37.069750
+select count(*) from estate_charitable_gift_events where created_source = 'freewill_user' and event_type = 'gift_review_update' and event_details->>'value' not in ('VALID', 'INVALID');

# 2022-10-31 12:44:34.640820
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = '0oLJb8MO');

# 2022-10-31 12:44:55.711722
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = '0oLJb8MO') and created_source = 'freewill_user' and event_type = 'gift_status_update';

# 2022-10-31 12:44:57.373645
+\e

# 2022-10-31 12:45:09.320349
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = '0oLJb8MO') and created_source = 'freewill_user' and event_type = 'gift_review_update';

# 2022-10-31 12:46:32.071679
+insert into estate_charitable_gift_events (estate_charitable_gift_id, event_type, event_details, created_source) values ('IjOkK2Nj', 'gift_review_update', '{"value":"UNREVIEWED"}'::jsonb, 'freewill_user');

# 2022-10-31 12:46:34.511744
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = '0oLJb8MO') and created_source = 'freewill_user' and event_type = 'gift_review_update';

# 2022-10-31 12:47:08.246322
+delete from estate_charitable_gift_events where id = 20594;

# 2022-10-31 12:47:10.622408
+select * from estate_charitable_gift_events where estate_charitable_gift_id in (select rand_id from estate_charitable_gifts where estate_id = '0oLJb8MO') and created_source = 'freewill_user' and event_type = 'gift_review_update';

# 2022-10-31 12:47:22.972524
+select fn_undo_last_transaction();

# 2022-10-31 12:48:02.484596
+rollback;

# 2022-10-31 12:48:19.206665
+insert into estate_charitable_gift_events (estate_charitable_gift_id, event_type, event_details, created_source) values ('IjOkK2Nj', 'gift_review_update', '{"value":"VALID"}'::jsonb, 'freewill_user');

# 2022-11-01 13:58:48.555691
+select * from profiles where f_name->>'last' = 'Riley';

# 2022-11-01 13:58:57.587326
+select * from profiles where f_name->>'last' = 'Voor';

# 2022-11-01 13:59:18.900199
+select * from users where email ilike 'riley@freewill.com';

# 2022-11-01 13:59:33.562367
+select * from profiles where account_id = 'Uj6GRPtc';

# 2022-11-03 13:05:43.456209
+\d programs

# 2022-11-07 13:24:11.617246
+select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2022-11-07 13:26:30.684719
+select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com');

# 2022-11-07 13:26:42.225449
+select profile_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2022-11-07 13:30:57.094371
+\q

# 2022-11-07 13:31:02.180196
+select profile_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2022-11-07 13:32:24.532052
+select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2022-11-09 15:46:41.051160
+select profile_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2022-11-17 12:20:19.600176
+\q

# 2022-11-21 12:33:20.221496
+select * from users where email = 'customerio-test@freewill.com';

# 2022-11-21 12:33:32.388434
+select * from profiles where account_id = 'H5EiQxkr';

# 2022-11-21 12:34:16.100315
+select * from estate_plans where profile_id in (select rand_id from profiles where account_id = 'H5EiQxkr');

# 2022-11-30 11:36:48.479144
+select * from organizations limit 1;

# 2022-11-30 11:37:03.513645
+select feature_background_image from organizations where feature_background_image is not null;

# 2022-11-30 13:47:25.005428
+\d organizations

# 2022-12-02 12:33:06.401939
+\q

# 2022-12-02 12:33:36.545421
+select * from organizations where display_name ilike 'botanic%gardens';

# 2022-12-02 12:33:43.122055
+select * from organizations where display_name ilike 'brandeis';

# 2022-12-02 12:33:47.560437
+select * from organizations where display_name ilike 'braille';

# 2022-12-02 12:33:51.734071
+select * from organizations where legal_name ilike 'braille';

# 2022-12-02 12:33:55.641661
+select * from organizations where legal_name ilike 'bread';

# 2022-12-02 12:33:59.688600
+select * from organizations where legal_name ilike 'bridging';

# 2022-12-02 12:34:07.363918
+select * from organizations where legal_name ilike 'bsc';

# 2022-12-02 12:34:12.423058
+select * from organizations where legal_name ilike 'bethany';

# 2022-12-02 12:34:21.389044
+select * from organizations limit 1;

# 2022-12-02 12:37:25.788307
+select * from organizations where legal_name ilike '%2nd%chance%4%pets%';

# 2022-12-02 12:37:31.291457
+select * from organizations where dispaly_name ilike '%2nd%chance%4%pets%';

# 2022-12-02 12:37:39.756294
+select * from organizations where display_name ilike '%2nd%chance%4%pets%';

# 2022-12-02 12:37:58.396349
+select * from organizations where display_name ilike '%acfb%';

# 2022-12-02 13:29:17.937956
+select * from organizations where display_name ilike '%born%free%usa%';

# 2022-12-02 13:29:37.894396
+select * from organizations where display_name ilike '%abc%';

# 2022-12-02 13:29:42.738071
+select * from organizations where legal_name ilike '%abc%';

# 2022-12-02 13:30:14.578664
+select * from organizations where ANY(allowed_domains) ilike '%abc%';

# 2022-12-02 13:30:24.147322
+select * from organizations where '%abc%' ilike ANY(allowed_domains);

# 2022-12-02 13:30:30.563277
+select * from organizations where '%abc%' ilike ANY(allowed_domains::array);

# 2022-12-02 13:30:36.428014
+select * from organizations where '%abc%' ilike ANY(allowed_domains::text[]);

# 2022-12-02 13:30:58.365566
+select * from organizations where allowed_domains->>0 ilike '%abc%';

# 2022-12-02 13:31:04.147842
+select * from organizations where allowed_domains->>0 ilike '%bornfreeusa%';

# 2022-12-02 13:31:09.108417
+select * from organizations where allowed_domains->>0 ilike '%abc%';

# 2022-12-02 13:33:57.782581
+select * from organizations where allowed_domains->>0 ilike '%mdgoodwill%';

# 2022-12-02 13:34:04.852792
+select * from organizations where allowed_domains->>0 ilike '%md%good%will%';

# 2022-12-02 13:34:11.592995
+select * from organizations where display_name ilike '%md%good%will%';

# 2022-12-02 13:34:15.440282
+select * from organizations where legal_name ilike '%md%good%will%';

# 2022-12-02 13:34:45.131583
+select count(*) from organizations where jsonb_array_length(allowed_domains) > 1;

# 2022-12-02 13:34:52.066716
+select count(*) from organizations where jsonb_array_length(allowed_domains) = 1;

# 2022-12-05 11:57:58.093546
+\d programs

# 2022-12-05 12:10:39.832563
+select legal_name from organizations;

# 2022-12-05 12:55:28.176572
+\q

# 2022-12-05 12:55:41.502642
+select count(*) from organizations where legal_name is null;

# 2022-12-05 12:55:43.847511
+\q

# 2022-12-06 12:01:37.634873
+select count(*) from programs where legal_name is null;

# 2022-12-06 12:01:40.810349
+select count(*) from programs where legal_name = '';

# 2022-12-06 12:01:42.353389
+\q

# 2022-12-06 12:02:56.620777
+select count(*) from programs where legal_name in (select legal_name from organizations);

# 2022-12-06 12:03:06.604342
+select count(*) from programs where legal_name not in (select legal_name from organizations);

# 2022-12-06 12:03:10.410485
+\q

# 2022-12-06 12:04:58.683076
+select legal_name from organizations;

# 2022-12-06 12:05:34.251844
+select rand_id, legal_name from organizations where legal_name ilike '%make%a%wish%';

# 2022-12-06 12:05:49.649956
+select * from programs where organization_id = '54m1Y5OS';

# 2022-12-06 12:06:09.489184
+select legal_name from programs where organization_id = '54m1Y5OS';

# 2022-12-14 15:23:54.798652
+\q

# 2022-12-23 14:18:29.652919
+select * from estate_plans limit 1;

# 2023-01-09 14:54:16.800437
+\d estate_plans

# 2023-01-10 12:38:37.955576
+\d profiles

# 2023-01-10 12:52:27.070646
+select * from profiles where rand_id = 'cBGZTgcT';

# 2023-01-10 12:53:17.600647
+update profiles set prefers_email = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-10 12:53:20.372304
+select * from profiles where rand_id = 'cBGZTgcT';

# 2023-01-10 13:13:25.705673
+select ANY(null, null, 3) is not null;

# 2023-01-10 13:14:08.864746
+select ANY(select null union select null union select 3) is not null;

# 2023-01-10 13:14:32.055988
+select 3 where ANY(select null union select null union select 3) is not null;

# 2023-01-10 13:14:43.141007
+select count(*) from profiles where ANY(select null union select null union select 3) is not null;

# 2023-01-10 14:51:15.475890
+ALTER TABLE profiles DROP COLUMN prefers_email, drop column prefers_text_message, drop column prefers_phone_call, drop column prefers_postal_mail, drop column prefers_no_contact;

# 2023-01-10 14:51:20.913080
+\d profiles

# 2023-01-10 14:52:51.984528
+ALTER TABLE profiles DROP COLUMN prefers_email, drop column prefers_text_message, drop column prefers_phone_call, drop column prefers_postal_mail, drop column prefers_no_contact;

# 2023-01-10 14:54:13.692870
+\d profiles

# 2023-01-10 14:54:26.404438
+select * from profiles where rand_id = 'cBGZTgcT';

# 2023-01-10 14:54:38.380357
+update profiles set prefers_email = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-10 14:57:51.260015
+ALTER TABLE profiles DROP COLUMN prefers_email, drop column prefers_text_message, drop column prefers_phone_call, drop column prefers_postal_mail, drop column prefers_no_contact;

# 2023-01-10 14:57:56.833313
+\d profiles

# 2023-01-10 14:58:02.138508
+update profiles set prefers_email = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-10 14:58:33.506020
+select prefers_email, prefers_text_message, prefers_phone_call, prefers_postal_mail, prefers_no_contact from profiles where rand_id = 'cBGZTgcT';

# 2023-01-10 14:58:43.785552
+update profiles set prefers_no_contact = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-10 14:58:48.771843
+select prefers_email, prefers_text_message, prefers_phone_call, prefers_postal_mail, prefers_no_contact from profiles where rand_id = 'cBGZTgcT';

# 2023-01-10 14:59:22.610471
+update profiles set prefers_email = null where rand_id = 'cBGZTgcT';

# 2023-01-10 14:59:27.274713
+update profiles set prefers_no_contact = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-10 14:59:32.258370
+select prefers_email, prefers_text_message, prefers_phone_call, prefers_postal_mail, prefers_no_contact from profiles where rand_id = 'cBGZTgcT';

# 2023-01-10 14:59:51.139214
+update profiles set prefers_no_contact = null, prefers_text_message = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-10 14:59:55.609668
+select prefers_email, prefers_text_message, prefers_phone_call, prefers_postal_mail, prefers_no_contact from profiles where rand_id = 'cBGZTgcT';

# 2023-01-10 15:00:06.322865
+update profiles set prefers_no_contact = null, prefers_text_message = CURRENT_TIMESTAMP, prefers_email = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-10 15:00:14.034455
+update profiles set prefers_no_contact = CURRENT_TIMESTAMP, prefers_text_message = CURRENT_TIMESTAMP, prefers_email = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-10 15:00:17.154751
+select prefers_email, prefers_text_message, prefers_phone_call, prefers_postal_mail, prefers_no_contact from profiles where rand_id = 'cBGZTgcT';

# 2023-01-11 13:21:44.001042
+select * from profiles where account_id in (select rand_id from users where email_address = 'riley@freewill.com');

# 2023-01-11 13:21:48.462876
+select * from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com');

# 2023-01-11 13:22:20.798751
+select * from profiles where rand_id = 'Ysa1zNOo';

# 2023-01-11 13:22:35.670529
+select * from estate_plans where rand_id = 'Ysa1zNOo';

# 2023-01-11 13:22:42.817246
+select * from estate_plans where profile_id = 'Ysa1zNOo';

# 2023-01-11 13:22:56.848037
+update estate_plans set has_permission_to_share_info = null where profile_id = 'Ysa1zNOo';

# 2023-01-11 13:22:59.272407
+select * from estate_plans where profile_id = 'Ysa1zNOo';

# 2023-01-12 12:24:54.545146
+ALTER TABLE profiles DROP COLUMN prefers_email, drop column prefers_text_message, drop column prefers_phone_call, drop column prefers_postal_mail, drop column prefers_no_contact;

# 2023-01-12 12:25:18.285636
+drop function fn_check_communication_preferences_validity;

# 2023-01-12 12:25:31.299481
+drop trigger check_communication_preferences_validity;

# 2023-01-12 12:25:40.292598
+drop trigger check_communication_preferences_validity on profiles;

# 2023-01-12 12:25:43.636438
+drop function fn_check_communication_preferences_validity;

# 2023-01-12 12:25:59.701437
+select prefers_email, prefers_text_message, prefers_phone_call, prefers_postal_mail, prefers_no_contact from profiles where rand_id = 'cBGZTgcT';

# 2023-01-12 12:26:06.891273
+select * from profiles where rand_id = 'cBGZTgcT';

# 2023-01-12 12:50:43.455491
+select country from profiles;

# 2023-01-12 12:50:47.290700
+select country from profiles limit 1;

# 2023-01-12 12:50:52.105461
+select * from profiles limit 1;

# 2023-01-12 12:50:59.288331
+\q

# 2023-01-12 12:52:21.628579
+select * from profiles limit 1;

# 2023-01-12 12:54:49.724132
+select * from profiles where f_name->>'last' = 'Voor3';

# 2023-01-12 12:55:21.002915
+select * from profiles where f_name->>'last' = 'Voor4';

# 2023-01-12 12:56:59.663593
+select * from profiles where f_name->>'last' = 'Voor5';

# 2023-01-12 13:17:56.231476
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-12 13:18:21.638129
+update profiles set prefers_text_message = CURRENT_TIMESTAMP, prefers_email = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-12 13:18:38.934764
+update profiles set is_text_message_preferred = CURRENT_TIMESTAMP, is_email_preferred = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-12 14:03:07.609382
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-12 14:03:26.077483
+update profiles set is_phone_call_preferred = CURRENT_TIMESTAMP, is_text_message_preferred = CURRENT_TIMESTAMP, is_email_preferred = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-12 14:03:42.109279
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-12 14:10:42.982957
+update profiles set is_no_contact_preferred = null where rand_id = 'cBGZTgcT';

# 2023-01-12 14:10:45.311263
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-12 14:35:15.029635
+update profiles set is_phone_call_preferred = CURRENT_TIMESTAMP, is_text_message_preferred = CURRENT_TIMESTAMP, is_email_preferred = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-12 14:35:18.797488
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-12 15:02:50.818147
+select rand_id from estate_plans where profile_id = 'cBGZTgcT';

# 2023-01-12 15:03:06.226535
+update estate_plans set has_permission_to_share_info = null where profile_id = 'cBGZTgcT';

# 2023-01-12 15:53:34.814064
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-13 13:54:14.685216
+select * from pg_catalog.pg_namespace;

# 2023-01-13 13:54:45.634289
+select column_name, data_type from information_schema.columns;

# 2023-01-13 13:54:53.430259
+select * from information_schema.columns;

# 2023-01-13 13:55:16.186716
+select * from information_schema.columns where table_catalog = 'freewill_dev' and schema = 'public';

# 2023-01-13 13:55:23.739162
+select * from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public';

# 2023-01-13 13:55:32.523159
+select * from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public' and data_type = 'timestampz';

# 2023-01-13 13:55:34.235147
+select * from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public' and data_type = 'timestamp';

# 2023-01-13 13:55:41.091449
+select * from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public' and data_type = 'TIMESTAMP';

# 2023-01-13 13:55:50.505061
+select distinct data_type from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public';

# 2023-01-13 13:56:16.341946
+select * from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public' and data_type = 'date' limit 1;

# 2023-01-13 13:56:30.835026
+select expected_transfer_date from stock_gifts;

# 2023-01-13 13:56:38.707994
+select distinct data_type from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public';

# 2023-01-13 13:56:59.128679
+select * from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public' and data_type = 'timestamp without time zone' limit 10;

# 2023-01-13 13:57:15.893663
+select distinct column_name from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public' and data_type = 'timestamp without time zone' limit 10;

# 2023-01-13 13:57:39.714582
+\d profiles

# 2023-01-13 13:58:06.525963
+select * from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public' and table_name = 'profiles';

# 2023-01-13 13:58:40.509603
+select distinct column_name from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public' and data_type = 'timestamp without time zone';

# 2023-01-13 14:11:29.168452
+ALTER TABLE profiles DROP COLUMN is_email_preferred, drop column is_text_message_preferred, drop column is_phone_call_preferred, drop column is_postal_mail_preferred, drop column is_no_contact_preferred;

# 2023-01-13 14:11:42.035058
+\d profiles

# 2023-01-13 14:11:48.447522
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-13 14:21:18.335241
+ALTER TABLE profiles DROP COLUMN is_email_preferred, drop column is_text_message_preferred, drop column is_phone_call_preferred, drop column is_postal_mail_preferred, drop column is_no_contact_preferred;

# 2023-01-13 14:21:55.118346
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-13 14:21:58.506777
+\d profiles

# 2023-01-13 14:22:26.351328
+update profiles set is_phone_call_preferred = CURRENT_TIMESTAMP, is_text_message_preferred = CURRENT_TIMESTAMP, is_email_preferred = CURRENT_TIMESTAMP where rand_id = 'cBGZTgcT';

# 2023-01-13 14:24:44.689465
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-13 14:29:17.667492
+\d profiles

# 2023-01-13 14:29:44.714970
+select count(*) from information_schema.tables where table_catalog = 'freewill_dev' and data_type = 'timestamp with time zone';

# 2023-01-13 14:30:10.258141
+select count(*) from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public' and data_type = 'timestamp with time zone';

# 2023-01-13 14:30:31.040785
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-13 14:31:55.209788
+select now();

# 2023-01-13 14:34:18.253517
+ALTER TABLE profiles DROP COLUMN is_email_preferred, drop column is_text_message_preferred, drop column is_phone_call_preferred, drop column is_postal_mail_preferred, drop column is_no_contact_preferred;

# 2023-01-13 14:35:29.371313
+\d profiles

# 2023-01-13 14:35:37.022232
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-13 14:39:31.857182
+ALTER TABLE profiles DROP COLUMN is_email_preferred, drop column is_text_message_preferred, drop column is_phone_call_preferred, drop column is_postal_mail_preferred, drop column is_no_contact_preferred;

# 2023-01-13 14:40:55.783292
+select * from pg_settings where name = 'TimeZone';

# 2023-01-13 14:41:00.821807
+SHOW timezone;

# 2023-01-13 14:58:50.958145
+select * from profiles limit 1;

# 2023-01-13 14:58:56.174120
+select city from profiels;

# 2023-01-13 14:58:57.853385
+select city from profiles;

# 2023-01-13 14:59:05.481819
+select count(*) from profiles;

# 2023-01-13 14:59:17.113293
+select count(distinct city) from profiles;

# 2023-01-13 14:59:31.041934
+select count(city) from profiles;

# 2023-01-13 15:00:54.488448
+create unique index concurrently riley_testing on profiles(city);

# 2023-01-13 15:00:59.380960
+\d profiles

# 2023-01-13 15:03:18.309898
+drop index riley_testing;

# 2023-01-13 15:03:20.700564
+\d profiles

# 2023-01-18 11:30:10.000616
+ALTER TABLE profiles DROP COLUMN is_email_preferred, drop column is_text_message_preferred, drop column is_phone_call_preferred, drop column is_postal_mail_preferred, drop column is_no_contact_preferred;

# 2023-01-18 11:30:18.537949
+\d profiles

# 2023-01-18 11:47:13.720925
+select version();

# 2023-01-18 11:47:15.763025
+\q

# 2023-01-18 11:47:23.053736
+select version();

# 2023-01-18 11:47:38.234014
+\q

# 2023-01-18 11:56:44.473242
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-18 11:59:19.731623
+ALTER TABLE profiles DROP COLUMN is_email_preferred, drop column is_text_message_preferred, drop column is_phone_call_preferred, drop column is_postal_mail_preferred, drop column is_no_contact_preferred;

# 2023-01-18 11:59:25.698734
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-18 12:20:05.068146
+ALTER TABLE profiles DROP COLUMN is_email_preferred, drop column is_text_message_preferred, drop column is_phone_call_preferred, drop column is_postal_mail_preferred, drop column is_no_contact_preferred;

# 2023-01-18 12:20:11.347294
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-18 12:37:12.843102
+ALTER TABLE profiles DROP COLUMN is_email_preferred, drop column is_text_message_preferred, drop column is_phone_call_preferred, drop column is_postal_mail_preferred, drop column is_no_contact_preferred;

# 2023-01-18 12:37:19.128415
+select is_email_preferred, is_text_message_preferred, is_phone_call_preferred, is_postal_mail_preferred, is_no_contact_preferred from profiles where rand_id = 'cBGZTgcT';

# 2023-01-18 12:37:47.465437
+select email_preferred_at, text_message_preferred_at, phone_call_preferred_at, postal_mail_preferred_at, no_contact_preferred_at from profiles where rand_id = 'cBGZTgcT';

# 2023-01-20 13:07:20.538170
+update profiles set email_preferred_at = null, text_message_preferred_at = null, phone_call_preferred_at = null, postal_mail_preferred_at = null, no_contact_preferred_at = null where rand_id = 'cBGZTgcT';

# 2023-01-20 13:07:22.726487
+select email_preferred_at, text_message_preferred_at, phone_call_preferred_at, postal_mail_preferred_at, no_contact_preferred_at from profiles where rand_id = 'cBGZTgcT';

# 2023-01-20 13:51:34.438129
+update profiles set email_preferred_at = null, text_message_preferred_at = null, phone_call_preferred_at = null, postal_mail_preferred_at = null, no_contact_preferred_at = null where rand_id = 'cBGZTgcT';

# 2023-01-23 12:29:13.701052
+\q

# 2023-01-23 12:29:25.029445
+select pg_database_size('thanos')
+;

# 2023-01-23 12:29:40.101074
+select pg_size_pretty(pg_database_size('thanos'));

# 2023-01-23 12:29:44.287265
+\q

# 2023-01-23 12:46:18.648645
+select * from information_schema.tables;

# 2023-01-23 12:46:33.974221
+select * from information_schema.views;

# 2023-01-23 12:46:45.719893
+select * from information_schema.views where table_schema = 'public';

# 2023-01-23 12:47:47.931869
+select * from vw_legacy_gifts;

# 2023-01-23 12:48:00.856939
+select * from vw_legacy_gifts limit 10;

# 2023-01-23 12:48:24.249443
+select * from vw_campaign_traffic limit 10;

# 2023-01-23 12:49:45.660263
+select * from information_schema.views where table_schema = 'public';

# 2023-01-23 12:50:35.802300
+select * from pg_matviews where schemaname = 'public';

# 2023-01-23 12:51:19.875203
+\q

# 2023-01-23 13:04:53.734768
+select email_preferred_at, text_message_preferred_at, phone_call_preferred_at, postal_mail_preferred_at, no_contact_preferred_at from profiles where rand_id = 'cBGZTgcT';

# 2023-01-23 13:27:47.986477
+update profiles set email_preferred_at = null, text_message_preferred_at = null, phone_call_preferred_at = null, postal_mail_preferred_at = null, no_contact_preferred_at = null where rand_id = 'cBGZTgcT';

# 2023-01-23 13:27:50.513184
+select email_preferred_at, text_message_preferred_at, phone_call_preferred_at, postal_mail_preferred_at, no_contact_preferred_at from profiles where rand_id = 'cBGZTgcT';

# 2023-01-23 13:44:19.054956
+select * from sendgrid.click;

# 2023-01-23 13:44:23.656311
+\d sendgrid

# 2023-01-23 13:45:13.845932
+select * from click;

# 2023-01-23 13:45:38.954157
+select * from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public';

# 2023-01-23 13:45:47.614469
+select * from information_schema.columns where table_catalog = 'freewill_dev' and table_schema = 'public' and column_name = 'asm_group_id';

# 2023-01-23 13:50:42.058288
+select * from sendgrid.click;

# 2023-01-23 13:56:22.093379
+\l

# 2023-01-23 14:03:35.580881
+\d

# 2023-01-23 14:03:48.385542
+select * from sendgrid.click;

# 2023-01-23 14:03:59.492502
+select * from sendgrid.click limit 10;

# 2023-01-23 14:04:09.793837
+select distinct url from sendgrid.click;

# 2023-01-23 14:04:48.269290
+select distinct url from sendgrid.click limit 100;

# 2023-01-23 14:05:14.206931
+select distinct url from (select url from sendgrid.click limit 100) query;

# 2023-01-23 14:05:52.660609
+select count(*) from sendgrid.click where url ilike '%customer.io%';

# 2023-01-23 14:06:35.237282
+select count(*) from sendgrid.click;

# 2023-01-23 14:07:05.476676
+select count(*) from sendgrid.click where url ilike '%www.freewill.com%';

# 2023-01-23 14:07:17.701327
+select 'freewill.com', count(*) from sendgrid.click where url ilike '%www.freewill.com%';

# 2023-01-23 14:07:26.905269
+select 'freewill.com' as host, count(*) from sendgrid.click where url ilike '%www.freewill.com%';

# 2023-01-23 14:08:16.116553
+select 'freewill.com' as host, count(*) from sendgrid.click where url ilike '%freewill.com%' union select 'sendgrid.com' as host, count(*) from sendgrid.click where url ilike '%sendgrid.com%';

# 2023-01-23 14:11:43.878190
+select * from sendgrid.click limit 1;

# 2023-01-23 14:12:08.265641
+select url from sendgrid.click;

# 2023-01-23 14:13:18.352056
+SELECT
+    click."email"  AS "click.email",
+    click."category"  AS "click.category",
+        (DATE(click."received_at" )) AS "click.received_date",
+    click."sg_template_id"  AS "click.sg_template_id",
+    click."url"  AS "click.url"
+FROM sendgrid.click  AS click
+WHERE (click."category" ) = '["thankyou_anon"]' AND ((click."email" ) NOT LIKE '%freewill.com%' OR (click."email" ) IS NULL) AND (click."url" ) LIKE '%one-click%'
+GROUP BY
+    1,
+    2,
+    3,
+    4,
+    5
+ORDER BY
+    3 DESC
+FETCH NEXT 500 ROWS ONLY;

# 2023-01-23 14:17:38.254745
+\q

# 2023-01-23 14:38:04.397107
+\q

# 2023-01-23 14:38:45.836419
+\l

# 2023-01-23 14:38:50.396276
+\d customerio

# 2023-01-23 14:38:57.538367
+\d customerio.customerio_transactional_messages_8589935831;

# 2023-01-23 14:39:30.605287
+select * from information_schema.tables where table_schema = 'customerio';

# 2023-01-23 14:39:38.588611
+select table_name from information_schema.tables where table_schema = 'customerio';

# 2023-01-23 14:39:59.713080
+select * from customerio.customerio_campaigns_8589935831 limit 1;

# 2023-01-23 14:40:12.059886
+select * from customerio_campaigns_8589935831 limit 1;

# 2023-01-23 14:40:26.547439
+select * from information_schema.schemata;

# 2023-01-23 14:40:52.043555
+select * from public.customerio_campaigns_8589935831 limit 1;

# 2023-01-23 14:41:14.250127
+\l

# 2023-01-23 14:41:29.705125
+\c postgres

# 2023-01-23 14:41:31.272860
+\l

# 2023-01-23 14:41:33.825870
+\d

# 2023-01-23 14:41:43.418253
+\dn

# 2023-01-23 14:41:50.002498
+\c productionreplica

# 2023-01-23 14:41:52.696870
+\dn

# 2023-01-23 14:42:11.307427
+select nspname from pg_catalog.pg_namespace;

# 2023-01-23 14:42:23.059038
+select schema_name from information_schema.schemata;;

# 2023-01-23 14:50:13.051390
+\q

# 2023-01-24 11:48:50.341492
+select * from users where email = 'riley@freewill.com';

# 2023-01-24 11:49:51.650288
+\d users

# 2023-01-24 11:50:15.188466
+select * from user_roles where user_id in (select rand_id from users where email_address = 'riley@freewill.com');

# 2023-01-24 11:50:30.707610
+select * from user_roles where user_id in (select rand_id from users where email = 'riley@freewill.com');

# 2023-01-24 11:50:39.128410
+\d user_roles

# 2023-01-24 11:50:53.434828
+select * from user_role_type;

# 2023-01-24 11:51:02.961255
+select * from user_roles limit 10;

# 2023-01-24 11:51:51.946538
+select meta_info, user_role_type from user_roles where user_id in (select rand_id from users where email ilike '%freewill.com');

# 2023-01-24 11:52:25.745722
+select rand_id, meta_info, user_role_type from user_roles where user_id in (select rand_id from users where email ilike '%freewill.com');

# 2023-01-24 11:53:47.023253
+insert into user_roles (user_id, meta_info, user_role_type) values (???, '{"portal_org_ids": ["EGmc1tRS"]}'::jsonb, '["portal_user"]'::jsonb);

# 2023-01-24 11:53:56.854068
+select rand_id from users where email = 'riley@freewill.com';

# 2023-01-24 11:54:11.478183
+insert into user_roles (user_id, meta_info, user_role_type) values ('Uj6GRPtc', '{"portal_org_ids": ["EGmc1tRS"]}'::jsonb, '["portal_user"]'::jsonb);

# 2023-01-24 12:52:59.829454
+select * from portal_users;

# 2023-01-24 12:54:02.723497
+select * from portal_users where email = 'riley@freewill.com';

# 2023-01-24 12:54:54.202386
+select * from portal_users where email ilike '%freewill.com';

# 2023-01-24 12:55:18.425050
+select id                     | 101
+rand_id                | WQAqEZBo
+email                  | fischer@freewill.com
+org_ids                | ["flwQhVfj"]
+f_name                 | {"last": "Fischer", "first": "Michael", "middle": ""}
+created_at             | 2020-12-02 22:09:06.098
+updated_at             | 2022-09-08 16:38:56.91
+deleted_at             | <null>
+is_enabled             | True
+encrypted_password     | $2a$10$Uqg0wUMiQpB0Sex3wYJNRun9SLBE54BFShulMCdNA7YR/OrZAjDHy
+reset_password_token   | <null>
+reset_password_sent_at | <null>
+confirmation_token     | <null>
+confirmed_at           | 2020-12-02 22:09:16.656
+confirmation_sent_at   | 2020-12-02 22:09:06.235
+terms                  | {"has_agreed_donorsearch": true}
+
+;
+

# 2023-01-24 12:55:19.615463
+\e

# 2023-01-24 12:56:53.342832
+select riley@freewill.com as email,
+       ["flwQhVfj"] as org_ids,
+       {"last": "Voor", "first": "Riley", "middle": ""} as f_name,
+       true as is_enabled,
+encrypted_password     | $2a$10$Uqg0wUMiQpB0Sex3wYJNRun9SLBE54BFShulMCdNA7YR/OrZAjDHy
+       now() as confirmed_at,
+       now() as confirmation_sent_at
+;
+

# 2023-01-24 12:57:03.167590
+select * from users where email = 'riley@freewill.com';

# 2023-01-24 12:57:13.671643
+select riley@freewill.com as email,
+       ["flwQhVfj"] as org_ids,
+       {"last": "Voor", "first": "Riley", "middle": ""} as f_name,
+       true as is_enabled,
+encrypted_password     | $2a$10$Uqg0wUMiQpB0Sex3wYJNRun9SLBE54BFShulMCdNA7YR/OrZAjDHy
+       now() as confirmed_at,
+       now() as confirmation_sent_at
+;
+
+
+

# 2023-01-24 12:57:14.609594
+\e

# 2023-01-24 12:58:02.731672
+select riley@freewill.com as email,
+       '["flwQhVfj"]'::text[] as org_ids,
+       '{"last": "Voor", "first": "Riley", "middle": ""}'::jsonb as f_name,
+       true as is_enabled,
+       '$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+       now() as confirmed_at,
+       now() as confirmation_sent_at
+;

# 2023-01-24 12:58:05.031559
+\e

# 2023-01-24 12:58:12.363118
+select 'riley@freewill.com' as email,
+       '["flwQhVfj"]'::text[] as org_ids,
+       '{"last": "Voor", "first": "Riley", "middle": ""}'::jsonb as f_name,
+       true as is_enabled,
+       '$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+       now() as confirmed_at,
+       now() as confirmation_sent_at
+;

# 2023-01-24 12:58:22.519200
+\e

# 2023-01-24 12:58:27.327214
+select 'riley@freewill.com' as email,
+       ["flwQhVfj"]::text[] as org_ids,
+       '{"last": "Voor", "first": "Riley", "middle": ""}'::jsonb as f_name,
+       true as is_enabled,
+       '$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+       now() as confirmed_at,
+       now() as confirmation_sent_at
+;

# 2023-01-24 12:58:28.671630
+\e

# 2023-01-24 12:58:34.499579
+select 'riley@freewill.com' as email,
+       '["flwQhVfj"]'::text[] as org_ids,
+       '{"last": "Voor", "first": "Riley", "middle": ""}'::jsonb as f_name,
+       true as is_enabled,
+       '$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+       now() as confirmed_at,
+       now() as confirmation_sent_at
+;

# 2023-01-24 12:58:43.854575
+select '['a']'::text[];

# 2023-01-24 12:58:51.310785
+select '["a"]'::text[];

# 2023-01-24 12:58:55.204152
+select '["a",]'::text[];

# 2023-01-24 12:59:02.942894
+select '[\'a\']'::text[];

# 2023-01-24 12:59:07.435664
+select '[\'\']'::text[];

# 2023-01-24 12:59:09.972799
+select '[\'aaaa\']'::text[];

# 2023-01-24 12:59:33.414169
+select '{\'aaaa\'}'::text[];

# 2023-01-24 12:59:43.591151
+select '{"aaaa"}'::text[];

# 2023-01-24 12:59:49.645495
+select 'riley@freewill.com' as email,
+       '["flwQhVfj"]'::text[] as org_ids,
+       '{"last": "Voor", "first": "Riley", "middle": ""}'::jsonb as f_name,
+       true as is_enabled,
+       '$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+       now() as confirmed_at,
+       now() as confirmation_sent_at
+;

# 2023-01-24 12:59:50.219502
+\e

# 2023-01-24 12:59:57.537599
+select 'riley@freewill.com' as email,
+       '{"flwQhVfj"}'::text[] as org_ids,
+       '{"last": "Voor", "first": "Riley", "middle": ""}'::jsonb as f_name,
+       true as is_enabled,
+       '$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+       now() as confirmed_at,
+       now() as confirmation_sent_at
+;

# 2023-01-24 13:00:38.499079
+insert into portal_users (email, org_ids, f_name, is_enabled, encrypted_password, confirmed_at, confirmation_sent_at) values postgres@127:freewill_dev> select 'riley@freewill.com' as email,
+        '{"flwQhVfj"}'::text[] as org_ids,
+        '{"last": "Voor", "first": "Riley", "middle": ""}'::jsonb as f_name,
+        true as is_enabled,
+        '$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+        now() as confirmed_at,
+        now() as confirmation_sent_at
+

# 2023-01-24 13:01:13.002365
+\e

# 2023-01-24 13:01:25.031156
+insert into portal_users (email, org_ids, f_name, is_enabled, encrypted_password, confirmed_at, confirmation_sent_at) select 'riley@freewill.com' as email,
+        '{"flwQhVfj"}'::text[] as org_ids,
+        '{"last": "Voor", "first": "Riley", "middle": ""}'::jsonb as f_name,
+        true as is_enabled,
+        '$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+        now() as confirmed_at,
+        now() as confirmation_sent_at;

# 2023-01-24 13:01:30.600124
+\e

# 2023-01-24 13:01:40.341240
+insert into portal_users (email, org_ids, f_name, is_enabled, encrypted_password, confirmed_at, confirmation_sent_at) select 'riley@freewill.com' as email,
+        '["flwQhVfj"]'::jsonb as org_ids,
+        '{"last": "Voor", "first": "Riley", "middle": ""}'::jsonb as f_name,
+        true as is_enabled,
+        '$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+        now() as confirmed_at,
+        now() as confirmation_sent_at;

# 2023-01-24 13:01:46.057539
+select * from portal_users where email ilike '%freewill.com';

# 2023-01-24 13:01:52.457581
+select * from portal_users where email = 'riley@freewill.com';

# 2023-01-24 13:06:24.630214
+\q

# 2023-01-24 13:06:43.135954
+select * from portal_users where email ilike '%freewill.com';

# 2023-01-24 13:06:54.676226
+insert into portal_users (email, org_ids, f_name, is_enabled, encrypted_password, confirmed_at, confirmation_sent_at) select 'riley@freewill.com' as email,
+        '["flwQhVfj"]'::jsonb as org_ids,
+        '{"last": "Voor", "first": "Riley", "middle": ""}'::jsonb as f_name,
+        true as is_enabled,
+        '$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+        now() as confirmed_at,
+        now() as confirmation_sent_at;

# 2023-01-24 13:07:04.296808
+select * from portal_users where email = 'riley@freewill.com';

# 2023-01-24 13:07:09.662514
+\q

# 2023-01-24 13:22:12.380193
+select * from portal_contact_events limit 1;

# 2023-01-24 13:22:15.851593
+select * from portal_contact_events limit 10;

# 2023-01-24 13:22:26.829384
+select * from portal_contact_events where event_details is not null;

# 2023-01-24 13:22:33.463001
+select count(*) from portal_contact_events;

# 2023-01-24 13:22:35.264310
+select * from portal_contact_events where event_details is not null;

# 2023-01-24 13:22:45.230903
+\d portal_contact_events

# 2023-01-24 13:23:01.180474
+select distinct event_type from portal_contact_events;

# 2023-01-24 13:32:34.405230
+\d portal_contact_events

# 2023-01-25 12:53:07.087530
+select * from portal_contact_events limit 1;

# 2023-01-25 12:53:16.766210
+select * from portal_contacts limit 1;

# 2023-01-25 12:53:42.931371
+select * from portal_contacts where created_at > now() - '1 hour'::timestamp;

# 2023-01-25 12:53:52.095947
+select * from portal_contacts where created_at > now() - '1 hour'::interval;

# 2023-01-25 12:53:55.986831
+select * from portal_contacts where created_at > now() - '2 hour'::interval;

# 2023-01-25 12:53:58.048489
+select * from portal_contacts where created_at > now() - '24 hour'::interval;

# 2023-01-25 12:54:01.794891
+select * from portal_contacts where created_at > now() - '30 hour'::interval;

# 2023-01-25 12:54:19.714556
+select * from portal_contact_events where created_at > now() - '30 hour'::interval;

# 2023-01-25 12:54:39.099366
+select * from portal_contact_events order by created_at desc;

# 2023-01-27 11:24:43.669895
+select * from portal_contacts where id = 192350;

# 2023-01-27 11:24:57.481888
+select * from profiles where profile_id = 'cBGZTgcT';

# 2023-01-27 11:25:01.723777
+select * from profiles where rand_id = 'cBGZTgcT';

# 2023-01-27 11:26:57.524677
+select profiles.f_name from profiles where rand_id in (select profile_id from portal_contacts where id in (select contact_id from portal_contact_events));

# 2023-01-27 11:27:02.399189
+\d portal_contact_events

# 2023-01-27 11:27:08.571992
+select profiles.f_name from profiles where rand_id in (select profile_id from portal_contacts where id in (select portal_contact_id from portal_contact_events));

# 2023-01-27 11:27:20.269311
+select profiles.f_name from profiles where rand_id in (select profile_id from portal_contacts where id in (select portal_contact_id from portal_contact_events)) and email not ilike '%freewill.com';

# 2023-01-27 11:27:30.085621
+select profiles.f_name from profiles where rand_id in (select profile_id from portal_contacts where id in (select portal_contact_id from portal_contact_events)) and profiles.email not ilike '%freewill.com';

# 2023-01-27 11:27:37.555604
+select profiles.f_name from profiles where rand_id in (select profile_id from portal_contacts where id in (select portal_contact_id from portal_contact_events)) and profiles.email_address not ilike '%freewill.com';

# 2023-01-27 11:27:46.375201
+select profiles.f_name from profiles where rand_id in (select profile_id from portal_contacts where id in (select portal_contact_id from portal_contact_events));

# 2023-01-27 12:23:38.629529
+select * from portal_contacts where id = 192249;

# 2023-01-27 12:23:46.551636
+select * from profiles where rand_id = 'm51aZrY1';

# 2023-01-27 12:23:53.295369
+select * from portal_contacts where id = 192249;

# 2023-01-27 12:24:09.318966
+select * from portal_contact_events where portal_contact_id = 192249;

# 2023-01-27 12:24:59.672803
+insert into portal_contact_events (portal_contact_id, event_type, created_source) values (192249, 'COMMUNICATION_PREFERENCES_UPDATED', 'DONOR');

# 2023-01-30 11:44:51.066940
+select * from portal_contact_events limit 1;

# 2023-01-30 11:44:57.273911
+select * from portal_contact_events order by created_at desc;

# 2023-01-30 11:45:11.870579
+select * from portal_contacts where id = 192347;

# 2023-01-30 12:04:03.958499
+\q

# 2023-01-30 12:11:19.598592
+\d

# 2023-01-30 12:11:20.342514
+\l

# 2023-01-30 12:13:37.775626
+\q

# 2023-01-30 12:14:05.559584
+\l

# 2023-01-30 12:14:17.405547
+\c riley

# 2023-01-30 12:14:30.168506
+select * from users where email = 'riley.voor@gmail.com';

# 2023-01-30 12:14:53.493698
+select * from profiles where account_id = 'k1P4mb2f'

# 2023-01-30 12:18:38.956768
+\q

# 2023-01-30 12:20:13.116295
+\l

# 2023-01-30 12:23:30.855331
+\q

# 2023-01-30 12:24:19.648726
+select * from information_schema.role_table_grants where grantee='riley';

# 2023-01-30 12:24:38.283839
+select * from information_schema.role_table_grants limit 1;

# 2023-01-30 12:24:47.039434
+select * from information_schema.role_table_grants where grantee='riley';

# 2023-01-30 12:24:54.375631
+select * from pg_tables where tableowner = 'riley';

# 2023-01-30 12:25:32.494790
+\z profiles

# 2023-01-30 12:26:05.695023
+\u

# 2023-01-30 12:26:07.077889
+\l

# 2023-01-30 12:30:06.567430
+\q

# 2023-01-30 12:33:40.062852
+select * from portal_contacts where profile_id = '???';

# 2023-01-30 12:33:46.662742
+select * from profiles where account_id = 'k1P4mb2f';

# 2023-01-30 12:33:57.005066
+select * from portal_contacts where profile_id = 'zvUjs4ug';

# 2023-01-30 12:34:31.089351
+insert into portal_users (email, org_ids, f_name, is_enabled, encrypted_password, confirmed_at, confirmation_sent_at) select 'riley@freewill.com' as email,
+        '["flwQhVfj"]'::jsonb as org_ids,
+        '{"last": "Voor", "first": "Riley", "middle": ""}'::jsonb as f_name,
+        true as is_enabled,
+        '$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+        now() as confirmed_at,
+        now() as confirmation_sent_at???;

# 2023-01-30 12:34:31.947730
+\e

# 2023-01-30 12:35:24.777579
+insert into portal_users (email, org_ids, f_name, is_enabled, encrypted_password, confirmed_at, confirmation_sent_at) select 'riley.voor@gmail.com' as email,
+        '["flwQhVfj"]'::jsonb as org_ids,
+        '{"last": "USER", "first": "TESTING", "middle": ""}'::jsonb as f_name,
+        true as is_enabled,
+        ???'$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+        now() as confirmed_at,
+        now() as confirmation_sent_at;

# 2023-01-30 12:35:28.084763
+select * from profiles where account_id = 'k1P4mb2f';

# 2023-01-30 12:35:35.957488
+select * from users where email = 'riley.voor@gmail.com';

# 2023-01-30 12:35:45.850300
+insert into portal_users (email, org_ids, f_name, is_enabled, encrypted_password, confirmed_at, confirmation_sent_at) select 'riley.voor@gmail.com' as email,
+        '["flwQhVfj"]'::jsonb as org_ids,
+        '{"last": "USER", "first": "TESTING", "middle": ""}'::jsonb as f_name,
+        true as is_enabled,
+        ???'$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' as encrypted_password,
+        now() as confirmed_at,
+        now() as confirmation_sent_at;

# 2023-01-30 12:35:46.315028
+\e

# 2023-01-30 12:36:06.496996
+insert into portal_users (email, org_ids, f_name, is_enabled, encrypted_password, confirmed_at, confirmation_sent_at) select 'riley.voor@gmail.com' as email,
+        '["flwQhVfj"]'::jsonb as org_ids,
+        '{"last": "USER", "first": "TESTING", "middle": ""}'::jsonb as f_name,
+        true as is_enabled,
+        '$2a$10$awFObXpTf9f5NC9u1Z/yleCdoxeGiCjVYJRf0aUF4PBhhTo177UG.' as encrypted_password,
+        now() as confirmed_at,
+        now() as confirmation_sent_at;

# 2023-01-30 12:36:23.316677
+select * from organizations where rand_id = 'flwQhVfj';

# 2023-01-30 12:38:25.506161
+select * from portal_contacts where profile_id = 'zvUjs4ug';

# 2023-01-30 12:38:50.227704
+select * from portal_contacts where profile_id = 'flwQhVfj';

# 2023-01-30 12:39:10.011418
+update portal_contacts set profile_id = 'flwQhVfj' where id = 216404;

# 2023-01-30 12:39:13.201959
+select * from portal_contacts where profile_id = 'flwQhVfj';

# 2023-01-30 12:39:24.683006
+fn_undo_last_transaction();

# 2023-01-30 12:39:36.498973
+update portal_contacts set profile_id = 'zvUjs4ug' where id = 216404;

# 2023-01-30 12:39:48.185579
+update portal_contacts set organization_id = 'flwQhVfj' where id = 216404;

# 2023-01-30 12:39:51.338690
+select * from portal_contacts where profile_id = 'flwQhVfj';

# 2023-01-30 12:40:03.298699
+select * from portal_contacts where profile_id = 'zvUjs4ug';

# 2023-01-30 12:42:28.447407
+select * from portal_users where email = 'riley.voor@gmail.com';

# 2023-01-30 12:43:19.921613
+update portal_users set f_name = '{"first":"riley","last":"voor","middle":""}'::jsonb where email='riley.voor@gmail.com'; 

# 2023-01-30 12:43:22.280420
+select * from portal_users where email = 'riley.voor@gmail.com';

# 2023-01-30 12:43:29.992487
+select * from profiles where account_id = 'k1P4mb2f';

# 2023-01-30 12:43:59.457060
+update profiles set f_name = '{"first":"riley","last":"voor","middle":""}'::jsonb where account_id='zvUjs4ug'; 

# 2023-01-30 12:44:14.923855
+update profiles set f_name = '{"first":"riley","last":"voor","middle":""}'::jsonb where rand_id='zvUjs4ug'; 

# 2023-01-30 12:44:17.838425
+select * from profiles where account_id = 'k1P4mb2f';

# 2023-01-30 12:45:02.735086
+select * from portal_contacts where profile_id = 'zvUjs4ug';

# 2023-01-30 12:45:20.576427
+update portal_contacts set visible_in_portal_at = now() where id = 216404;

# 2023-01-30 12:45:45.201301
+select * from portal_contacts where profile_id = 'zvUjs4ug';

# 2023-01-30 12:57:14.751947
+select * from portal_users limit 1;

# 2023-01-30 12:57:27.562858
+select * from portal_users where email = 'riley.voor@gmail.com';

# 2023-01-30 12:57:53.870392
+select * from portal_contacts limit 1;

# 2023-01-30 12:58:01.577621
+select * from portal_contacts where visible_in_portal_at is not null;

# 2023-01-30 12:58:14.146040
+select count(*) from portal_contacts where visible_in_portal_at is not null;

# 2023-01-30 12:58:19.385678
+select count(*) from portal_contacts where visible_in_portal_at is null;

# 2023-01-30 12:58:20.866316
+select count(*) from portal_contacts where visible_in_portal_at is not null;

# 2023-01-30 13:00:54.541070
+select * from portal_contacts where profile_id = 'zvUjs4ug';

# 2023-01-30 13:01:20.834548
+\d portal_contacts;

# 2023-01-30 13:01:58.796964
+select table_name from information_schema.tables where table_schema = 'customerio';

# 2023-01-30 13:02:06.699763
+select table_name from information_schema.tables where table_schema = 'public';

# 2023-01-30 13:02:16.748598
+select table_name from information_schema.tables where table_schema = 'public' and table_name ilike '%portal%';;

# 2023-01-30 13:02:33.839059
+select * from portal_legacy_gifts limit 1;

# 2023-01-30 13:02:37.454936
+select * from portal_legacy_gifts limit 10;

# 2023-01-30 13:02:42.050746
+select * from public.portal_legacy_gifts limit 10;

# 2023-01-30 13:02:49.159405
+select count(*) from portal_legacy_gifts;

# 2023-01-30 13:02:54.457533
+\d portal_legacy_gifts

# 2023-01-30 13:03:21.827818
+select * from estate_charitable_gifts where profile_id = '';

# 2023-01-30 13:03:29.923860
+select * from portal_contacts where profile_id = 'zvUjs4ug';

# 2023-01-30 13:03:43.921233
+select * from estate_charitable_gifts where profile_id = 'zvUjs4ug';

# 2023-01-30 13:04:14.595573
+update estate_charitable_gifts set organization_id = 'flwQhVfj' where rand_id = '9kbcQ2tI';

# 2023-01-30 13:04:16.464315
+select * from estate_charitable_gifts where profile_id = 'zvUjs4ug';

# 2023-01-30 13:20:08.103218
+select * from vw_legacy_gifts limit 10;

# 2023-01-30 13:22:18.124704
+select * from portal_users limit 1;

# 2023-01-30 13:22:23.280421
+select * from portal_users where email = 'riley.voor@gmail.com';

# 2023-01-30 13:22:49.639563
+update portal_users set is_enabled = false where rand_id = 'hcjJ64oQ';

# 2023-01-30 13:23:37.584495
+update portal_users set is_enabled = true where rand_id = 'hcjJ64oQ';

# 2023-01-30 13:23:40.727671
+select * from portal_users where email = 'riley.voor@gmail.com';

# 2023-01-30 13:24:48.439294
+select * from profiles where email = 'laurenkwh@me.com';

# 2023-01-30 13:24:55.334278
+select * from profiles where email_address = 'laurenkwh@me.com';

# 2023-01-30 13:25:02.903516
+select * from users where email = 'laurenkwh@me.com';

# 2023-01-30 13:25:36.054971
+update users set ??? where rand_id = 'QrFTOOOO';

# 2023-01-30 13:25:49.228842
+select * from users where email = 'riley.voor@gmail.com';

# 2023-01-30 13:25:57.966092
+update users set ??? where rand_id = 'QrFTOOOO';

# 2023-01-30 13:26:00.306430
+\e

# 2023-01-30 13:26:10.349587
+update users set encrypted_password='$2a$10$awFObXpTf9f5NC9u1Z/yleCdoxeGiCjVYJRf0aUF4PBhhTo177UG.' where rand_id = 'QrFTOOOO';

# 2023-01-30 13:27:14.621394
+select * from users where email = 'laurenkwh@me.com';

# 2023-01-30 13:27:50.780181
+update users set email='rino.voor@gmail.com' where rand_id = 'QrFTOOOO';

# 2023-01-30 13:27:54.627562
+select * from users where email = 'laurenkwh@me.com';

# 2023-01-30 13:27:59.451365
+select * from users where email = 'rino.voor@gmail.com';

# 2023-01-30 13:31:35.491137
+select * from portal_users where email = 'riley.voor@gmail.com';

# 2023-01-30 13:31:55.969405
+update portal_users set email='rino.voor@gmail.com' where rand_id = 'hcjJ64oQ';

# 2023-01-30 13:31:57.868523
+select * from portal_users where email = 'riley.voor@gmail.com';

# 2023-01-30 13:32:02.831162
+select * from portal_users where email = 'rino.voor@gmail.com';

# 2023-01-30 13:37:24.782114
+delete from portal_contact_events where portal_contact_id = ???;

# 2023-01-30 13:37:32.861830
+select * from portal_contacts where profile_id = 'zvUjs4ug';

# 2023-01-30 13:37:51.357481
+select * from portal_contacts where id = 212525;

# 2023-01-30 13:38:02.837686
+select * from profiles where profile_id = 'xJIEihYu';

# 2023-01-30 13:38:08.276531
+select * from profiles where rand_id = 'xJIEihYu';

# 2023-01-30 13:38:17.446456
+select * from portal_contacts where id = 212525;

# 2023-01-30 13:38:27.509108
+select * from portal_contact_events where portal_contact_id = 212525;

# 2023-01-30 13:38:37.318144
+delete from portal_contact_events where portal_contact_id = 212525;

# 2023-01-30 13:46:36.516049
+select * from portal_contacts where profile_id in (select rand_id from profiles where f_name->'first'='riley6');

# 2023-01-30 13:46:46.063774
+select * from portal_contacts where profile_id in (select rand_id from profiles where f_name->>'first'='riley6');

# 2023-01-30 13:46:54.462981
+select * from portal_contacts where profile_id in (select rand_id from profiles where f_name->'first'='riley6');

# 2023-01-30 13:46:57.350041
+select * from portal_contacts where profile_id in (select rand_id from profiles where f_name->>'first'='riley6');

# 2023-01-30 13:47:28.170107
+select * from portal_contacts where profile_id in (select rand_id from profiles where f_name->>'first'='riley7');

# 2023-01-30 13:48:21.445656
+select * from portal_contact_events where portal_contact_id in (select id from portal_contacts where profile_id in (select rand_id from profiles where f_name->>'first'='riley7'));

# 2023-01-30 13:48:51.695709
+select * from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED';

# 2023-01-30 13:49:10.528909
+select * from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED' and created_at > now() - '30 minutes'::interval;

# 2023-01-30 13:49:21.448379
+select portal_contact_id from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED' and created_at > now() - '30 minutes'::interval;

# 2023-01-30 13:49:27.231545
+select distinct portal_contact_id from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED' and created_at > now() - '30 minutes'::interval;

# 2023-01-30 13:49:41.342895
+\q

# 2023-01-30 13:49:48.032938
+select * from portal_contact_events where portal_contact_id in (select id from portal_contacts where profile_id in (select rand_id from profiles where f_name->>'first'='riley7'));

# 2023-01-30 13:49:57.443064
+select portal_contact_id from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED' and created_at > now() - '30 minutes'::interval;

# 2023-01-30 13:50:06.460369
+select distinct portal_contact_id from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED' and created_at > now() - '30 minutes'::interval;

# 2023-01-30 13:50:24.710960
+select * from portal_contacts where id in (192347, 192349, 192350, 192351, 192352);

# 2023-01-30 13:50:42.773895
+select distinct profile_id from portal_contacts where id in (192347, 192349, 192350, 192351, 192352);

# 2023-01-30 13:50:53.408894
+select * from profiles where rand_id = 'MBmVx6wh';

# 2023-01-30 13:51:22.671461
+select * from portal_contact_events where portal_contact_id in (select id from portal_contacts where profile_id in (select rand_id from profiles where f_name->>'first'='riley7'));

# 2023-01-30 13:51:29.441243
+select * from portal_contact_events where portal_contact_id in (select id from portal_contacts where profile_id in (select rand_id from profiles where f_name->>'first' ilike 'riley7'));

# 2023-01-30 13:51:56.666801
+\q

# 2023-01-30 13:52:13.527282
+select * from portal_contact_events where portal_contact_id = 212525;

# 2023-01-30 13:52:20.164366
+\q

# 2023-02-01 11:25:49.130824
+select * from portal_contact_events where portal_contact_id = 212525;

# 2023-02-01 11:26:00.989813
+select * from portal_contacts where id = 212525;

# 2023-02-01 11:26:11.344859
+select * from profiles where rand_id = 'xJIEihYu';

# 2023-02-01 11:26:17.821491
+select * from portal_contact_events where portal_contact_id = 212525;

# 2023-02-01 11:26:22.713450
+select * from portal_contact_events where portal_contact_id = 212525 order by created_at desc;

# 2023-02-01 11:29:13.616811
+select * from profiles where rand_id = 'xJIEihYu';

# 2023-02-01 11:29:33.140381
+select email_preferred_at, text_message_preferred_at, phone_call_preferred_at, postal_mail_preferred_at, no_contact_preferred_at from profiles where rand_id = 'xJIEihYu';

# 2023-02-01 11:30:31.027760
+select * from portal_contacts where id = 200857;

# 2023-02-01 11:30:43.513863
+select * from profiles where rand_id = '2vNUFYbG';

# 2023-02-01 11:31:12.302714
+select * from portal_contacts where id = 200857;

# 2023-02-01 13:35:26.727772
+select * from portal_contacts where id = 61801;

# 2023-02-01 13:35:47.936379
+insert into portal_contact_events (portal_contact_id, event_type, created_source) values (61801, 'COMMUNICATION_PREFERENCES_UPDATED', 'DONOR');

# 2023-02-01 13:38:44.920045
+select * from portal_contacts where id = 61801;

# 2023-02-01 13:38:58.055826
+select * from portal_contact_events where portal_contact_id = 61801;

# 2023-02-01 15:30:52.539173
+select * from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED';

# 2023-02-01 15:31:12.459406
+select * from portal_contact_events where portal_contact_id = 61801;

# 2023-02-01 15:31:16.388397
+insert into portal_contact_events (portal_contact_id, event_type, created_source) values (61801, 'COMMUNICATION_PREFERENCES_UPDATED', 'DONOR');

# 2023-02-01 15:31:23.770844
+select * from portal_contact_events where portal_contact_id = 61801;

# 2023-02-01 15:31:43.440955
+select distinct portal_contact_id from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED';

# 2023-02-01 15:31:58.828198
+select count(*), portal_contact_id from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED' group by portal_contact_id;

# 2023-02-01 15:32:43.005189
+select org_id from portal_contacts where id in (select distinct portal_contact_id from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED');

# 2023-02-01 15:32:48.171385
+select org_ids from portal_contacts where id in (select distinct portal_contact_id from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED');

# 2023-02-01 15:32:52.883714
+select organization_id from portal_contacts where id in (select distinct portal_contact_id from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED');

# 2023-02-01 15:32:58.492076
+select id, organization_id from portal_contacts where id in (select distinct portal_contact_id from portal_contact_events where event_type = 'COMMUNICATION_PREFERENCES_UPDATED');

# 2023-02-02 11:51:53.851554
+insert into portal_contact_events (portal_contact_id, event_type, created_source) values (192249, 'COMMUNICATION_PREFERENCES_UPDATED', 'DONOR');

# 2023-02-02 13:27:12.891836
+select * from portal_contact_events where portal_contact_id = 192249;

# 2023-02-02 13:29:04.699145
+insert into portal_contact_events (portal_contact_id, event_type, created_source) values (192249, 'DECEASED_DATE_UPDATED', 'DONOR');

# 2023-02-02 13:42:26.394995
+\q

# 2023-02-02 13:42:46.804729
+select * from profiles where rand_id = 'prUIyZfv';

# 2023-02-02 13:42:50.043372
+select * from profiles where rand_id = 'prUlyZfv';

# 2023-02-02 13:43:01.547752
+select * from users where rand_id = 'prUIyZfv';

# 2023-02-02 13:43:07.651774
+select * from estate_plans where rand_id = 'prUIyZfv';

# 2023-02-02 13:43:31.947410
+select * from profiles where rand_id = 'rlyEPbGY';

# 2023-02-02 13:43:44.816811
+\q

# 2023-02-02 13:43:50.741499
+select * from profiles where rand_id = 'rlyEPbGY';

# 2023-02-02 13:44:18.180463
+update profiles set address_1 = '1234 road street' where rand_id = 'rlyEPbGY';

# 2023-02-02 15:21:11.260533
+select * from estate_plans where rand_id = 'prUIyZfv';

# 2023-02-02 15:21:37.113357
+select * from profiles where rand_id = 'rlyEPbGY';

# 2023-02-02 15:28:50.204519
+select * from estate_plans where rand_id = 'prUIyZfv';

# 2023-02-02 15:29:10.768926
+\q

# 2023-02-02 15:29:21.843790
+select * from estate_plans where rand_id = 'prUIyZfv';

# 2023-02-02 15:37:09.274109
+\d estate_plans

# 2023-02-02 15:37:24.238709
+select * from estate_beneficiaries limit 1;

# 2023-02-02 15:40:19.646869
+select count(distinct ep.rand_id) from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual';

# 2023-02-02 15:40:38.199661
+select count(distinct ep.rand_id) from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-02 15:41:14.692070
+select eb2.* from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-02 15:41:45.297892
+select eb1.* from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-02 15:42:16.545549
+select count(distinct ep.rand_id) from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-02 15:42:43.358022
+select ep.created_at from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-02 15:42:54.149984
+select ep.created_at from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null order by ep.created_at desc limit 1;

# 2023-02-02 15:44:47.137133
+select ep.created_at from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null order by ep.created_at asc limit 1;

# 2023-02-02 15:45:21.769228
+select count(*) from estate_plans;

# 2023-02-03 11:20:32.963245
+\l

# 2023-02-03 11:20:42.928029
+drop database freewill_dev_backup_08_02_22;

# 2023-02-03 11:20:47.077743
+\l

# 2023-02-03 12:17:05.411324
+select ep.created_at from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:17:15.201413
+select * from estate_beneficiaries limit 1;

# 2023-02-03 12:17:29.436908
+select count(eb1.*) from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:20:01.906329
+create database freewill_dev_backup_02_03_23 with template freewill_dev;

# 2023-02-03 12:20:55.209591
+select count(distinct ep.rand_id) from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:21:22.129330
+select count(eb1.*) + count(eb2.*) from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:21:31.763693
+\c freewill_dev_backup_02_03_23

# 2023-02-03 12:21:33.401438
+select count(eb1.*) + count(eb2.*) from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:22:25.624539
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_02_03_23;

# 2023-02-03 12:22:38.925593
+\c freewill_dev

# 2023-02-03 12:22:42.195537
+select count(eb1.*) + count(eb2.*) from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:23:28.743552
+select count(eb.*) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:23:40.163562
+select count(distinct eb.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:24:12.053137
+select count(distinct eb.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null and eb.level != 1 and eb.level != 2;

# 2023-02-03 12:24:18.882961
+select count(distinct eb.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:24:27.429275
+select count(distinct eb.rand_id), eb.level from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null group by eb.level;

# 2023-02-03 12:24:50.604331
+select count(eb1.rand_id) from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:25:49.014693
+select count(*) from estate_beneficiaries where estate_id in (select ep.rand_id from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null);

# 2023-02-03 12:26:26.057903
+select eb2.rand_id, eb2.beneficiary_type, eb2.level from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:27:09.328706
+select eb2.rand_id from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:27:25.641911
+select count(distinct eb2.rand_id)  from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:27:31.344254
+select count(eb2.rand_id)  from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:27:55.431679
+select count(distinct eb.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:28:01.474709
+select count(distinct ep.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:28:26.799070
+select count(distinct ep.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 where eb1.beneficiary_type = 'custom_allocation' and  eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:29:54.238530
+select * from users where rand_id = 'prUIyZfv';

# 2023-02-03 12:30:03.806617
+select * from profiles where rand_id = 'rlyEPbGY';

# 2023-02-03 12:30:29.606757
+select * from users where rand_id = '4O1iPjpT';

# 2023-02-03 12:30:48.089717
+update users set encrypted_password=??? where rand_id = '4O1iPjpT';

# 2023-02-03 12:31:15.823166
+select encrypted_password from users where email = 'riley@freewill.com';

# 2023-02-03 12:31:26.383659
+update users set encrypted_password='$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' where rand_id = '4O1iPjpT';

# 2023-02-03 12:31:33.367821
+select * from users where rand_id = '4O1iPjpT';

# 2023-02-03 12:39:40.021881
+select * from estate_beneficiaries where estate_id = 'HMn0BwzO';

# 2023-02-03 12:41:27.415172
+select count(distinct ep.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 where eb1.beneficiary_type = 'custom_allocation' and  eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:41:35.916064
+select count(distinct ep.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 12:53:23.652146
+\c freewill_dev_backup_02_03_23

# 2023-02-03 12:53:28.159318
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_02_03_23;

# 2023-02-03 12:53:39.884771
+\c freewill_dev

# 2023-02-03 13:01:54.161272
+\c freewill_dev_backup_02_03_23

# 2023-02-03 13:01:56.153773
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_02_03_23;

# 2023-02-03 13:02:07.369151
+\c freewill_dev

# 2023-02-03 13:02:26.231278
+select ep.rand_id, count(eb2.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null group by ep.rand_id;

# 2023-02-03 13:04:05.547589
+select rand_id from estate_beneficiaries where beneficiary_type = 'preset_residual' and level = 2 and estate_id = 'M1D9JIXH';

# 2023-02-03 13:04:30.601154
+select SUM(count) from (select ep.rand_id, count(eb2.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null group by ep.rand_id) query;

# 2023-02-03 13:05:45.995229
+select eb2.rand_id from estate_beneficiaries eb1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.level = 2 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 13:05:55.767989
+select * from estate_beneficiaries eb1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.level = 2 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 13:06:28.353694
+10          SELECT eb2.rand_id
+  1           FROM estate_beneficiaries eb1
+  2           JOIN estate_beneficiaries eb2
+  3             ON eb2.parent_id = eb1.rand_id
+  4          WHERE eb1.level = 1
+  5            AND eb1.beneficiary_type = 'custom_allocation'
+  6            AND eb2.beneficiary_type = 'preset_residual'
+  7            AND eb1.person_id is not null
+  8            AND eb1.property_id is null
+
+
+ ; 

# 2023-02-03 13:06:29.062111
+\e

# 2023-02-03 13:06:39.003360
+SELECT eb2.rand_id
+FROM estate_beneficiaries eb1
+JOIN estate_beneficiaries eb2
+ON eb2.parent_id = eb1.rand_id
+WHERE eb1.level = 1
+AND eb1.beneficiary_type = 'custom_allocation'
+AND eb2.beneficiary_type = 'preset_residual'
+AND eb1.person_id is not null
+AND eb1.property_id is null
+ ;

# 2023-02-03 13:06:54.115602
+SELECT eb2.level
+FROM estate_beneficiaries eb1
+JOIN estate_beneficiaries eb2
+ON eb2.parent_id = eb1.rand_id
+WHERE eb1.level = 1
+AND eb1.beneficiary_type = 'custom_allocation'
+AND eb2.beneficiary_type = 'preset_residual'
+AND eb1.person_id is not null
+AND eb1.property_id is null
+ ;

# 2023-02-03 13:07:03.734265
+SELECT distinct eb2.level
+FROM estate_beneficiaries eb1
+JOIN estate_beneficiaries eb2
+ON eb2.parent_id = eb1.rand_id
+WHERE eb1.level = 1
+AND eb1.beneficiary_type = 'custom_allocation'
+AND eb2.beneficiary_type = 'preset_residual'
+AND eb1.person_id is not null
+AND eb1.property_id is null
+ ;

# 2023-02-03 13:07:19.451867
+select * from estate_beneficiaries eb1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 13:08:00.437814
+select ep.rand_id, count(eb2.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.level = 1 and eb2.level = 2 eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null group by ep.rand_id;

# 2023-02-03 13:08:06.331223
+select ep.rand_id, count(eb2.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null group by ep.rand_id;

# 2023-02-03 13:08:34.702407
+select ep.rand_id, max(count(eb2.rand_id)), min(count(eb2.rand_id)) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null group by ep.rand_id;

# 2023-02-03 13:08:49.069949
+select ep.rand_id, count(eb2.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null group by ep.rand_id;

# 2023-02-03 13:09:20.007718
+select min(count), max(count) from (select ep.rand_id, count(eb2.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null group by ep.rand_id) query;

# 2023-02-03 13:09:24.631212
+select ep.rand_id, count(eb2.rand_id) from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null group by ep.rand_id;

# 2023-02-03 13:10:40.367081
+select ep.rand_id = eb2.estate_id from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null group by ep.rand_id;

# 2023-02-03 13:10:49.714099
+select ep.rand_id = eb2.estate_id from estate_beneficiaries eb join estate_plans ep on ep.rand_id = eb.estate_id join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id and eb1.level = 1 join estate_beneficiaries eb2 on eb2.parent_id = eb1.rand_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 13:12:14.064106
+select count(eb2.rand_id) from estate_beneficiaries eb1 join estate_beneficiaries eb2 on eb1.rand_id = eb2.parent_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_types = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 13:12:22.888038
+select count(eb2.rand_id) from estate_beneficiaries eb1 join estate_beneficiaries eb2 on eb1.rand_id = eb2.parent_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 13:12:44.214132
+select count(distinct eb2.estate_id) from estate_beneficiaries eb1 join estate_beneficiaries eb2 on eb1.rand_id = eb2.parent_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 13:13:12.354790
+select count(*) from estate_beneficiaries where estate_id is null;

# 2023-02-03 13:13:13.749130
+select count(distinct eb2.estate_id) from estate_beneficiaries eb1 join estate_beneficiaries eb2 on eb1.rand_id = eb2.parent_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 13:13:26.516217
+select count(distinct eb1.estate_id) from estate_beneficiaries eb1 join estate_beneficiaries eb2 on eb1.rand_id = eb2.parent_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 13:13:57.662850
+select count(distinct ep.rand_id) from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id join estate_beneficiaries eb2 on eb1.rand_id = eb2.parent_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null;

# 2023-02-03 13:14:57.662545
+select ep.rand_id, count(eb2.rand_id) from estate_plans ep join estate_beneficiaries eb1 on eb1.estate_id = ep.rand_id join estate_beneficiaries eb2 on eb1.rand_id = eb2.parent_id where eb1.level = 1 and eb2.level = 2 and eb1.beneficiary_type = 'custom_allocation' and eb2.beneficiary_type = 'preset_residual' and eb1.person_id is not null and eb1.property_id is null group by ep.rand_id;

# 2023-02-06 14:07:36.326014
+\c freewill_dev_backup_02_03_23

# 2023-02-06 14:07:39.231763
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_02_03_23;

# 2023-02-06 14:08:11.516219
+\c freewill_dev

# 2023-02-06 14:08:19.047462
+select * from profiles where rand_id = 'rlyEPbGY';

# 2023-02-06 14:08:26.040503
+select * from users where rand_id = '4O1iPjpT';

# 2023-02-06 14:08:51.991971
+update users set encrypted_password='$2a$10$.iU1PqYMsyTLhJK7HnKuWuRHxHpsgpzqB/aiBBa1oK1HD3ki4/T.y' where rand_id = '4O1iPjpT';

# 2023-02-06 14:10:31.206910
+select * from profiles where rand_id = 'rlyEPbGY';

# 2023-02-06 14:11:10.318266
+select rand_id from estate_plan where profile_id = 'rlyEPbGY';

# 2023-02-06 14:11:16.127592
+select rand_id from estate_plans where profile_id = 'rlyEPbGY';

# 2023-02-06 14:11:28.415170
+select * from estate_beneficiaries where estate_id = 'prUIyZfv';

# 2023-02-06 14:11:43.806550
+select * from estate_beneficiaries where estate_id = 'prUIyZfv' and level = 2;

# 2023-02-06 14:12:45.527012
+select parent_id, beneficiary_type from estate_beneficiaries where estate_id = 'prUIyZfv' and level = 2;

# 2023-02-06 14:13:17.359589
+select * from estate_beneficiaries where rand_id in (select parent_id from estate_beneficiaries where estate_id = 'prUIyZfv' and level = 2);

# 2023-02-06 14:14:12.800217
+select parent_id, beneficiary_type from estate_beneficiaries where estate_id = 'prUIyZfv' and level = 2;

# 2023-02-06 14:14:34.540415
+\c freewill_dev_backup_02_03_23

# 2023-02-06 14:14:36.094534
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_02_03_23;

# 2023-02-06 14:14:45.238463
+\c freewill_dev

# 2023-02-07 11:08:57.209672
+select * from estate_plans limit 1;

# 2023-02-07 11:11:00.980935
+select * from estate_plans where estate_id = 'HMn0BwzO';

# 2023-02-07 11:11:07.349052
+select * from estate_plans where rand_id = 'HMn0BwzO';

# 2023-02-07 11:11:44.308527
+select * from estate_plans where profile_id = 'cBGZTgcT';

# 2023-02-07 11:12:01.477634
+update estate_plans set has_permission_to_share_info = null where profile_id = 'cBGZTgcT';

# 2023-02-07 11:13:17.348841
+select * from estate_plans where profile_id = 'cBGZTgcT';

# 2023-02-07 11:17:57.875433
+select has_permission_to_share_info from estate_plans where rand_id = '9hsLOeW1';

# 2023-02-07 11:18:05.997173
+update estate_plans set has_permission_to_share_info = null where profile_id = 'cBGZTgcT';

# 2023-02-07 11:19:30.015927
+select has_permission_to_share_info from estate_plans where rand_id = '9hsLOeW1';

# 2023-02-07 11:19:42.025378
+update estate_plans set has_permission_to_share_info = null where profile_id = 'cBGZTgcT';

# 2023-02-07 11:19:53.570376
+select has_permission_to_share_info from estate_plans where rand_id = '9hsLOeW1';

# 2023-02-07 11:44:55.961231
+update estate_plans set has_permission_to_share_info = null where profile_id = 'cBGZTgcT';

# 2023-02-13 13:21:11.431393
+\d contact_profiles

# 2023-02-13 13:21:12.893553
+\d contact_profile

# 2023-02-13 13:21:31.052302
+\d portal_contacts

# 2023-02-14 11:07:41.497762
+\q

# 2023-02-21 15:06:41.134399
+\d profiles

# 2023-02-22 11:26:41.209000
+\q

# 2023-02-22 11:26:54.559895
+select * from profiles where rand_id = 'zlzjZYSk';

# 2023-02-22 11:26:56.895445
+select * from profiles where rand_id = 'zIzjZYSk';

# 2023-02-22 11:27:17.631965
+select * from estate_plans where profile_id in (select rand_id from profiles where rand_id = 'zIzjZYSk');

# 2023-02-23 13:39:35.500665
+\q

# 2023-02-23 13:40:12.734885
+select * from profiles where name->f_name = 'Caitie';

# 2023-02-23 13:40:16.956654
+select * from profiles where name->>f_name = 'Caitie';

# 2023-02-23 13:40:20.458570
+select * from profiles where name->'f_name' = 'Caitie';

# 2023-02-23 13:40:30.137636
+select * from profiles limit 1;

# 2023-02-23 13:40:46.645527
+select * from profiles where f_name->>'last' = 'Eggl';

# 2023-02-23 13:40:57.778345
+select * from profiles where f_name->>'last' = 'Eggl' and f_name->>'first' = 'Caitie';

# 2023-02-23 13:41:19.014141
+select * from profiles where email_address = 'caitieee@fake.com';

# 2023-02-23 13:41:23.487075
+select * from profiles where email = 'caitieee@fake.com';

# 2023-02-23 13:41:35.189585
+select * from users where email = 'caitieee@fake.com';

# 2023-02-23 13:41:51.693016
+\e

# 2023-02-23 13:42:22.488424
+update users set encrypted_password = (select encrypted_password from users where email = 'riley@freewill.com') where email = 'caitieee@fake.com';

# 2023-02-23 13:42:27.446629
+select * from users where email = 'caitieee@fake.com';

# 2023-02-23 13:43:09.120712
+update users set email = 'riley@freewill.com' where email = 'caitieee@fake.com';

# 2023-02-23 13:43:23.080536
+update users set email = 'riley.voor@gmail.com' where email = 'caitieee@fake.com';

# 2023-02-23 13:48:26.796089
+select * from organizations where rand_id = 'flwQhVfj';

# 2023-02-23 13:49:06.671796
+select * from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com'));

# 2023-02-23 13:49:37.392413
+select * from estate_charitable_gifts where estate_id in (select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com')));

# 2023-02-23 13:49:59.086106
+select * from programs where (select program_id from estate_charitable_gifts where estate_id in (select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com'))));

# 2023-02-23 13:50:07.487507
+select * from programs where rand_id in (select program_id from estate_charitable_gifts where estate_id in (select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com'))));

# 2023-02-23 13:50:28.508905
+select * from programs where organization_id = 'flwQhVfj';

# 2023-02-23 13:50:46.079643
+select * from estate_charitable_gifts where estate_id in (select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com')));

# 2023-02-23 13:51:00.008164
+update estate_charitable_gifts set program_id = 'TUmQdFdH' where estate_id in (select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com')));

# 2023-02-23 13:51:56.344526
+select * from estate_charitable_gifts where estate_id in (select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com')));

# 2023-02-23 13:52:28.539344
+update estate_charitable_gifts set organiztion_id = 'flwQhVfj' where estate_id in (select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com')));

# 2023-02-23 13:52:38.904142
+select * from estate_charitable_gifts where estate_id in (select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com')));

# 2023-02-23 13:52:46.688655
+update estate_charitable_gifts set organization_id = 'flwQhVfj' where estate_id in (select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com')));

# 2023-02-23 13:53:19.503763
+select * from estate_charitable_gifts where estate_id in (select rand_id from estate_plans where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com')));

# 2023-02-23 13:53:39.337290
+select * from portal_legacy_gifts limit 1;

# 2023-02-23 13:53:47.789441
+select * from portal_legacy_gifts;

# 2023-02-23 13:53:59.554093
+select * from portal_gift_events;

# 2023-02-23 13:54:04.797899
+select * from portal_legacy_gifts;

# 2023-02-23 13:54:10.005137
+\d portal_legacy_gifts 

# 2023-02-23 13:55:30.023312
+select * from vw_legacy_gifts;

# 2023-02-23 13:55:36.959135
+select * from vw_legacy_gifts limit 1;

# 2023-02-23 13:56:48.469952
+select * from vw_legacy_gifts where fullName->'first' = 'Caitie';

# 2023-02-23 13:57:10.500448
+select fullName from vw_legacy_gifts limit 1;

# 2023-02-23 13:57:15.055190
+select * from vw_legacy_gifts limit 1;

# 2023-02-23 13:57:30.665575
+select fullName from (select * from vw_legacy_gifts) query;

# 2023-02-23 13:57:36.480746
+select query.fullName from (select * from vw_legacy_gifts) query;

# 2023-02-23 13:57:40.393584
+select fullName from vw_legacy_gifts limit 1;

# 2023-02-23 13:57:46.044079
+select vw_legacy_gifts.fullName from vw_legacy_gifts limit 1;

# 2023-02-23 13:59:26.440250
+select * from users where email = 'glooopgleeep@gmail.com';

# 2023-02-23 13:59:51.631582
+update users set encrypted_password = (select encrypted_password from users where email = 'riley@freewill.com') where email = 'glooopgleeep@gmail.com';

# 2023-02-23 14:00:04.818734
+update users set email = 'riley.voor@gmail.com' where email = 'glooopgleeep@gmail.com';

# 2023-02-23 14:00:28.136870
+update users set email = 'caitieee@fake.com' where email = 'riley.voor@gmail.com';

# 2023-02-23 14:00:33.177760
+update users set email = 'riley.voor@gmail.com' where email = 'glooopgleeep@gmail.com';

# 2023-02-23 14:05:50.985844
+select * from users where email = 'riley.voor@gmail.com';

# 2023-02-24 11:19:26.967835
+\q

# 2023-02-24 11:20:03.900613
+select * from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com');

# 2023-02-24 11:20:42.060431
+update profiles set email_preferred_at = null, text_message_preferred_at = null, phone_call_preferred_at = null, postal_mail_preferred_at = null, no_contact_preferred_at = null where rand_id = 'dqgs44Th';

# 2023-02-24 11:21:02.455467
+select * from profiles where account_id in (select rand_id from users where email = 'riley.voor@gmail.com');

# 2023-02-24 11:21:13.829324
+update profiles set email_preferred_at = null, text_message_preferred_at = null, phone_call_preferred_at = null, postal_mail_preferred_at = null, no_contact_preferred_at = null where rand_id = 'JSVvPVL6';

# 2023-03-07 12:04:58.092636
+select * from estate_charitable_gifts limit 1;

# 2023-03-07 12:55:53.868773
+select * from portal_legacy_gifts limit 1;

# 2023-03-07 12:56:03.584018
+\d portal_legacy_gifts

# 2023-03-07 12:56:10.816615
+select count(*) from portal_legacy_gifts;

# 2023-03-07 12:56:15.006596
+\q

# 2023-03-07 12:56:22.599169
+select count(*) from portal_legacy_gifts;

# 2023-03-07 12:56:24.126993
+\q

# 2023-03-07 12:56:28.479446
+select count(*) from portal_legacy_gifts;

# 2023-03-07 12:56:29.734547
+\q

# 2023-03-07 13:04:41.783011
+select * from vw_legacy_gifts;

# 2023-03-07 13:04:45.003553
+select * from vw_legacy_gifts limit 1;

# 2023-03-07 13:05:01.798807
+select metapath from vw_legacy_gifts limit 1;

# 2023-03-07 13:05:09.150790
+select vw_legacy_gifst.metapath from vw_legacy_gifts limit 1;

# 2023-03-07 13:05:15.062935
+select metaPath from vw_legacy_gifts limit 1;

# 2023-03-07 13:05:21.057277
+select vw_legacy_gifts.metaPath from vw_legacy_gifts limit 1;

# 2023-03-07 13:05:28.274872
+select "vw_legacy_gifts.metaPath" from vw_legacy_gifts limit 1;

# 2023-03-07 13:05:40.870495
+select * from vw_legacy_gifts limit 1;

# 2023-03-07 13:05:51.302346
+select metaPath from vw_legacy_gifts limit 1;

# 2023-03-07 13:06:03.805711
+select metaPath from (select * from vw_legacy_gifts limit 1) query;

# 2023-03-07 13:06:09.350810
+select query.metaPath from (select * from vw_legacy_gifts limit 1) query;

# 2023-03-07 13:06:20.790882
+select "query.metaPath" from (select * from vw_legacy_gifts limit 1) query;

# 2023-03-07 13:06:24.989904
+select "metaPath" from (select * from vw_legacy_gifts limit 1) query;

# 2023-03-07 13:06:29.496264
+select "metaPath" from (select * from vw_legacy_gifts limit 100) query;

# 2023-03-07 13:07:09.163669
+select distinct "metaPath" from (select * from vw_legacy_gifts) query;

# 2023-03-07 13:07:23.764631
+select * from vw_legacy_gifts limit 1;

# 2023-03-07 13:07:57.853145
+select distinct "metaPath" from (select * from vw_legacy_gifts where orgCustomUrl != null) query;

# 2023-03-07 13:08:02.388352
+select distinct "metaPath" from (select * from vw_legacy_gifts where "orgCustomUrl" != null) query;

# 2023-03-07 13:08:15.901203
+select distinct "metaPath" from vw_legacy_gifts where "orgCustomUrl" != null;

# 2023-03-07 13:08:20.683025
+select distinct "metaPath" from vw_legacy_gifts;

# 2023-03-07 13:08:23.167606
+select distinct "metaPath" from vw_legacy_gifts limit 1;

# 2023-03-07 13:08:29.276206
+select "metaPath" from vw_legacy_gifts limit 1;

# 2023-03-07 13:08:43.972248
+select "metaPath" from vw_legacy_gifts where "orgCustomUrl" is not null;

# 2023-03-07 13:08:49.163545
+select "metaPath" from vw_legacy_gifts where "orgCustomUrl" is not null limit 10;

# 2023-03-07 13:08:56.560351
+select "metaPath" from vw_legacy_gifts where "orgCustomUrl" is not null limit 100;

# 2023-03-07 13:09:26.317755
+select "metaPath" from vw_legacy_gifts where "orgCustomUrl" is not null and "metaPath" ilike 'record/%';

# 2023-03-07 13:09:34.883875
+select "metaPath" from vw_legacy_gifts where "metaPath" ilike 'record/%';

# 2023-03-07 13:10:16.439689
+select * from organization_custom_urls limit 10;

# 2023-03-07 13:10:22.979559
+select url_name from organization_custom_urls limit 10;

# 2023-03-07 13:10:29.292843
+select url_name from organization_custom_urls;

# 2023-03-14 10:53:54.319218
+\d portal_contacts

# 2023-03-15 11:56:05.398383
+SELECT * FROM vw_legacy_gifts WHERE "orgRandId" IN (:orgIds) AND "donorId" IN (:donorIds) AND "shareInfo" = TRUE;

# 2023-03-15 11:56:06.523951
+\e

# 2023-03-15 11:56:31.805090
+SELECT * FROM vw_legacy_gifts WHERE "orgRandId" IN ('', '', '') AND "donorId" IN ('', null, '', null) AND "shareInfo" = TRUE;

# 2023-03-15 11:56:42.556253
+select * from vw_legacy_gifts limit 1;

# 2023-03-15 11:57:08.116586
+SELECT * FROM vw_legacy_gifts WHERE "orgRandId" IN ('02phfB5Q', '', '') AND "donorId" IN ('', null, '', null) AND "shareInfo" = TRUE;

# 2023-03-15 11:57:21.109674
+SELECT * FROM vw_legacy_gifts WHERE "orgRandId" IN ('02phfB5Q', '', '') AND "donorId" IN ('qaJrEEyq', null, '', null) AND "shareInfo" = TRUE;

# 2023-03-15 11:57:35.837125
+SELECT * FROM vw_legacy_gifts WHERE "orgRandId" IN ('02phfB5Q', '', '') AND "donorId" IN ('qaJrEEyq', '', null) AND "shareInfo" = TRUE;

# 2023-03-15 11:57:40.880000
+select * from vw_legacy_gifts limit 1 offset 1;

# 2023-03-15 11:58:06.488364
+SELECT * FROM vw_legacy_gifts WHERE "orgRandId" IN ('02phfB5Q', '', '') AND "donorId" IN ('qaJrEEyq', 'KdsPxYgF', null) AND "shareInfo" = TRUE;

# 2023-03-15 11:58:15.301253
+SELECT * FROM vw_legacy_gifts WHERE "orgRandId" IN ('02phfB5Q') AND "donorId" IN ('qaJrEEyq', 'KdsPxYgF', null) AND "shareInfo" = TRUE;

# 2023-03-15 11:58:20.676084
+SELECT * FROM vw_legacy_gifts WHERE "orgRandId" IN ('02phfB5Q') AND "donorId" IN ('qaJrEEyq', 'KdsPxYgF') AND "shareInfo" = TRUE;

# 2023-03-15 11:58:27.125234
+SELECT * FROM vw_legacy_gifts WHERE "orgRandId" IN ('02phfB5Q') AND "donorId" IN ('qaJrEEyq', 'KdsPxYgF', null) AND "shareInfo" = TRUE;

# 2023-03-15 11:58:36.080181
+\d vw_legacy_gifts

# 2023-03-15 11:59:15.006427
+\d vw_major_gifts

# 2023-03-15 12:03:45.483129
+select * from portal_contacts limit 1;

# 2023-03-15 12:10:44.558607
+\d portal_contacts

# 2023-03-16 10:37:12.427304
+\q

# 2023-03-16 10:37:15.141533
+\d portal_contacts

# 2023-03-16 13:22:58.461661
+\l

# 2023-03-16 13:23:25.581163
+\q

# 2023-03-16 13:27:21.020898
+select * from public._schema_history;

# 2023-03-16 13:27:38.735282
+select * from public._schema_history order by installed_on desc;

# 2023-03-16 13:28:11.790654
+select * from programs where rand_id = 'cEHEGpsm';

# 2023-03-16 13:28:13.765074
+\q

# 2023-03-16 13:28:19.167857
+select * from programs where rand_id = 'cEHEGpsm';

# 2023-03-16 13:29:26.078931
+\q

# 2023-03-16 13:32:09.065117
+\d portal_contacts

# 2023-03-16 13:32:35.921998
+select * from portal_contacts limit 1;

# 2023-03-16 14:00:54.404871
+select id from portal_contacts limit 20;

# 2023-03-16 14:02:05.464632
+select * from portal_contacts where id = 224340;

# 2023-03-16 14:03:29.145173
+update portal_contacts set profile_id = null where id = 224340;

# 2023-03-16 14:03:42.267363
+select * from portal_contacts where id = 224340;

# 2023-03-17 12:11:39.382805
+\q

# 2023-03-17 12:11:46.057624
+select counT(*) from portal_contacts;

# 2023-03-17 12:11:50.469124
+select count(*) from portal_contacts;

# 2023-03-17 12:13:06.994977
+select * from portal_contacts where id = 216443;

# 2023-03-17 12:13:38.563112
+update portal_contacts set profile_id = null where id = 216443;

# 2023-03-17 12:15:11.479772
+select * from portal_contacts where id = 216443;

# 2023-03-17 12:17:31.179048
+select * from portal_contacts where profile_id = 'dqgs44Th';

# 2023-03-17 12:39:13.210894
+\q

# 2023-03-17 12:39:25.117112
+select * from portal_contacts where id = 224335;

# 2023-03-17 12:39:37.364716
+update portal_contacts set profile_id = null where id = 224335;

# 2023-03-17 12:50:32.685649
+update portal_contacts set profile_id = '9SjHCt0Z' where id = 224335;

# 2023-03-17 12:52:13.866996
+update portal_contacts set profile_id = null where id = 224335;

# 2023-03-17 12:57:04.866425
+select * from portal_contacts where id = 224335;

# 2023-03-17 13:19:45.078913
+update portal_contacts set profile_id = '9SjHCt0Z' where id = 224335;

# 2023-03-17 13:20:19.304516
+update portal_contacts set profile_id = null where id = 224335;

# 2023-03-17 13:20:55.472022
+update portal_contacts set profile_id = '9SjHCt0Z' where id = 224335;

# 2023-03-17 13:21:14.853232
+select * from portal_legacy_gifts limit 1;

# 2023-03-17 13:21:57.001102
+select * from portal_legacy_gifts where gift_id = 'E6s8K4TG';

# 2023-03-17 13:22:13.167930
+select * from estate_plans where rand_id = 'E6s8K4TG';

# 2023-03-17 13:22:38.506914
+select * from portal_legacy_gifts limit 1;

# 2023-03-17 13:22:55.573253
+update portal_contacts set profile_id = null where id = 224335;

# 2023-03-17 13:34:22.826838
+alter table portal_contacts alter column profile_id add not null;

# 2023-03-17 13:34:40.504491
+alter table portal_contacts alter column profile_id set not null;

# 2023-03-17 13:34:49.227334
+update portal_contacts set profile_id = '9SjHCt0Z' where id = 224335;

# 2023-03-17 13:34:52.335179
+alter table portal_contacts alter column profile_id add not null;

# 2023-03-17 13:34:58.109423
+alter table portal_contacts alter column profile_id set not null;

# 2023-03-17 13:35:16.393047
+select count(*) from portal_contacts where profile_id is null;

# 2023-03-17 13:35:20.660339
+select * from portal_contacts where profile_id is null;

# 2023-03-17 13:35:35.687521
+update portal_contacts set profile_id = '9SjHCt0Z' where id = 224340;

# 2023-03-17 13:35:47.259618
+update portal_contacts set profile_id = 'abcdef' where id = 224340;

# 2023-03-17 13:35:53.744657
+alter table portal_contacts alter column profile_id set not null;

# 2023-03-17 14:21:18.196232
+\d vw_legacy_gifts

# 2023-03-17 14:26:46.259195
+select null = null;

# 2023-03-17 14:26:58.542510
+select * from portal_contacts limit 1;

# 2023-03-17 14:27:07.324268
+select * from portal_contacts where deleted_at = null;;

# 2023-03-17 14:27:10.184385
+select * from portal_contacts where deleted_at is null;;

# 2023-03-17 14:27:28.461025
+select * from portal_contacts where deleted_at in (now(), null);

# 2023-03-17 14:27:32.162951
+select * from portal_contacts where deleted_at in (null);

# 2023-03-20 11:07:22.712413
+select * from portal_contacts where deleted_at in ();

# 2023-03-20 11:23:57.758067
+select * from portal_contacts where id = 224335;

# 2023-03-20 11:24:11.297112
+update portal_contacts set profile_id = null where id = 224335;

# 2023-03-20 14:01:32.557468
+\d portal_contacts

# 2023-03-20 14:02:51.637677
+alter table portal_contacts drop column email_preferred_at;

# 2023-03-20 14:03:07.856961
+alter table portal_contacts drop column cascade email_preferred_at;

# 2023-03-20 14:03:18.625227
+alter table portal_contacts drop column email_preferred_at cascade;

# 2023-03-20 14:03:22.949106
+\d portal_contacts

# 2023-03-20 14:03:46.565661
+alter table portal_contacts add column email_preferred_at timestamp;

# 2023-03-20 14:03:56.205211
+alter table portal_contacts drop column email_confirmed_at;

# 2023-03-20 14:03:59.031125
+\d portal_contacts

# 2023-03-20 15:03:53.776034
+\d vw_legacy_gifts

# 2023-03-20 15:18:34.580340
+select * from profiles limit 1;

# 2023-03-20 15:18:46.635944
+select * from users limit 1;

# 2023-03-20 15:19:03.220589
+select confirmed_at from users limit 100;

# 2023-03-20 15:19:41.088238
+\d portal_contacts

# 2023-03-20 15:38:15.902359
+\d users

# 2023-03-21 11:50:33.815185
+\d portal_contacts

# 2023-03-21 11:50:48.013167
+alter table portal_contacts alter column profile_id drop not null;

# 2023-03-21 11:50:51.549745
+\d portal_contacts

# 2023-03-22 13:33:29.674006
+\d portal_contact_events

# 2023-03-22 13:34:05.822592
+select created_by from portal_contact_events limit 10;

# 2023-03-22 13:34:26.437388
+select created_source from portal_contact_events limit 10;

# 2023-03-22 13:44:32.087781
+\d profiles

# 2023-03-27 11:42:31.855672
+select * from users where email = 'riley.voor@gmail.com';

# 2023-03-27 11:42:36.251407
+select * from users where email = 'riley@freewill.com';

# 2023-03-27 11:43:24.036875
+update users set confirmation_token = null, confirmed_at = null, confirmation_sent_at = null where email = 'riley@freewill.com';

# 2023-03-27 11:44:00.954977
+select * from users where email = 'riley@freewill.com';

# 2023-03-27 11:44:13.285015
+select * from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com');

# 2023-03-27 11:44:30.899539
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-27 11:45:10.356572
+select * from portal_contact_events limit 1;

# 2023-03-27 11:45:13.298905
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-27 11:45:29.382191
+select * from portal_contact_events where portal_contact_id in (select id from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com')));

# 2023-03-27 11:45:41.470585
+select * from portal_contact_events where portal_contact_id in (select id from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'))) order by created_at desc;

# 2023-03-27 11:46:04.847122
+select * from portal_contact_events where event_details is not null;

# 2023-03-27 11:46:23.936906
+select * from portal_contacts limit 1;

# 2023-03-27 11:46:30.126444
+select * from portal_contact_events where event_details is not null;

# 2023-03-27 11:46:40.055378
+select * from portal_contacts where deceased_date is not null;

# 2023-03-27 13:13:14.651018
+select min(visible_in_portal_at) from portal_contacts;

# 2023-03-27 13:14:11.988604
+select email_confirmed_at from portal_contacts where email_confirmed_at is not null;

# 2023-03-27 13:17:47.362882
+select email_confirmed_at from portal_contacts where email_confirmed_at is not null order by email_confirmed_at desc limit 10;

# 2023-03-27 13:18:07.938709
+select count(*) from portal_contacts where email_confirmed_at is not null;

# 2023-03-27 13:18:41.332682
+  1 UPDATE portal_contacts pc
+7      SET email_confirmed_at = u.confirmed_at                                                                                       1   FROM profiles p, users u                                                                                                       2  WHERE pc.profile_id = p.rand_id
+  3    AND p.account_id = u.rand_id
+  4    AND u.confirmed_at < (
+  5          SELECT min(email_confirmed_at)
+  6            FROM portal_contacts                                                                                                  7           WHERE email_confirmed_at IS NOT NULL                                                                                   8        );
+

# 2023-03-27 13:18:42.619388
+\e

# 2023-03-27 13:19:46.629749
+UPDATE portal_contacts pc
+   SET email_confirmed_at = null
+  FROM profiles p, users u
+ WHERE pc.profile_id = p.rand_id
+   AND p.account_id = u.rand_id
+   AND u.confirmed_at < (
+       SELECT max(email_confirmed_at)
+         FROM portal_contacts                                                                                                          WHERE email_confirmed_at IS NOT NULL                                                                                          );

# 2023-03-27 13:19:56.310084
+select count(*) from portal_contacts where email_confirmed_at is not null;

# 2023-03-27 13:20:05.013821
+select email_confirmed_at from portal_contacts where email_confirmed_at is not null order by email_confirmed_at desc limit 10;

# 2023-03-27 13:20:26.691719
+create database freewill_dev_backup_03_27_23 with template freewill_dev;

# 2023-03-27 13:24:59.902120
+select * from portal_contact_events where event_details is not null;

# 2023-03-27 13:25:15.805207
+select * from portal_contact_events where event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-27 13:34:19.415759
+\d portal_contact_events

# 2023-03-27 13:34:22.900458
+select * from portal_contact_events where event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-27 13:51:10.707236
+\d portal_contact_events

# 2023-03-27 13:52:59.480364
+select count(*) from portal_contacts where email_confirmed_at is not null;

# 2023-03-27 13:53:04.342249
+select email_confirmed_at from portal_contacts where email_confirmed_at is not null order by email_confirmed_at desc limit 10;

# 2023-03-27 13:53:21.342026
+select * from portal_contact_events where event_type = 'EMAIL_CONFIRMED_AT_UPDATED' limit 10;

# 2023-03-27 13:54:44.241878
+select pc.id, pc.email_confirmed_at, pce.portal_contact_id, pce.event_details from portal_contacts pc join portal_contact_events pce on pc.id = pce.portal_contact_id where pc.email_confirmed_at is not null and pce.event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-27 13:55:07.545796
+select count(*) from portal_contacts pc join portal_contact_events pce on pc.id = pce.portal_contact_id where pc.email_confirmed_at is not null and pce.event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-27 13:55:46.193064
+select count(*) from portal_contact_events where created_at > now() - '10 minutes'::interval;

# 2023-03-28 12:44:50.747199
+select * from portal_contacts where profile_id is null;

# 2023-03-29 11:39:22.121103
+select count(*) from portal_contacts pc join portal_contact_events pce on pc.id = pce.portal_contact_id where pc.email_confirmed_at is not null and pce.event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-29 11:39:30.413390
+select pc.id, pc.email_confirmed_at, pce.portal_contact_id, pce.event_details from portal_contacts pc join portal_contact_events pce on pc.id = pce.portal_contact_id where pc.email_confirmed_at is not null and pce.event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-29 11:39:36.023423
+\l

# 2023-03-29 11:39:41.697488
+\c freewill_dev_backup_03_27_23

# 2023-03-29 11:39:58.328939
+drop database freewill_dev; create database freewill_dev with template freewill_dev_backup_03_27_23;

# 2023-03-29 11:40:14.040030
+\c freewill_dev

# 2023-03-29 11:40:22.411508
+select email_confirmed_at from portal_contacts where email_confirmed_at is not null order by email_confirmed_at desc limit 10;

# 2023-03-29 11:40:57.342021
+select count(*) from portal_contacts pc join portal_contact_events pce on pc.id = pce.portal_contact_id where pc.email_confirmed_at is not null and pce.event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-29 11:41:09.221932
+select count(*) from portal_contact_events where created_at > now() - '10 minutes'::interval;

# 2023-03-29 11:49:00.388482
+\c freewill_dev_backup_03_27_23; \c freewill_dev;

# 2023-03-29 11:49:24.214305
+\c freewill_dev_backup_03_27_23; DROP DATABASE freewill_dev; CREATE DATABASE freewill_dev WITH TEMPLATE freewill_dev_backup_03_27_23; \c freewill_dev;

# 2023-03-29 11:49:46.152381
+select count(*) from portal_contact_events where created_at > now() - '10 minutes'::interval;

# 2023-03-29 12:01:25.316108
+\c freewill_dev_backup_03_27_23; DROP DATABASE freewill_dev; CREATE DATABASE freewill_dev WITH TEMPLATE freewill_dev_backup_03_27_23; \c freewill_dev;

# 2023-03-29 12:05:06.788410
+select count(*) from portal_contact_events where created_at > now() - '10 minutes'::interval;

# 2023-03-29 12:06:09.946527
+select count(*) from portal_contacts pc join portal_contact_events pce on pc.id = pce.portal_contact_id where pc.email_confirmed_at is not null and pce.event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-29 12:39:39.698967
+update users set confirmation_token = null, confirmed_at = null, confirmation_sent_at = null where email = 'riley@freewill.com';

# 2023-03-29 12:39:58.868541
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-29 12:40:27.405549
+update portal_contacts set email_confirmed_at = null where id in (select id from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com')));

# 2023-03-29 12:40:29.548377
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-29 14:36:28.986475
+select * from users where email = 'riley@freewill.com';

# 2023-03-30 11:19:01.265653
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-30 11:19:45.186180
+select count(*) from portal_contacts pc join portal_contact_events pce on pc.id = pce.portal_contact_id where pc.email_confirmed_at is not null and pce.event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-30 11:19:52.211418
+\c freewill_dev_backup_03_27_23; DROP DATABASE freewill_dev; CREATE DATABASE freewill_dev WITH TEMPLATE freewill_dev_backup_03_27_23; \c freewill_dev;

# 2023-03-30 11:20:58.727614
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-30 11:21:14.876274
+update portal_contacts set email_confirmed_at = null where id in (select id from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com')));

# 2023-03-30 11:21:20.819187
+update users set confirmation_token = null, confirmed_at = null, confirmation_sent_at = null where email = 'riley@freewill.com';

# 2023-03-30 11:21:23.828470
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-30 11:22:12.577941
+select * from users where email = 'riley@freewill.com';

# 2023-03-30 11:22:18.019017
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-30 11:22:50.667632
+update users set confirmation_token = null, confirmed_at = null, confirmation_sent_at = null where email = 'riley@freewill.com';

# 2023-03-30 11:22:54.124482
+update portal_contacts set email_confirmed_at = null where id in (select id from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com')));

# 2023-03-30 11:22:57.133279
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-30 11:23:33.310114
+update portal_contacts set email_confirmed_at = null where id in (select id from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com')));

# 2023-03-30 11:23:38.403293
+update users set confirmation_token = null, confirmed_at = null, confirmation_sent_at = null where email = 'riley@freewill.com';

# 2023-03-30 11:23:40.522736
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-30 11:26:28.394611
+update users set confirmation_token = null, confirmed_at = null, confirmation_sent_at = null where email = 'riley@freewill.com';

# 2023-03-30 11:26:32.731843
+update portal_contacts set email_confirmed_at = null where id in (select id from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com')));

# 2023-03-30 11:26:35.111219
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-30 11:28:31.402696
+select pc.email_confirmed_at, pce.event_type,  pce.event_details, u.confirmed_at, u.confirmation_token, u.confirmation_sent_at from portal_contacts pc join portal_contact_events pce on pce.portal_contact_id = pc.id join profiles p on p.id = pc.id join users u on u.rand_id = p.account_id where u.email = 'riley@freewill.com'; 

# 2023-03-30 11:28:46.814921
+select pc.email_confirmed_at, pce.event_type,  pce.event_details, u.confirmed_at, u.confirmation_token, u.confirmation_sent_at from portal_contacts pc left join portal_contact_events pce on pce.portal_contact_id = pc.id join profiles p on p.id = pc.id join users u on u.rand_id = p.account_id where u.email = 'riley@freewill.com'; 

# 2023-03-30 11:29:08.752588
+\e

# 2023-03-30 11:30:00.243732
+select pc.email_confirmed_at, pce.event_type,  pce.event_details, u.confirmed_at, u.confirmation_token, u.confirmation_sent_at from users u join profiles p on u.rand_id = p.account_id join portal_contacts pc on p.rand_id = pc.profile_id left join portal_contact_events pce on pce.portal_contact_id = pc.id where u.email = 'riley@freewill.com';

# 2023-03-30 11:30:14.976708
+select pc.email_confirmed_at, pce.event_type,  pce.event_details, u.confirmed_at, u.confirmation_token, u.confirmation_sent_at from users u join profiles p on u.rand_id = p.account_id join portal_contacts pc on p.rand_id = pc.profile_id left join portal_contact_events pce on pce.portal_contact_id = pc.id where u.email = 'riley@freewill.com' and event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-30 11:32:18.096949
+update users set confirmation_token = null, confirmed_at = null, confirmation_sent_at = null where email = 'riley@freewill.com'; update portal_contacts set email_confirmed_at = null where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com')); delete from portal_contact_events where portal_contact_id in (select id from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'))) and event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-30 11:32:25.460991
+select pc.email_confirmed_at, pce.event_type,  pce.event_details, u.confirmed_at, u.confirmation_token, u.confirmation_sent_at from users u join profiles p on u.rand_id = p.account_id join portal_contacts pc on p.rand_id = pc.profile_id left join portal_contact_events pce on pce.portal_contact_id = pc.id where u.email = 'riley@freewill.com' and event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-30 11:34:41.666888
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-30 11:36:30.269830
+select pc.email_confirmed_at, pce.event_type,  pce.event_details, u.confirmed_at, u.confirmation_token, u.confirmation_sent_at from users u join profiles p on u.rand_id = p.account_id join portal_contacts pc on p.rand_id = pc.profile_id left join portal_contact_events pce on pce.portal_contact_id = pc.id where u.email = 'riley@freewill.com' and event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-30 11:37:12.882262
+update users set confirmation_token = null, confirmed_at = null, confirmation_sent_at = null where email = 'riley@freewill.com'; update portal_contacts set email_confirmed_at = null where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com')); delete from portal_contact_events where portal_contact_id in (select id from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'))) and event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-30 11:37:38.218750
+select pc.email_confirmed_at, pce.event_type,  pce.event_details, u.confirmed_at, u.confirmation_token, u.confirmation_sent_at from users u join profiles p on u.rand_id = p.account_id join portal_contacts pc on p.rand_id = pc.profile_id left join portal_contact_events pce on pce.portal_contact_id = pc.id where u.email = 'riley@freewill.com' and event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-30 11:38:00.567795
+select * from users where email = 'riley@freewill.com';

# 2023-03-30 11:38:58.989150
+update users set confirmation_token = null, confirmed_at = null, confirmation_sent_at = null where email = 'riley@freewill.com'; update portal_contacts set email_confirmed_at = null where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com')); delete from portal_contact_events where portal_contact_id in (select id from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'))) and event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-30 11:41:24.289423
+select pc.email_confirmed_at, pce.event_type,  pce.event_details, u.confirmed_at, u.confirmation_token, u.confirmation_sent_at from users u join profiles p on u.rand_id = p.account_id join portal_contacts pc on p.rand_id = pc.profile_id left join portal_contact_events pce on pce.portal_contact_id = pc.id where u.email = 'riley@freewill.com' and event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-30 12:54:36.899588
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com'));

# 2023-03-30 12:56:30.315718
+select * from portal_contacts where profile_id in (select rand_id from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com')) order by created_at desc;

# 2023-03-30 13:38:16.608378
+select count(*) from portal_contacts pc join portal_contact_events pce on pc.id = pce.portal_contact_id where pc.email_confirmed_at is not null and pce.event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-30 13:39:52.382139
+select count(*) from portal_contact_events where created_at > now() - '10 minutes'::interval;

# 2023-03-30 13:41:48.791469
+\c freewill_dev_backup_03_27_23; DROP DATABASE freewill_dev; CREATE DATABASE freewill_dev WITH TEMPLATE freewill_dev_backup_03_27_23; \c freewill_dev;

# 2023-03-30 13:42:03.719936
+select count(*) from portal_contact_events where created_at > now() - '10 minutes'::interval;

# 2023-03-30 13:42:22.198596
+select count(*) from portal_contacts pc join portal_contact_events pce on pc.id = pce.portal_contact_id where pc.email_confirmed_at is not null and pce.event_type = 'EMAIL_CONFIRMED_AT_UPDATED';

# 2023-03-30 13:42:25.232146
+select count(*) from portal_contact_events where created_at > now() - '10 minutes'::interval;

# 2023-03-31 12:15:56.582540
+\q

# 2023-04-13 11:16:36.851527
+select * from user limti 1;

# 2023-04-13 11:16:39.032542
+select * from users limti 1;

# 2023-04-13 11:16:42.427613
+select * from users limit 1;

# 2023-04-13 11:16:52.975962
+select * from profiles limit 1;

# 2023-04-13 11:17:11.787416
+\d users

# 2023-04-13 11:17:21.409060
+select * from user_roles limit 1;

# 2023-04-13 11:17:29.620051
+select * from user_role_types;

# 2023-04-13 11:17:40.472815
+select * from organizations limit 1;

# 2023-04-13 11:18:15.514777
+\d portal_contacts

# 2023-04-13 11:18:51.725994
+select f_name from portal_contacts limit 10;

# 2023-04-13 11:18:58.172122
+select f_name from portal_contacts where f_name is not null;

# 2023-04-13 11:22:06.736858
+select meta_info from user_roles;

# 2023-04-13 11:22:20.558496
+select * from portal_users limit 1;

# 2023-04-13 11:22:35.870463
+select * from portal_users where email = 'riley@freewill.com';

# 2023-04-13 11:22:47.244601
+select rand_id from organizations limit 10;

# 2023-04-13 11:22:52.624749
+select * from portal_users where email = 'riley@freewill.com';

# 2023-04-13 11:23:25.431926
+update portal_users set org_ids = ['0OJ5hb8T', 'flwQhVfj'] where email = 'riley@freewill.com';

# 2023-04-13 11:23:39.188684
+update portal_users set org_ids = '["0OJ5hb8T", "flwQhVfj"]'::text[] where email = 'riley@freewill.com';

# 2023-04-13 11:23:49.523177
+update portal_users set org_ids = '{"0OJ5hb8T", "flwQhVfj"}'::text[] where email = 'riley@freewill.com';

# 2023-04-13 11:24:21.496318
+update portal_users set org_ids = '{"0OJ5hb8T", "flwQhVfj"}' where email = 'riley@freewill.com';

# 2023-04-13 11:24:48.895961
+update portal_users set org_ids = {'0OJ5hb8T', 'flwQhVfj'} where email = 'riley@freewill.com';

# 2023-04-13 11:25:08.423701
+update portal_users set org_ids = '{"0OJ5hb8T", "flwQhVfj"}'::text[] where email = 'riley@freewill.com';

# 2023-04-13 11:25:31.882307
+update portal_users set org_ids = '{"0OJ5hb8T", "flwQhVfj"}' where email = 'riley@freewill.com';

# 2023-04-13 11:25:45.407236
+update portal_users set org_ids = '["0OJ5hb8T", "flwQhVfj"]' where email = 'riley@freewill.com';

# 2023-04-13 11:25:51.839055
+select * from portal_users where email = 'riley@freewill.com';

# 2023-04-14 11:56:29.205270
+\d portal_contacts

# 2023-04-14 11:56:51.952094
+\q

# 2023-04-14 12:00:56.282040
+select * from _schema_history limit 10;

# 2023-04-14 12:01:19.965925
+select * from _schema_history where checksum = '202303151651';

# 2023-04-14 12:01:23.517241
+select * from _schema_history where checksum = 202303151651;

# 2023-04-14 12:01:43.685517
+select * from _schema_history limit 10;

# 2023-04-14 12:02:55.075692
+select * from _schema_history where version is not null;

# 2023-04-14 12:03:04.189540
+select * from _schema_history where version = 202303151651;

# 2023-04-14 12:03:12.436192
+select * from _schema_history where version = '202303151651';

# 2023-04-14 12:03:48.085462
+delete from _schema_history where version = '202303151651';

# 2023-04-14 12:03:51.218635
+\q

# 2023-04-14 12:09:05.172298
+select * from organizations where rand_id = 'qYkV5k3Z';

# 2023-04-14 12:09:08.111736
+\q

# 2023-04-14 12:09:15.770607
+select * from organizations where rand_id = 'qYkV5k3Z';

# 2023-04-14 12:09:51.396456
+\q

# 2023-04-14 12:10:12.129291
+insert into organizations () values ()???;

# 2023-04-14 12:10:13.483416
+\e

# 2023-04-14 12:15:26.001574
+insert into organizations (
+  id,
+  rand_id,
+  ein,
+  products,
+  is_fake,
+  legal_name,
+  display_name,
+  allowed_domains,
+  show_public_programs_after_partner_gift,
+  country,
+  ntee_family,
+  updated_source,
+  categories,
+  show_preferred_pronouns_input,
+  organization_size,
+  logo_is_hidden_for_featureships
+)
+values (
+  1614,
+  'qYkV5k3Z',
+  '73-1422414',
+  '{"has_daf":"current","has_qcd":"current","has_will":"never","has_stock_gift":"current"}'::jsonb,
+  false,
+  'Limbs for Life Foundation',
+  'Limbs for Life Foundation',
+  '["limbsforlife.org"]'::jsonb,
+  true,
+  'US',
+  'Human Services',
+  'admin',
+  [],
+  false,
+  'Grassroots',
+  false
+);y
+

# 2023-04-14 12:15:27.417272
+\e

# 2023-04-14 12:15:31.935911
+insert into organizations (
+  id,
+  rand_id,
+  ein,
+  products,
+  is_fake,
+  legal_name,
+  display_name,
+  allowed_domains,
+  show_public_programs_after_partner_gift,
+  country,
+  ntee_family,
+  updated_source,
+  categories,
+  show_preferred_pronouns_input,
+  organization_size,
+  logo_is_hidden_for_featureships
+)
+values (
+  1614,
+  'qYkV5k3Z',
+  '73-1422414',
+  '{"has_daf":"current","has_qcd":"current","has_will":"never","has_stock_gift":"current"}'::jsonb,
+  false,
+  'Limbs for Life Foundation',
+  'Limbs for Life Foundation',
+  '["limbsforlife.org"]'::jsonb,
+  true,
+  'US',
+  'Human Services',
+  'admin',
+  [],
+  false,
+  'Grassroots',
+  false
+);

# 2023-04-14 12:15:34.028440
+\e

# 2023-04-14 12:15:40.855742
+insert into organizations (
+  id,
+  rand_id,
+  ein,
+  products,
+  is_fake,
+  legal_name,
+  display_name,
+  allowed_domains,
+  show_public_programs_after_partner_gift,
+  country,
+  ntee_family,
+  updated_source,
+  categories,
+  show_preferred_pronouns_input,
+  organization_size,
+  logo_is_hidden_for_featureships
+)
+values (
+  1614,
+  'qYkV5k3Z',
+  '73-1422414',
+  '{"has_daf":"current","has_qcd":"current","has_will":"never","has_stock_gift":"current"}'::jsonb,
+  false,
+  'Limbs for Life Foundation',
+  'Limbs for Life Foundation',
+  '["limbsforlife.org"]'::jsonb,
+  true,
+  'US',
+  'Human Services',
+  'admin',
+  '[]'::jsonb,
+  false,
+  'Grassroots',
+  false
+);

# 2023-04-14 12:15:43.769502
+\q

# 2023-04-14 12:16:31.333114
+select * from organizations where rand_id = 'qYkV5k3Z';

# 2023-04-14 12:16:45.354500
+insert into organizations (
+  id,
+  rand_id,
+  ein,
+  products,
+  is_fake,
+  legal_name,
+  display_name,
+  allowed_domains,
+  show_public_programs_after_partner_gift,
+  country,
+  ntee_family,
+  updated_source,
+  categories,
+  show_preferred_pronouns_input,
+  organization_size,
+  logo_is_hidden_for_featureships
+)
+values (
+  1614,
+  'qYkV5k3Z',
+  '73-1422414',
+  '{"has_daf":"current","has_qcd":"current","has_will":"never","has_stock_gift":"current"}'::jsonb,
+  false,
+  'Limbs for Life Foundation',
+  'Limbs for Life Foundation',
+  '["limbsforlife.org"]'::jsonb,
+  true,
+  'US',
+  'Human Services',
+  'admin',
+  '[]'::jsonb,
+  false,
+  'Grassroots',
+  false
+);

# 2023-04-14 12:16:57.029352
+select * from organizations where rand_id = 'qYkV5k3Z';

# 2023-04-14 12:17:03.367597
+insert into organizations (
+  id,
+  rand_id,
+  ein,
+  products,
+  is_fake,
+  legal_name,
+  display_name,
+  allowed_domains,
+  show_public_programs_after_partner_gift,
+  country,
+  ntee_family,
+  updated_source,
+  categories,
+  show_preferred_pronouns_input,
+  organization_size,
+  logo_is_hidden_for_featureships
+)
+values (
+  1614,
+  'qYkV5k3Z',
+  '73-1422414',
+  '{"has_daf":"current","has_qcd":"current","has_will":"never","has_stock_gift":"current"}'::jsonb,
+  false,
+  'Limbs for Life Foundation',
+  'Limbs for Life Foundation',
+  '["limbsforlife.org"]'::jsonb,
+  true,
+  'US',
+  'Human Services',
+  'admin',
+  '[]'::jsonb,
+  false,
+  'Grassroots',
+  false
+);

# 2023-04-14 12:17:03.850976
+\e

# 2023-04-14 12:17:14.977925
+insert into organizations (
+  rand_id,
+  ein,
+  products,
+  is_fake,
+  legal_name,
+  display_name,
+  allowed_domains,
+  show_public_programs_after_partner_gift,
+  country,
+  ntee_family,
+  updated_source,
+  categories,
+  show_preferred_pronouns_input,
+  organization_size,
+  logo_is_hidden_for_featureships
+)
+values (
+  'qYkV5k3Z',
+  '73-1422414',
+  '{"has_daf":"current","has_qcd":"current","has_will":"never","has_stock_gift":"current"}'::jsonb,
+  false,
+  'Limbs for Life Foundation',
+  'Limbs for Life Foundation',
+  '["limbsforlife.org"]'::jsonb,
+  true,
+  'US',
+  'Human Services',
+  'admin',
+  '[]'::jsonb,
+  false,
+  'Grassroots',
+  false
+);

# 2023-04-14 12:17:41.610491
+insert into rand_ids_in_use ('abdjfkdl');

# 2023-04-14 12:17:48.430069
+insert into rand_ids_in_use (rand_id) values ('abdjfkdl');

# 2023-04-14 12:17:57.665441
+select * from rand_ids_in_use where rand_id = 'abdjfkdl';

# 2023-04-14 12:18:21.574483
+insert into organizations (
+  rand_id,
+  ein,
+  products,
+  is_fake,
+  legal_name,
+  display_name,
+  allowed_domains,
+  show_public_programs_after_partner_gift,
+  country,
+  ntee_family,
+  updated_source,
+  categories,
+  show_preferred_pronouns_input,
+  organization_size,
+  logo_is_hidden_for_featureships
+)
+values (
+  'qYkV5k3Z');

# 2023-04-14 12:18:25.356495
+\e

# 2023-04-14 12:18:29.883974
+insert into organizations (
+  rand_id,
+)
+values (
+  'qYkV5k3Z');

# 2023-04-14 12:18:31.275599
+\e

# 2023-04-14 12:18:39.734737
+insert into organizations (
+  rand_id
+)
+values
+(
+  'qYkV5k3Z'
+);

# 2023-04-14 12:18:42.793970
+\e

# 2023-04-14 12:18:52.611672
+insert into organizations (
+  rand_id,
+  legal_name
+)
+values
+(
+  'qYkV5k3Z',
+  'riley testing'
+);

# 2023-04-14 12:18:54.426183
+\e

# 2023-04-14 12:19:03.187834
+insert into organizations (
+  rand_id,
+  legal_name,
+  display_name
+)
+values
+(
+  'qYkV5k3Z',
+  'riley testing',
+  'riley testing'
+);

# 2023-04-14 12:19:04.713807
+\e

# 2023-04-14 12:19:12.020030
+insert into organizations (
+  rand_id,
+  legal_name,
+  display_name,
+  country
+)
+values
+(
+  'qYkV5k3Z',
+  'riley testing',
+  'riley testing',
+  'US'
+);

# 2023-04-14 12:19:24.634566
+select * from organizations where rand_id = 'qYkV5k3Z';

# 2023-04-14 12:19:33.570374
+select * from organizations where legal_name = 'riley testing';

# 2023-04-14 12:20:11.764258
+update organizations set rand_id = 'qYkV5k3Z' where rand_id = 'TkN15QLA';

# 2023-04-14 12:20:14.461451
+select * from organizations where legal_name = 'riley testing';

# 2023-04-14 12:20:20.443365
+\q

# 2023-04-14 12:21:39.351794
+select * from _schema_history where limit 10;

# 2023-04-14 12:21:43.516905
+select * from _schema_historylimit 10;

# 2023-04-14 12:21:45.582118
+select * from _schema_history limit 10;

# 2023-04-14 12:22:03.283751
+select * from _schema_history where script ilike 'migration%';

# 2023-04-14 12:22:06.627546
+select * from _schema_history where script ilike 'schema%';

# 2023-04-14 12:24:09.325143
+insert into _schema_history (installed_rank, version, type, script, installed_by, success) values (???, 202304111930, 'SQL', 'schemas/V202304111930__update_org_ids_for_crypto_charities.sql', 'freewill', true);

# 2023-04-14 12:24:20.212155
+select * from _schema_history order by rank desc limit 1;

# 2023-04-14 12:24:25.882428
+select * from _schema_history order by installed_rank desc limit 1;

# 2023-04-14 12:24:36.580572
+insert into _schema_history (installed_rank, version, type, script, installed_by, success) values (1160, 202304111930, 'SQL', 'schemas/V202304111930__update_org_ids_for_crypto_charities.sql', 'freewill', true);

# 2023-04-14 12:24:41.092689
+\e

# 2023-04-14 12:25:09.177991
+insert into _schema_history (installed_rank, version, type, description, script, installed_by, success) values (1160, 202304111930, 'SQL', 'Updating crypto charity records where the organization_id got emptied out accidentally', 'schemas/V202304111930__update_org_ids_for_crypto_charities.sql', 'freewill', true);

# 2023-04-14 12:25:13.763264
+\e

# 2023-04-14 12:25:28.679997
+insert into _schema_history (installed_rank, version, type, description, script, installed_by, execution_time, success) values (1160, 202304111930, 'SQL', 'Updating crypto charity records where the organization_id got emptied out accidentally', 'schemas/V202304111930__update_org_ids_for_crypto_charities.sql', 'freewill', 5, true);

# 2023-04-14 12:25:34.433451
+\e

# 2023-04-14 12:25:40.284123
+insert into _schema_history (installed_rank, version, type, description, script, installed_by, execution_time, success) values (1161, 202304111930, 'SQL', 'Updating crypto charity records where the organization_id got emptied out accidentally', 'schemas/V202304111930__update_org_ids_for_crypto_charities.sql', 'freewill', 5, true);

# 2023-04-14 12:25:43.280468
+\q

# 2023-04-14 12:26:41.154837
+select * from _schema_history order by installed_rank desc limit 1;

# 2023-04-14 12:26:45.278674
+select * from _schema_history order by installed_rank desc limit 2;

# 2023-04-14 12:27:03.066967
+update _schema_history set checksum = '-718928437' where installed_rank = 1161;

# 2023-04-14 12:27:05.944564
+\q

# 2023-04-14 12:27:47.451157
+update _schema_history set description = 'update org ids for crypto charities' where installed_rank = 1161;

# 2023-04-14 12:27:48.968350
+\q

# 2023-04-20 10:23:03.196690
+select count(*) from users;

# 2023-04-20 10:23:23.451931
+select count(*) from users where created_at > now() - '1 month'::interval;

# 2023-04-20 10:23:48.766257
+select count(*) from users where created_at < now() - '1 month'::interval and created_at > now() - '2 month'::interval;

# 2023-04-20 10:23:57.628870
+select count(*) from users where created_at < now() - '2 month'::interval and created_at > now() - '3 month'::interval;

# 2023-04-20 10:24:03.721425
+select count(*) from users where created_at < now() - '3 month'::interval and created_at > now() - '4 month'::interval;

# 2023-04-20 10:24:10.662782
+select count(*) from users where created_at < now() - '4 month'::interval and created_at > now() - '5 month'::interval;

# 2023-04-20 10:25:32.302370
+select count(*) from users where created_at < now() - '1 month'::interval and created_at > now() - '2 month'::interval union select count(*) from users where created_at < now() - '2 month'::interval and created_at > now() - '3 month'::interval;

# 2023-04-20 10:25:43.642461
+\e

# 2023-04-20 10:27:55.371961
+select count(*) from users where created_at < now() - '1 month'::interval and created_at > now() - '2 month'::interval
+union
+select count(*) from users where created_at < now() - '2 month'::interval and created_at > now() - '3 month'::interval
+union
+select count(*) from users where created_at < now() - '3 month'::interval and created_at > now() - '4 month'::interval
+union
+select count(*) from users where created_at < now() - '4 month'::interval and created_at > now() - '5 month'::interval
+union
+select count(*) from users where created_at < now() - '5 month'::interval and created_at > now() - '6 month'::interval
+union
+select count(*) from users where created_at < now() - '6 month'::interval and created_at > now() - '7 month'::interval
+union
+select count(*) from users where created_at < now() - '7 month'::interval and created_at > now() - '8 month'::interval
+union
+select count(*) from users where created_at < now() - '8 month'::interval and created_at > now() - '9 month'::interval
+union
+select count(*) from users where created_at < now() - '9 month'::interval and created_at > now() - '10 month'::interval
+union
+select count(*) from users where created_at < now() - '10 month'::interval and created_at > now() - '11 month'::interval
+union
+select count(*) from users where created_at < now() - '11 month'::interval and created_at > now() - '12 month'::interval
+union
+select count(*) from users where created_at < now() - '12 month'::interval and created_at > now() - '13 month'::interval
+;

# 2023-04-20 10:28:07.144604
+\e

# 2023-04-20 10:28:26.616864
+select avg(count) from (
+select count(*) from users where created_at < now() - '1 month'::interval and created_at > now() - '2 month'::interval
+union
+select count(*) from users where created_at < now() - '2 month'::interval and created_at > now() - '3 month'::interval
+union
+select count(*) from users where created_at < now() - '3 month'::interval and created_at > now() - '4 month'::interval
+union
+select count(*) from users where created_at < now() - '4 month'::interval and created_at > now() - '5 month'::interval
+union
+select count(*) from users where created_at < now() - '5 month'::interval and created_at > now() - '6 month'::interval
+union
+select count(*) from users where created_at < now() - '6 month'::interval and created_at > now() - '7 month'::interval
+union
+select count(*) from users where created_at < now() - '7 month'::interval and created_at > now() - '8 month'::interval
+union
+select count(*) from users where created_at < now() - '8 month'::interval and created_at > now() - '9 month'::interval
+union
+select count(*) from users where created_at < now() - '9 month'::interval and created_at > now() - '10 month'::interval
+union
+select count(*) from users where created_at < now() - '10 month'::interval and created_at > now() - '11 month'::interval
+union
+select count(*) from users where created_at < now() - '11 month'::interval and created_at > now() - '12 month'::interval
+union
+select count(*) from users where created_at < now() - '12 month'::interval and created_at > now() - '13 month'::interval
+) query
+;

# 2023-04-20 10:30:04.882477
+select count(*) from users;

# 2023-04-20 10:30:26.368453
+\d users

# 2023-04-20 10:30:40.724502
+select count(*) from users where deleted_at is null;

# 2023-04-24 12:18:43.527890
+\d portal_legacy_gifts

# 2023-04-24 12:19:19.767519
+\d portal_contacts

# 2023-04-24 12:19:25.822149
+\d portal_legacy_gifts

# 2023-04-24 12:20:23.131543
+select gift_status from portal_legacy_gifts limit 10;

# 2023-05-03 11:57:52.043711
+\q

# 2023-05-11 14:56:16.885518
+select * from portal_legacy_gifts limit 1;

# 2023-05-11 14:56:34.396796
+select count(*) from portal_legacy_gifts where portal_contact_id is null;

# 2023-05-11 14:56:37.519960
+select count(*) from portal_legacy_gifts where portal_contact_id is not null;

# 2023-05-11 14:56:52.826727
+\q

# 2023-05-11 14:56:58.680582
+select count(*) from portal_legacy_gifts where portal_contact_id is not null;

# 2023-05-11 14:57:02.953200
+select count(*) from portal_legacy_gifts where portal_contact_id is null;

# 2023-05-11 14:57:04.089457
+\q

# 2023-05-17 12:03:29.580014
+select * from organizations where rand_id = 'flwQhVfj';

# 2023-05-17 12:07:06.995351
+\q

# 2023-05-17 12:07:14.912857
+\d

# 2023-05-17 12:07:34.379397
+select * from featureships limit 1;

# 2023-05-17 12:13:21.976225
+\d

# 2023-05-17 12:13:28.825518
+select * from contacts limit 1;

# 2023-05-17 12:13:32.268412
+\d

# 2023-05-17 12:13:34.251144
+\q

# 2023-05-17 12:37:03.590927
+select * from estate_charity_impressions limit 20;

# 2023-05-17 12:37:05.634500
+\q

# 2023-05-17 12:37:12.019726
+select * from estate_charity_impressions limit 20;

# 2023-05-17 12:37:56.876990
+select * from estate_charity_impressions where organization_id = 'flwQhVfj';

# 2023-05-17 12:38:08.127043
+select count(*) from estate_charity_impressions where organization_id = 'flwQhVfj';

# 2023-05-17 12:38:15.990038
+select * from estate_charity_impressions where organization_id = 'flwQhVfj' limit 1;

# 2023-05-17 12:40:54.457975
+select metrics from estate_charity_impressions where organization_id = 'flwQhVfj' limit 1;

# 2023-05-17 12:43:29.044849
+select * from estate_charity_impressions where organization_id = 'flwQhVfj' limit 1;

# 2023-05-17 12:44:31.404579
+select metrics from estate_charity_impressions where metrics->'displayedCategory' is not null limit 1;

# 2023-05-17 12:44:54.067968
+select count(*) from estate_charity_impressions where organization_id = 'flwQhVfj' and metrics->'displayedCategory' is not null;

# 2023-05-17 12:45:20.267527
+select count(*) from estate_charity_impressions where organization_id = 'flwQhVfj' and metrics->'displayedCategory' is not null and metrics->'pageSource' = 'charity';;

# 2023-05-17 12:45:22.317339
+select count(*) from estate_charity_impressions where organization_id = 'flwQhVfj' and metrics->'displayedCategory' is not null and metrics->'pageSource' = 'charity';

# 2023-05-17 12:46:11.827774
+select count(*) from estate_charity_impressions where organization_id = 'flwQhVfj' and metrics->'displayedCategory' is not null and metrics->>'pageSource' = 'charity';

# 2023-05-17 12:46:33.310832
+SELECT
+    (TO_CHAR(DATE_TRUNC('month', estate_charity_impressions."created_at" ), 'YYYY-MM')) AS "estate_charity_impressions.created_month",
+    COALESCE(CAST( ( SUM(DISTINCT (CAST(FLOOR(COALESCE( case when ( (estate_charity_impressions."metrics") ->> 'pageSource'  ) = 'charity' then 1 when ( (estate_charity_impressions."metrics") ->> 'pageSource'  ) is null then (1.127/2.782) else 0 end  ,0)*(1000000*1.0)) AS DECIMAL(65,0))) + ('x' || MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar))::bit(64)::bigint::DECIMAL(65,0)  *18446744073709551616 + ('x' || SUBSTR(MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar),17))::bit(64)::bigint::DECIMAL(65,0) ) - SUM(DISTINCT ('x' || MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar))::bit(64)::bigint::DECIMAL(65,0)  *18446744073709551616 + ('x' || SUBSTR(MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar),17))::bit(64)::bigint::DECIMAL(65,0)) )  AS DOUBLE PRECISION) / CAST((1000000*1.0) AS DOUBLE PRECISION), 0) AS "estate_charity_impressions.count_distinct_pageviews"
+FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans  AS estate_plans ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations  AS organizations ON (estate_charity_impressions."organization_id") = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0 AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity' AND (estate_plans.ref_org_id is not null) AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL)) AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+GROUP BY
+    (DATE_TRUNC('month', estate_charity_impressions."created_at" ))
+ORDER BY
+    1 DESC;

# 2023-05-17 12:46:35.806154
+\e

# 2023-05-17 12:48:26.537029
+    SELECT (TO_CHAR(DATE_TRUNC('month', estate_charity_impressions."created_at" ), 'YYYY-MM')) AS "estate_charity_impressions.created_month",
+           COALESCE(CAST( ( SUM(DISTINCT (CAST(FLOOR(COALESCE( case when ( (estate_charity_impressions."metrics") ->> 'pageSource'  ) = 'charity' then 1 when ( (estate_charity_impressions."metrics") ->> 'pageSource'  ) is null then (1.127/2.782) else 0 end  ,0)*(1000000*1.0)) AS DECIMAL(65,0))) + ('x' || MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar))::bit(64)::bigint::DECIMAL(65,0)  *18446744073709551616 + ('x' || SUBSTR(MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar),17))::bit(64)::bigint::DECIMAL(65,0) ) - SUM(DISTINCT ('x' || MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar))::bit(64)::bigint::DECIMAL(65,0)  *18446744073709551616 + ('x' || SUBSTR(MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar),17))::bit(64)::bigint::DECIMAL(65,0)) )  AS DOUBLE PRECISION) / CAST((1000000*1.0) AS DOUBLE PRECISION), 0) AS "estate_charity_impressions.count_distinct_pageviews"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+       ;

# 2023-05-17 12:48:28.664104
+\e

# 2023-05-17 12:48:40.204326
+    SELECT (TO_CHAR(DATE_TRUNC('month', estate_charity_impressions."created_at" ), 'YYYY-MM')) AS "estate_charity_impressions.created_month",
+           COALESCE(CAST( ( SUM(DISTINCT (CAST(FLOOR(COALESCE( case when ( (estate_charity_impressions."metrics") ->> 'pageSource'  ) = 'charity' then 1 when ( (estate_charity_impressions."metrics") ->> 'pageSource'  ) is null then (1.127/2.782) else 0 end  ,0)*(1000000*1.0)) AS DECIMAL(65,0))) + ('x' || MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar))::bit(64)::bigint::DECIMAL(65,0)  *18446744073709551616 + ('x' || SUBSTR(MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar),17))::bit(64)::bigint::DECIMAL(65,0) ) - SUM(DISTINCT ('x' || MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar))::bit(64)::bigint::DECIMAL(65,0)  *18446744073709551616 + ('x' || SUBSTR(MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar),17))::bit(64)::bigint::DECIMAL(65,0)) )  AS DOUBLE PRECISION) / CAST((1000000*1.0) AS DOUBLE PRECISION), 0) AS "estate_charity_impressions.count_distinct_pageviews"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+       ;

# 2023-05-17 12:48:47.342424
+SELECT
+    (TO_CHAR(DATE_TRUNC('month', estate_charity_impressions."created_at" ), 'YYYY-MM')) AS "estate_charity_impressions.created_month",
+    COALESCE(CAST( ( SUM(DISTINCT (CAST(FLOOR(COALESCE( case when ( (estate_charity_impressions."metrics") ->> 'pageSource'  ) = 'charity' then 1 when ( (estate_charity_impressions."metrics") ->> 'pageSource'  ) is null then (1.127/2.782) else 0 end  ,0)*(1000000*1.0)) AS DECIMAL(65,0))) + ('x' || MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar))::bit(64)::bigint::DECIMAL(65,0)  *18446744073709551616 + ('x' || SUBSTR(MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar),17))::bit(64)::bigint::DECIMAL(65,0) ) - SUM(DISTINCT ('x' || MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar))::bit(64)::bigint::DECIMAL(65,0)  *18446744073709551616 + ('x' || SUBSTR(MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar),17))::bit(64)::bigint::DECIMAL(65,0)) )  AS DOUBLE PRECISION) / CAST((1000000*1.0) AS DOUBLE PRECISION), 0) AS "estate_charity_impressions.count_distinct_pageviews"
+FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans  AS estate_plans ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations  AS organizations ON (estate_charity_impressions."organization_id") = (organizations."rand_id") AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0 AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity' AND (estate_plans.ref_org_id is not null) AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL)) AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+GROUP BY
+    (DATE_TRUNC('month', estate_charity_impressions."created_at" ))
+ORDER BY
+    1 DESC;

# 2023-05-17 12:48:49.179454
+\e

# 2023-05-17 12:48:59.891259
+    SELECT (TO_CHAR(DATE_TRUNC('month', estate_charity_impressions."created_at" ), 'YYYY-MM')) AS "estate_charity_impressions.created_month",
+           COALESCE(CAST( ( SUM(DISTINCT (CAST(FLOOR(COALESCE( case when ( (estate_charity_impressions."metrics") ->> 'pageSource'  ) = 'charity' then 1 when ( (estate_charity_impressions."metrics") ->> 'pageSource'  ) is null then (1.127/2.782) else 0 end  ,0)*(1000000*1.0)) AS DECIMAL(65,0))) + ('x' || MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar))::bit(64)::bigint::DECIMAL(65,0)  *18446744073709551616 + ('x' || SUBSTR(MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar),17))::bit(64)::bigint::DECIMAL(65,0) ) - SUM(DISTINCT ('x' || MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar))::bit(64)::bigint::DECIMAL(65,0)  *18446744073709551616 + ('x' || SUBSTR(MD5( concat(estate_charity_impressions.created_at, (estate_charity_impressions."estate_id"))  ::varchar),17))::bit(64)::bigint::DECIMAL(65,0)) )  AS DOUBLE PRECISION) / CAST((1000000*1.0) AS DOUBLE PRECISION), 0) AS "estate_charity_impressions.count_distinct_pageviews"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+       ;

# 2023-05-17 12:49:00.711433
+\e

# 2023-05-17 12:50:22.335401
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+  GROUP BY (DATE_TRUNC('month', estate_charity_impressions."created_at" ))
+;

# 2023-05-17 12:50:24.640746
+\e

# 2023-05-17 12:50:31.154576
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+  GROUP BY estate_charity_impressions."created_at"
+;

# 2023-05-17 12:50:32.833314
+\e

# 2023-05-17 12:51:26.756401
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 12:51:28.438553
+\e

# 2023-05-17 12:51:38.944316
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       -- AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 12:51:42.294479
+\e

# 2023-05-17 12:51:49.417703
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       -- AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 12:52:11.541934
+\e

# 2023-05-17 12:53:37.329286
+select count(*) from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and ep.ref_org_id is not null;

# 2023-05-17 12:53:41.919461
+select count(*) from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and ep.ref_org_id is null;

# 2023-05-17 12:54:31.454050
+select count(*) from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and eci.metrics->>'pageSource' = charity and ep.ref_org_id is not null;

# 2023-05-17 12:54:36.564191
+select count(*) from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and eci.metrics->>'pageSource' = 'charity' and ep.ref_org_id is not null;

# 2023-05-17 12:54:53.966477
+select count(*) from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and eci.metrics->>'displayedCategory' is not null and ep.ref_org_id is not null;

# 2023-05-17 12:55:05.948858
+select count(*) from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and eci.metrics->>'displayedCategory' is not null and ep.ref_org_id is null;

# 2023-05-17 12:56:17.857116
+select count(*) from estate_plans where ref_org_id is null;

# 2023-05-17 12:56:42.098289
+select count(*) from estate_charity_impressions where metrics->'displayedCategory' is null;

# 2023-05-17 12:57:13.313228
+select count(*) from estate_charity_impressions where metrics->'displayedCategory' is null and organization_id = 'flwQhVfj';

# 2023-05-17 12:58:46.992569
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       -- AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 12:59:01.283801
+\e

# 2023-05-17 12:59:07.190934
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       -- AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 12:59:50.528223
+\e

# 2023-05-17 13:01:49.794765
+select count(*) from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and eci.metrics->>'displayedCategory' is not null and ep.ref_org_id is not null;

# 2023-05-17 13:01:55.516402
+select count(*) from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and eci.metrics->>'displayedCategory' is null and ep.ref_org_id is not null;

# 2023-05-17 13:02:13.512692
+select count(*) from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and ep.ref_org_id is not null;

# 2023-05-17 13:02:17.655537
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       -- AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 13:02:19.096590
+\e

# 2023-05-17 13:02:28.166029
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       -- AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 13:02:32.572670
+\e

# 2023-05-17 13:02:42.455793
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE -- LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       /* AND */ ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 13:02:45.236472
+\e

# 2023-05-17 13:03:56.930014
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 13:04:11.954909
+\e

# 2023-05-17 13:04:18.063672
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 13:04:53.897922
+\e

# 2023-05-17 13:05:13.456360
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE -- LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       -- AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       /* AND */ (estate_plans.ref_org_id is not null)
+       -- AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       -- AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 13:05:18.790839
+\e

# 2023-05-17 13:05:41.553604
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE -- LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       /* AND */ ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       -- AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 13:05:44.198776
+\e

# 2023-05-17 13:05:53.557548
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 13:07:11.135782
+select ep.ref_org_id from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and ep.ref_org_id is not null;

# 2023-05-17 13:08:36.059546
+select ep.* from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and ep.ref_org_id is not null;

# 2023-05-17 13:08:40.811611
+select ep.* from estate_plans ep join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and ep.ref_org_id is not null limit 10;

# 2023-05-17 13:09:22.724369
+select p.* from estate_plans ep join profiles p on ep.profile_id = p.rand_id join estate_charity_impressions eci on ep.rand_id = eci.estate_id where eci.organization_id = 'flwQhVfj' and ep.ref_org_id is not null limit 10;

# 2023-05-17 13:27:23.076882
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 13:27:26.951176
+\e

# 2023-05-17 13:27:33.400445
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       -- AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-17 13:28:01.191367
+\e

# 2023-05-17 13:28:04.391127
+    SELECT estate_charity_impressions."created_at",
+           estate_charity_impressions."metrics"
+      FROM public.estate_charity_impressions  AS estate_charity_impressions
+INNER JOIN public.estate_plans AS estate_plans
+        ON (estate_charity_impressions."estate_id") = estate_plans.rand_id
+INNER JOIN public.organizations AS organizations
+        ON (estate_charity_impressions."organization_id") = (organizations."rand_id")
+       AND (organizations."rand_id") = ANY(string_to_array('flwQhVfj',','))
+     WHERE LENGTH((estate_charity_impressions."metrics") ->> 'displayedCategory' ) <> 0
+       AND ((estate_charity_impressions."metrics") ->> 'pageSource' ) = 'charity'
+       AND (estate_plans.ref_org_id is not null)
+       AND ((( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) <> 'Yes' OR ( LOWER((estate_plans."meta_info") -> 'query' ->> 'utm_source') = 'adwords' ) IS NULL))
+       AND ((estate_charity_impressions."metrics") ->> 'displayedCategory' ) IS NOT NULL
+;

# 2023-05-18 11:35:19.245778
+select * from organizations where legal_name ilike '%acme%';

# 2023-05-18 11:59:04.493771
+select * from organizations where legal_name ilike '%planned%parent%';

# 2023-05-18 12:01:54.236638
+select * from organizations where legal_name ilike '%red%cross%';

# 2023-05-18 13:15:49.062867
+select * from organizations where legal_name ilike '%acme%';

# 2023-05-18 13:23:12.515883
+select * from organizations where legal_name ilike '%red%cross%';

# 2023-05-18 13:24:59.068840
+select * from organizations where legal_name ilike '%acme%';

# 2023-05-18 13:28:03.044667
+select * from organizations where legal_name ilike '%red%cross%';

# 2023-05-18 13:29:14.252781
+select * from organizations where legal_name ilike '%acme%';

# 2023-05-18 13:52:33.336244
+select * from organizations where legal_name ilike '%red%cross%';

# 2023-05-18 13:53:00.829606
+select * from organizations where legal_name ilike '%acme%';

# 2023-05-22 12:51:18.790501
+select * from organizations limit 1;

# 2023-05-22 12:54:48.427466
+select * from programs limit 1;

# 2023-05-22 12:56:36.358442
+select * from organizations where legal_name ilike '%acme%';

# 2023-05-22 12:56:48.631200
+select * from programs where organization_id = 'flwQhVfj';

# 2023-05-22 13:05:43.385404
+select * from organizations where legal_name ilike '%acme%';

# 2023-05-30 12:15:25.629589
+select * from portal_users where email = 'riley@freewill.com';

# 2023-05-30 12:15:30.537494
+\q

# 2023-05-30 12:15:43.342874
+select * from portal_users where email = 'riley@freewill.com';

# 2023-05-30 12:16:08.089129
+update portal_users set org_ids = '["0OJ5hb8T", "flwQhVfj"]' where email = 'riley@freewill.com';

# 2023-05-30 12:16:15.665849
+\q

# 2023-06-05 12:36:56.756295
+select rand_id from organizations limit 100;

# 2023-06-05 12:37:05.086952
+select * from portal_users where email = 'riley@freewill.com';

# 2023-06-05 12:38:05.392503
+update portal_users set org_ids = org_ids || (select array_agg(rand_id) from organizations limit 100) where email = 'riley@freewill.com';

# 2023-06-05 12:38:18.967573
+update portal_users set org_ids = org_ids || (select array_agg(rand_id)::jsonb from organizations limit 100) where email = 'riley@freewill.com';

# 2023-06-05 12:38:31.680085
+update portal_users set org_ids = org_ids || (select array_agg(rand_id)::TEXT[] from organizations limit 100) where email = 'riley@freewill.com';

# 2023-06-05 12:39:23.945910
+update portal_users set org_ids = (org_ids::text[] || (select array_agg(rand_id)::TEXT[] from organizations limit 100))::jsonb where email = 'riley@freewill.com';

# 2023-06-05 12:40:46.049282
+update portal_users set org_ids = (array_agg(json_array_elements_text(org_ids)) || (select array_agg(rand_id)::TEXT[] from organizations limit 100))::jsonb where email = 'riley@freewill.com';

# 2023-06-05 12:40:57.118638
+update portal_users set org_ids = (array_agg(jsonb_array_elements_text(org_ids)) || (select array_agg(rand_id)::TEXT[] from organizations limit 100))::jsonb where email = 'riley@freewill.com';

# 2023-06-05 12:41:17.788580
+select (array_agg(jsonb_array_elements_text(org_ids)) || (select array_agg(rand_id)::TEXT[] from organizations limit 100))::jsonb from portal_users where email = 'riley@freewill.com';

# 2023-06-05 12:41:54.882813
+select array_agg(rand_id) from organizations limit 100;

# 2023-06-05 12:42:16.319240
+select rand_id from organizations limit 100;

# 2023-06-05 12:44:24.307278
+select org_ids from portal_users where email = 'riley@freewill.com';

# 2023-06-05 12:44:55.704086
+update portal_users set org_ids = '["01h3ZXu7", "02phfB5Q", "06CuGRoH", "09Eq9hpm", "0FUY2Dmp", "0IFRF6Te", "0J6mW2FL", "0JViPpqY", "0NTCOvIh", "0OJ5hb8T", "0S6P, yVEf" "0VLbMEQi", "0WzF9Uwv", "0ahm2tiz", "0d0aUktH", "0fqYgq7E", "0ihUDwjF", "0jGGShHT", "0omtFS9y", "0tfQKb5b", "0vySJMeB", "0xkEDr2w", "11Qz2TLS", "12RShX7t", "12UjRNBw", "12vqYfpL", "13sc8bw3", "14ETWKyb", "16Bm9efA", "173VzPL7", "1AGEwRdY", "1DNTd, pLQ" "1F43SY5h", "1GChzf13", "1GKJQpaH", "1GnbpsS6", "1If9cLra", "1JvFG0wX", "1OisXekI", "1RDefyFz", "1Ukxaiuq", "1YOzNcoI", "1YPYBVb4", "1nkEEag9", "1sQHeG0G", "1tPVxolR", "1wKrAH0V", "1y9Azwsi", "21NyYMUV", "22lFV8tX", "27YLeInG", "29U7vFVy", "29wGMm, mb" "2AQ9t4aF", "2Cg7dLbe", "2EI6ADJS", "2HQUOR35", "2J9UyN8J", "2JL5iyYT", "2Kw9jgbx", "2SrMDnU5", "2StzL0OL", "2TjkhyF1", ", 2WaqYt5X" "2WmTswl1", "2YvxQDZB", "2ZRAQf4s", "2ZyGYNLM", "2f8c1xR3", "2hRaaVD5", "2htMYD1E", "2kmhbaTt", "2kuCJbhR", "2qf1vT, k9" "2tlzFRF3", "2vNfjapq", "2yIT3K2d", "33xifxAY", "34RxGJAd", "3JFS8GAd", "3JiYoca4", "3KBBPPl5", "3PE7XWI8", "3YlcW5i7", ", 3qtiwjxr" "3rhBCFfY", "42nQnn0Z", "480fFsKk", "49NuiztI", "4CD2G3Ho", "4FP7T2M9", "4GPlXU8U", "4ItPsD30", "4Nb9e1wl", "4OO1eX, zg" "4R06SKpF", "4V0w7iM0", "4WFWSKgr", "4XnMfBBU", "4fH8ci9B", "0OJ5hb8T", "flwQhVfj"]'
+ where email = 'riley@freewill.com';

# 2023-06-05 12:45:16.810113
+\e

# 2023-06-05 12:46:32.152547
+update portal_users set org_ids = '["01h3ZXu7", "02phfB5Q", "06CuGRoH", "09Eq9hpm", "0FUY2Dmp", "0IFRF6Te", "0J6mW2FL", "0JViPpqY", "0NTCOvIh", "0OJ5hb8T", "0S6PyVEf", "0VLbMEQi", "0WzF9Uwv", "0ahm2tiz", "0d0aUktH", "0fqYgq7E", "0ihUDwjF", "0jGGShHT", "0omtFS9y", "0tfQKb5b", "0vySJMeB", "0xkEDr2w", "11Qz2TLS", "12RShX7t", "12UjRNBw", "12vqYfpL", "13sc8bw3", "14ETWKyb", "16Bm9efA", "173VzPL7", "1AGEwRdY", "1DNTdpLQ", "1F43SY5h", "1GChzf13", "1GKJQpaH", "1GnbpsS6", "1If9cLra", "1JvFG0wX", "1OisXekI", "1RDefyFz", "1Ukxaiuq", "1YOzNcoI", "1YPYBVb4", "1nkEEag9", "1sQHeG0G", "1tPVxolR", "1wKrAH0V", "1y9Azwsi", "21NyYMUV", "22lFV8tX", "27YLeInG", "29U7vFVy", "29wGMmmb", "2AQ9t4aF", "2Cg7dLbe", "2EI6ADJS", "2HQUOR35", "2J9UyN8J", "2JL5iyYT", "2Kw9jgbx", "2SrMDnU5", "2StzL0OL", "2TjkhyF1", "2WaqYt5X", "2WmTswl1", "2YvxQDZB", "2ZRAQf4s", "2ZyGYNLM", "2f8c1xR3", "2hRaaVD5", "2htMYD1E", "2kmhbaTt", "2kuCJbhR", "2qf1vTk9", "2tlzFRF3", "2vNfjapq", "2yIT3K2d", "33xifxAY", "34RxGJAd", "3JFS8GAd", "3JiYoca4", "3KBBPPl5", "3PE7XWI8", "3YlcW5i7", "3qtiwjxr", "3rhBCFfY", "42nQnn0Z", "480fFsKk", "49NuiztI", "4CD2G3Ho", "4FP7T2M9", "4GPlXU8U", "4ItPsD30", "4Nb9e1wl", "4OO1eXzg", "4R06SKpF", "4V0w7iM0", "4WFWSKgr", "4XnMfBBU", "4fH8ci9B", "0OJ5hb8T", "flwQhVfj"]'
+ where email = 'riley@freewill.com';

# 2023-06-05 12:49:15.055932
+select * from organizations where legal_name ilike '%augustana%';

# 2023-06-05 12:49:27.324694
+select rand_id from organizations where legal_name ilike '%augustana%';

# 2023-06-05 12:49:37.103556
+select * from programs where organization_id in (select rand_id from organizations where legal_name ilike '%augustana%');

# 2023-06-05 12:49:58.529124
+select legal_name, display_name from programs where organization_id in (select rand_id from organizations where legal_name ilike '%augustana%');

# 2023-06-05 12:55:47.634806
+select * from organizations where legal_name ilike '%unicef%';

# 2023-06-05 12:56:30.357891
+update portal_users set org_ids = '["01h3ZXu7", "02phfB5Q", "06CuGRoH", "09Eq9hpm", "0FUY2Dmp", "0IFRF6Te", "0J6mW2FL", "0JViPpqY", "0NTCOvIh", "0OJ5hb8T", "0S6PyVEf", "0VLbMEQi", "0WzF9Uwv", "0ahm2tiz", "0d0aUktH", "0fqYgq7E", "0ihUDwjF", "0jGGShHT", "0omtFS9y", "0tfQKb5b", "0vySJMeB", "0xkEDr2w", "11Qz2TLS", "12RShX7t", "12UjRNBw", "12vqYfpL", "13sc8bw3", "14ETWKyb", "16Bm9efA", "173VzPL7", "1AGEwRdY", "1DNTdpLQ", "1F43SY5h", "1GChzf13", "1GKJQpaH", "1GnbpsS6", "1If9cLra", "1JvFG0wX", "1OisXekI", "1RDefyFz", "1Ukxaiuq", "1YOzNcoI", "1YPYBVb4", "1nkEEag9", "1sQHeG0G", "1tPVxolR", "1wKrAH0V", "1y9Azwsi", "21NyYMUV", "22lFV8tX", "27YLeInG", "29U7vFVy", "29wGMmmb", "2AQ9t4aF", "2Cg7dLbe", "2EI6ADJS", "2HQUOR35", "2J9UyN8J", "2JL5iyYT", "2Kw9jgbx", "2SrMDnU5", "2StzL0OL", "2TjkhyF1", "2WaqYt5X", "2WmTswl1", "2YvxQDZB", "2ZRAQf4s", "2ZyGYNLM", "2f8c1xR3", "2hRaaVD5", "2htMYD1E", "2kmhbaTt", "2kuCJbhR", "2qf1vTk9", "2tlzFRF3", "2vNfjapq", "2yIT3K2d", "33xifxAY", "34RxGJAd", "3JFS8GAd", "3JiYoca4", "3KBBPPl5", "3PE7XWI8", "3YlcW5i7", "3qtiwjxr", "3rhBCFfY", "42nQnn0Z", "480fFsKk", "49NuiztI", "4CD2G3Ho", "4FP7T2M9", "4GPlXU8U", "4ItPsD30", "4Nb9e1wl", "4OO1eXzg", "4R06SKpF", "4V0w7iM0", "4WFWSKgr", "4XnMfBBU", "4fH8ci9B", "0OJ5hb8T", "flwQhVfj", "APVcIjbX"]'
+ where email = 'riley@freewill.com';

# 2023-06-22 13:06:13.980489
+select * from portal_legacy_gifts limit 10;

# 2023-06-22 13:07:05.669328
+select rand_id from organizations where legal_name ilike '%acog%';

# 2023-06-22 13:07:18.060931
+select * from portal_legacy_gifts where org_rand_id = '12RShX7t';

# 2023-06-22 13:09:02.507795
+update portal_legacy_gifts set archived_reasons = [] where rand_id = 'sWgT8Fcb';

# 2023-06-22 13:09:30.172115
+select archived_reasons from portal_legacy_gifts where archived_reasons != [];

# 2023-06-22 13:09:37.100501
+select archived_reasons from portal_legacy_gifts where archived_reasons != '[]';

# 2023-06-22 13:10:15.005586
+select archived_reasons from portal_legacy_gifts where archived_reasons != '["deleted"]';

# 2023-06-22 13:10:24.461275
+select archived_reasons from portal_legacy_gifts where archived_reasons != '["deleted"]'::TEXT[];

# 2023-06-22 13:10:32.558478
+select archived_reasons from portal_legacy_gifts where archived_reasons != '{"deleted"}'::TEXT[];

# 2023-06-22 13:10:58.635022
+update portal_legacy_gifts set archived_reasons = ["deleted"] where rand_id = 'sWgT8Fcb';

# 2023-06-22 13:11:05.698793
+update portal_legacy_gifts set archived_reasons = '["deleted"]'::text[] where rand_id = 'sWgT8Fcb';

# 2023-06-22 13:11:13.758986
+update portal_legacy_gifts set archived_reasons = '["deleted"]'::text[] where gift_id = 'sWgT8Fcb';

# 2023-06-22 13:11:46.161026
+update portal_legacy_gifts set archived_reasons = '{"deleted"}' where gift_id = 'sWgT8Fcb';

# 2023-06-22 13:12:06.472538
+update portal_legacy_gifts set archived_reasons = ARRAY['deleted'] where gift_id = 'sWgT8Fcb';

# 2023-06-22 13:12:12.416486
+update portal_legacy_gifts set archived_reasons = ARRAY['deleted']::jsonb where gift_id = 'sWgT8Fcb';

# 2023-06-22 13:13:01.494511
+update portal_legacy_gifts set archived_reasons = '["deleted"]'::jsonb where gift_id = 'sWgT8Fcb';

# 2023-06-22 13:14:35.473747
+select * from portal_legacy_gifts where gift_id = 'sWgT8Fcb';

# 2023-06-22 13:15:08.691420
+update portal_legacy_gifts set updated_at = now() where gift_id = 'sWgT8Fcb';

# 2023-06-22 16:01:04.726118
+select * from portal_users where email ilike '%playwright%';

# 2023-06-22 16:01:07.884009
+select * from portal_users where email ilike '%test%';

# 2023-06-22 16:01:16.259704
+select * from portal_users where email ilike '%testuser%';

# 2023-06-22 16:01:18.735261
+select * from portal_users where email ilike '%user%';

# 2023-06-22 16:01:29.183199
+select * from portal_users where email ilike '%test%@freewill.com';

# 2023-06-22 16:02:07.438605
+select * from portal_users where email ilike '%e2e%@freewill.com';

# 2023-06-22 16:03:08.389460
+select * from organizations where rand_id = 'BroFysNs';

# 2023-06-22 16:03:30.061027
+select * from portal_legacy_gifts where org_rand_id = 'BroFysNs';

# 2023-06-22 16:03:40.299108
+select count(*) from portal_legacy_gifts where org_rand_id = 'BroFysNs';

# 2023-06-22 16:03:46.883945
+select archived_reasons from portal_legacy_gifts where org_rand_id = 'BroFysNs';

# 2023-06-22 16:03:56.179416
+\q

# 2023-06-22 16:04:03.919666
+select archived_reasons from portal_legacy_gifts where org_rand_id = 'BroFysNs';

# 2023-06-22 16:04:13.773668
+select * from organizations where rand_id = 'BroFysNs';

# 2023-06-22 16:04:28.330430
+select * from portal_users where email ilike '%e2e%cypress%@freewill.com';

# 2023-06-22 16:04:40.260008
+select * from portal_users where email ilike 'e2e+cypress+partner+portal@freewill.com';

# 2023-06-22 16:04:49.851431
+select * from portal_users where email ilike 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:04:54.444492
+select * from organizations where rand_id = 'BroFysNs';

# 2023-06-22 16:05:04.059850
+select * from portal_legacy_gifts where org_rand_id = 'BroFysNs';

# 2023-06-22 16:17:31.566596
+\d portal_legacy_gifts

# 2023-06-22 16:18:29.388898
+select * from portal_users where email ilike 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:20:42.841992
+\d portal_legacy_gifts

# 2023-06-22 16:24:25.705194
+\q

# 2023-06-22 16:24:44.588331
+create database freewill_dev_backup_06_22_23 with template freewill_dev;

# 2023-06-22 16:27:53.345874
+insert into portal_legacy_gifts (gift_id, gift_type, gift_status, status_date, asset_type, currency, amount_type, org_rand_id) values ('blah', 'blahblah', now(), 'blahblahblah', 'blahblahblahblah', 'blahblahblahblahblah', 'blahblahblahblahblahblah');

# 2023-06-22 16:28:03.385397
+insert into portal_legacy_gifts (gift_id, gift_type, gift_status, status_date, asset_type, currency, amount_type, org_rand_id) values ('blah', 'blahblah', now(), 'blahblahblah', 'blahblahblahblah', 'blahblahblahblahblah', 'blahblahblahblahblahblah', 'blahblahblahblahblahblahblah');

# 2023-06-22 16:28:32.937034
+insert into portal_legacy_gifts (gift_id, gift_type, gift_status, status_date, asset_type, currency, amount_type, org_rand_id) values ('blah', 'blah', 'blah',  now(), 'blah', 'blah', 'blah', 'blah', 'blah');

# 2023-06-22 16:28:39.607229
+insert into portal_legacy_gifts (gift_id, gift_type, gift_status, status_date, asset_type, currency, amount_type, org_rand_id) values ('blah', 'blah', 'blah',  now(), 'blah', 'blah', 'blah', 'blah');

# 2023-06-22 16:28:48.535584
+select * from portal_legacy_gifts where org_rand_id = 'BroFysNs';

# 2023-06-22 16:28:52.035296
+select * from portal_legacy_gifts where org_rand_id = 'blah';

# 2023-06-22 16:29:46.866781
+\d organizations

# 2023-06-22 16:30:36.928523
+\d portal_legacy_gifts

# 2023-06-22 16:34:41.248517
+select org_ids[0] from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:34:50.744158
+select org_ids[0]::character(8) from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:35:01.600331
+select org_ids[0]::text from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:35:36.088729
+select org_ids[0]::text = 'BroFysNs' from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:35:39.905128
+select org_ids[0] = 'BroFysNs' from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:35:43.561940
+select org_ids[0]::text = 'BroFysNs' from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:36:01.858482
+select org_ids[0]::varchar = 'BroFysNs' from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:36:26.354187
+select org_ids->0 = 'BroFysNs' from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:36:30.554119
+select org_ids->0::text = 'BroFysNs' from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:36:36.210810
+select org_ids->0 from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:36:53.777477
+select org_ids->0->text from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:36:58.897334
+select org_ids->>0 from portal_users where email = 'e2e+cypress-partner-portal@freewill.com';

# 2023-06-22 16:39:32.710183
+select count(*) from portal_legacy_gifts where org_rand_id = 'BroFysNs' and archived_reasons = '["deleted"]'::jsonb and updated_at < 'January, 1, 2000'::timestamp;

# 2023-06-22 16:42:07.380320
+delete from portal_legacy_gifts where org_rand_id = 'BroFysNs';

# 2023-06-22 16:43:07.188051
+select * from portal_legacy_gifts where gift_id = 'blah' and gift_type = 'blah';

# 2023-06-22 16:43:26.252040
+delete from portal_legacy_gifts where gift_id = 'blah';

# 2023-06-22 16:43:32.602423
+delete from portal_legacy_gifts where org_rand_id = 'BroFysNs';

# 2023-06-22 16:43:40.582068
+select count(*) from portal_legacy_gifts where org_rand_id = 'BroFysNs' and archived_reasons = '["deleted"]'::jsonb and updated_at < 'January, 1, 2000'::timestamp;

# 2023-06-22 16:43:48.628791
+select * from portal_legacy_gifts where org_rand_id = 'BroFysNs' and archived_reasons = '["deleted"]'::jsonb and updated_at < 'January, 1, 2000'::timestamp;

# 2023-06-30 11:02:02.268039
+\q

# 2023-06-30 11:11:47.494199
+select * from portal_legacy_gifts where org_rand_id = 'BroFysNs' and archived_reasons = '["deleted"]'::jsonb and updated_at < 'January, 1, 2000'::timestamp;

# 2023-06-30 11:11:53.564706
+select * from portal_users;

# 2023-06-30 11:11:56.954171
+\l

# 2023-06-30 11:11:58.809419
+\d

# 2023-06-30 11:12:08.539776
+select * from portal_contacts;

# 2023-06-30 11:12:18.184454
+select * from vw_portal_requests;

# 2023-06-30 11:28:10.978376
+select * from portal_users limit 1;

# 2023-06-30 11:28:16.587825
+\q

# 2023-06-30 11:28:23.169001
+select * from portal_users limit 1;

# 2023-06-30 11:28:34.708588
+select * from portal_users where email = 'riley@freewill.com';

# 2023-06-30 11:35:49.171555
+\q

# 2023-06-30 11:36:00.748456
+\l

# 2023-06-30 11:36:18.891820
+\c freewill_dev_backup_03_27_23; DROP DATABASE freewill_dev; CREATE DATABASE freewill_dev WITH TEMPLATE freewill_dev_backup_03_27_23; \c freewill_dev;

# 2023-06-30 11:36:51.863441
+select * from portal_users where email = 'riley@freewill.com';

# 2023-06-30 11:37:36.811751
+select * from users where email = 'riley@freewill.com';

# 2023-07-05 10:37:59.873519
+\q

# 2023-07-05 10:38:06.098171
+\d

# 2023-07-05 10:38:12.975988
+select * from portal_users where email = 'riley@freewill.com';

# 2023-07-05 10:38:33.118097
+\q

# 2023-07-05 10:41:23.798141
+\d portal_contacts

# 2023-07-05 10:43:55.234805
+\q

# 2023-07-05 10:49:56.721015
+\c freewill_dev_backup_03_27_23; DROP DATABASE freewill_dev; CREATE DATABASE freewill_dev WITH TEMPLATE freewill_dev_backup_03_27_23; \c freewill_dev;

# 2023-07-05 10:50:56.480700
+\q

# 2023-07-05 10:51:57.349713
+select * from _schema_history limit 10;

# 2023-07-05 10:53:38.114093
+\q

# 2023-07-06 11:21:27.256904
+select * from _schema_history limit 10;

# 2023-07-06 11:21:44.879930
+select * from _schema_history where checksum = '202303151651';

# 2023-07-06 11:21:49.399545
+select * from _schema_history where checksum = 202303151651;

# 2023-07-06 11:22:16.367130
+select * from _schema_history where scipt ilike '%202303151651%';

# 2023-07-06 11:22:19.733997
+select * from _schema_history where script ilike '%202303151651%';

# 2023-07-06 11:22:43.031305
+delete from _schema_history where version = 202303151651;

# 2023-07-06 11:22:46.299893
+delete from _schema_history where version = '202303151651';

# 2023-07-06 11:22:48.853113
+\q

# 2023-07-06 11:30:29.256718
+\c freewill_dev_backup_03_27_23; DROP DATABASE freewill_dev; CREATE DATABASE freewill_dev WITH TEMPLATE freewill_dev_backup_03_27_23; \c freewill_dev;

# 2023-07-06 11:30:44.508371
+delete from _schema_history where version = '202303151651';

# 2023-07-06 11:30:46.511045
+\q

# 2023-07-06 11:36:52.092550
+alter table portal_contacts add column if not exists full_name jsonb default null;

# 2023-07-06 11:36:54.169101
+\q

# 2023-07-06 11:57:13.530054
+update portal_users set org_ids = '["01h3ZXu7", "02phfB5Q", "06CuGRoH", "09Eq9hpm", "0FUY2Dmp", "0IFRF6Te", "0J6mW2FL", "0JViPpqY", "0NTCOvIh", "0OJ5hb8T", "0S6PyVEf", "0VLbMEQi", "0WzF9Uwv", "0ahm2tiz", "0d0aUktH", "0fqYgq7E", "0ihUDwjF", "0jGGShHT", "0omtFS9y", "0tfQKb5b", "0vySJMeB", "0xkEDr2w", "11Qz2TLS", "12RShX7t", "12UjRNBw", "12vqYfpL", "13sc8bw3", "14ETWKyb", "16Bm9efA", "173VzPL7", "1AGEwRdY", "1DNTdpLQ", "1F43SY5h", "1GChzf13", "1GKJQpaH", "1GnbpsS6", "1If9cLra", "1JvFG0wX", "1OisXekI", "1RDefyFz", "1Ukxaiuq", "1YOzNcoI", "1YPYBVb4", "1nkEEag9", "1sQHeG0G", "1tPVxolR", "1wKrAH0V", "1y9Azwsi", "21NyYMUV", "22lFV8tX", "27YLeInG", "29U7vFVy", "29wGMmmb", "2AQ9t4aF", "2Cg7dLbe", "2EI6ADJS", "2HQUOR35", "2J9UyN8J", "2JL5iyYT", "2Kw9jgbx", "2SrMDnU5", "2StzL0OL", "2TjkhyF1", "2WaqYt5X", "2WmTswl1", "2YvxQDZB", "2ZRAQf4s", "2ZyGYNLM", "2f8c1xR3", "2hRaaVD5", "2htMYD1E", "2kmhbaTt", "2kuCJbhR", "2qf1vTk9", "2tlzFRF3", "2vNfjapq", "2yIT3K2d", "33xifxAY", "34RxGJAd", "3JFS8GAd", "3JiYoca4", "3KBBPPl5", "3PE7XWI8", "3YlcW5i7", "3qtiwjxr", "3rhBCFfY", "42nQnn0Z", "480fFsKk", "49NuiztI", "4CD2G3Ho", "4FP7T2M9", "4GPlXU8U", "4ItPsD30", "4Nb9e1wl", "4OO1eXzg", "4R06SKpF", "4V0w7iM0", "4WFWSKgr", "4XnMfBBU", "4fH8ci9B", "0OJ5hb8T", "flwQhVfj", "APVcIjbX"]'
+ where email = 'riley@freewill.com';

# 2023-07-06 14:16:39.326051
+\q

# 2023-07-18 11:53:15.497350
+select products from organizations where rand_id in (select org_ids from portal_users where email = 'riley@freewill.com');

# 2023-07-18 11:53:35.212606
+select products from organizations where rand_id in (select unnest(org_ids) from portal_users where email = 'riley@freewill.com');

# 2023-07-18 11:53:43.545400
+select products from organizations where rand_id in (select unnest(org_ids::text[]) from portal_users where email = 'riley@freewill.com');

# 2023-07-18 11:54:14.666813
+select products from organizations where rand_id in (select unnest(jsonb_array_elements_text(org_ids)) from portal_users where email = 'riley@freewill.com');

# 2023-07-18 11:54:48.930136
+select products from organizations where rand_id in (select jsonb_array_elements_text(org_ids) from portal_users where email = 'riley@freewill.com');

# 2023-07-18 11:55:16.986295
+select products from organizations where rand_id in (select jsonb_array_elements_text(org_ids) from portal_users where email = 'riley@freewill.com') and products->'has_will' = 'never';

# 2023-07-18 11:55:23.693351
+select products from organizations where rand_id in (select jsonb_array_elements_text(org_ids) from portal_users where email = 'riley@freewill.com') and products-->'has_will' = 'never';

# 2023-07-18 11:55:29.713195
+select products from organizations where rand_id in (select jsonb_array_elements_text(org_ids) from portal_users where email = 'riley@freewill.com') and products->>'has_will' = 'never';

# 2023-07-18 11:56:02.226329
+select products from organizations where rand_id in (select jsonb_array_elements_text(org_ids) from portal_users where email = 'riley@freewill.com') and products->>'has_will' = 'never' and products->>'has_beneficiaries' = 'never' and products->>'has_outside_bequest' = 'never';

# 2023-07-18 11:56:08.109386
+select * from organizations where rand_id in (select jsonb_array_elements_text(org_ids) from portal_users where email = 'riley@freewill.com') and products->>'has_will' = 'never' and products->>'has_beneficiaries' = 'never' and products->>'has_outside_bequest' = 'never';

# 2023-07-19 10:59:56.657575
+\q

# 2023-07-19 11:01:03.723203
+select * from portal_users where email = 'riley@freewill.com';

# 2023-07-19 11:01:14.891724
+update portal_users set org_ids = '["01h3ZXu7", "02phfB5Q", "06CuGRoH", "09Eq9hpm", "0FUY2Dmp", "0IFRF6Te", "0J6mW2FL", "0JViPpqY", "0NTCOvIh", "0OJ5hb8T", "0S6PyVEf", "0VLbMEQi", "0WzF9Uwv", "0ahm2tiz", "0d0aUktH", "0fqYgq7E", "0ihUDwjF", "0jGGShHT", "0omtFS9y", "0tfQKb5b", "0vySJMeB", "0xkEDr2w", "11Qz2TLS", "12RShX7t", "12UjRNBw", "12vqYfpL", "13sc8bw3", "14ETWKyb", "16Bm9efA", "173VzPL7", "1AGEwRdY", "1DNTdpLQ", "1F43SY5h", "1GChzf13", "1GKJQpaH", "1GnbpsS6", "1If9cLra", "1JvFG0wX", "1OisXekI", "1RDefyFz", "1Ukxaiuq", "1YOzNcoI", "1YPYBVb4", "1nkEEag9", "1sQHeG0G", "1tPVxolR", "1wKrAH0V", "1y9Azwsi", "21NyYMUV", "22lFV8tX", "27YLeInG", "29U7vFVy", "29wGMmmb", "2AQ9t4aF", "2Cg7dLbe", "2EI6ADJS", "2HQUOR35", "2J9UyN8J", "2JL5iyYT", "2Kw9jgbx", "2SrMDnU5", "2StzL0OL", "2TjkhyF1", "2WaqYt5X", "2WmTswl1", "2YvxQDZB", "2ZRAQf4s", "2ZyGYNLM", "2f8c1xR3", "2hRaaVD5", "2htMYD1E", "2kmhbaTt", "2kuCJbhR", "2qf1vTk9", "2tlzFRF3", "2vNfjapq", "2yIT3K2d", "33xifxAY", "34RxGJAd", "3JFS8GAd", "3JiYoca4", "3KBBPPl5", "3PE7XWI8", "3YlcW5i7", "3qtiwjxr", "3rhBCFfY", "42nQnn0Z", "480fFsKk", "49NuiztI", "4CD2G3Ho", "4FP7T2M9", "4GPlXU8U", "4ItPsD30", "4Nb9e1wl", "4OO1eXzg", "4R06SKpF", "4V0w7iM0", "4WFWSKgr", "4XnMfBBU", "4fH8ci9B", "0OJ5hb8T", "flwQhVfj", "APVcIjbX"]'
+ where email = 'riley@freewill.com';

# 2023-07-19 11:01:20.865249
+\q

# 2023-07-19 11:01:47.047460
+select * from portal_users where email = 'riley@freewill.com';

# 2023-07-19 11:03:09.203677
+begin; update portal_users set org_ids = '["01h3ZXu7", "02phfB5Q", "06CuGRoH", "09Eq9hpm", "0FUY2Dmp", "0IFRF6Te", "0J6mW2FL", "0JViPpqY", "0NTCOvIh", "0OJ5hb8T", "0S6PyVEf", "0VLbMEQi", "0WzF9Uwv", "0ahm2tiz", "0d0aUktH", "0fqYgq7E", "0ihUDwjF", "0jGGShHT", "0omtFS9y", "0tfQKb5b", "0vySJMeB", "0xkEDr2w", "11Qz2TLS", "12RShX7t", "12UjRNBw", "12vqYfpL", "13sc8bw3", "14ETWKyb", "16Bm9efA", "173VzPL7", "1AGEwRdY", "1DNTdpLQ", "1F43SY5h", "1GChzf13", "1GKJQpaH", "1GnbpsS6", "1If9cLra", "1JvFG0wX", "1OisXekI", "1RDefyFz", "1Ukxaiuq", "1YOzNcoI", "1YPYBVb4", "1nkEEag9", "1sQHeG0G", "1tPVxolR", "1wKrAH0V", "1y9Azwsi", "21NyYMUV", "22lFV8tX", "27YLeInG", "29U7vFVy", "29wGMmmb", "2AQ9t4aF", "2Cg7dLbe", "2EI6ADJS", "2HQUOR35", "2J9UyN8J", "2JL5iyYT", "2Kw9jgbx", "2SrMDnU5", "2StzL0OL", "2TjkhyF1", "2WaqYt5X", "2WmTswl1", "2YvxQDZB", "2ZRAQf4s", "2ZyGYNLM", "2f8c1xR3", "2hRaaVD5", "2htMYD1E", "2kmhbaTt", "2kuCJbhR", "2qf1vTk9", "2tlzFRF3", "2vNfjapq", "2yIT3K2d", "33xifxAY", "34RxGJAd", "3JFS8GAd", "3JiYoca4", "3KBBPPl5", "3PE7XWI8", "3YlcW5i7", "3qtiwjxr", "3rhBCFfY", "42nQnn0Z", "480fFsKk", "49NuiztI", "4CD2G3Ho", "4FP7T2M9", "4GPlXU8U", "4ItPsD30", "4Nb9e1wl", "4OO1eXzg", "4R06SKpF", "4V0w7iM0", "4WFWSKgr", "4XnMfBBU", "4fH8ci9B", "0OJ5hb8T", "flwQhVfj", "APVcIjbX"]'
+ where email = 'riley@freewill.com';

# 2023-07-19 11:03:18.601835
+begin;

# 2023-07-19 11:03:30.548503
+update portal_users set org_ids = '["01h3ZXu7", "02phfB5Q", "06CuGRoH", "09Eq9hpm", "0FUY2Dmp", "0IFRF6Te", "0J6mW2FL", "0JViPpqY", "0NTCOvIh", "0OJ5hb8T", "0S6PyVEf", "0VLbMEQi", "0WzF9Uwv", "0ahm2tiz", "0d0aUktH", "0fqYgq7E", "0ihUDwjF", "0jGGShHT", "0omtFS9y", "0tfQKb5b", "0vySJMeB", "0xkEDr2w", "11Qz2TLS", "12RShX7t", "12UjRNBw", "12vqYfpL", "13sc8bw3", "14ETWKyb", "16Bm9efA", "173VzPL7", "1AGEwRdY", "1DNTdpLQ", "1F43SY5h", "1GChzf13", "1GKJQpaH", "1GnbpsS6", "1If9cLra", "1JvFG0wX", "1OisXekI", "1RDefyFz", "1Ukxaiuq", "1YOzNcoI", "1YPYBVb4", "1nkEEag9", "1sQHeG0G", "1tPVxolR", "1wKrAH0V", "1y9Azwsi", "21NyYMUV", "22lFV8tX", "27YLeInG", "29U7vFVy", "29wGMmmb", "2AQ9t4aF", "2Cg7dLbe", "2EI6ADJS", "2HQUOR35", "2J9UyN8J", "2JL5iyYT", "2Kw9jgbx", "2SrMDnU5", "2StzL0OL", "2TjkhyF1", "2WaqYt5X", "2WmTswl1", "2YvxQDZB", "2ZRAQf4s", "2ZyGYNLM", "2f8c1xR3", "2hRaaVD5", "2htMYD1E", "2kmhbaTt", "2kuCJbhR", "2qf1vTk9", "2tlzFRF3", "2vNfjapq", "2yIT3K2d", "33xifxAY", "34RxGJAd", "3JFS8GAd", "3JiYoca4", "3KBBPPl5", "3PE7XWI8", "3YlcW5i7", "3qtiwjxr", "3rhBCFfY", "42nQnn0Z", "480fFsKk", "49NuiztI", "4CD2G3Ho", "4FP7T2M9", "4GPlXU8U", "4ItPsD30", "4Nb9e1wl", "4OO1eXzg", "4R06SKpF", "4V0w7iM0", "4WFWSKgr", "4XnMfBBU", "4fH8ci9B", "0OJ5hb8T", "flwQhVfj", "APVcIjbX"]'
+ where email = 'riley@freewill.com';

# 2023-07-19 11:03:35.842198
+select * from portal_users where email = 'riley@freewill.com';

# 2023-07-19 11:03:47.058332
+commit;

# 2023-07-19 11:03:53.878452
+\q

# 2023-07-28 11:18:54.313769
+\d estate_charitable_gifts

# 2023-07-28 11:19:19.295983
+\d estate_plans

# 2023-07-31 12:32:47.770848
+\q

# 2023-07-31 12:33:15.679569
+select * from estate_charitable_gifts where program_id is null;

# 2023-07-31 12:33:21.451934
+select count(*) from estate_charitable_gifts where program_id is null;

# 2023-08-01 12:20:21.770391
+select * from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com');

# 2023-08-01 12:20:30.631123
+\d profiles

# 2023-08-01 12:20:39.887541
+select * from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com');

# 2023-08-01 12:20:59.648783
+update profiles set gender = null where rand_id = cBGZTgcT;

# 2023-08-01 12:21:05.220955
+update profiles set gender = null where rand_id = 'cBGZTgcT';

# 2023-08-01 12:21:07.937766
+select * from profiles where account_id in (select rand_id from users where email = 'riley@freewill.com');

# 2023-08-04 12:47:31.229707
+\d organizations

# 2023-08-04 14:53:34.937182
+select * from organizations limit 1;

# 2023-08-04 15:11:34.700795
+select count(*) from organizations where ARRAY_LENGTH(categories) > 1;

# 2023-08-04 15:11:40.652406
+select count(*) from organizations where ARRAY_LENGTH(categories::text[]) > 1;

# 2023-08-04 15:11:53.141018
+select count(*) from organizations where ARRAY_LENGTH(jsonb_to_array(categories)) > 1;

# 2023-08-04 15:12:12.318413
+select count(*) from organizations where ARRAY_LENGTH(jsonb_array_elements_text(categories)) > 1;

# 2023-08-04 15:12:47.628714
+select count(*) from organizations where jsonb_array_length(categories) > 1;

# 2023-08-04 15:12:50.296579
+select count(*) from organizations where jsonb_array_length(categories) > 0;

# 2023-08-04 15:12:52.536072
+select count(*) from organizations where jsonb_array_length(categories) > 2;

# 2023-08-04 15:12:55.119970
+select count(*) from organizations where jsonb_array_length(categories) = 1;

# 2023-08-04 15:12:59.221793
+select count(*) from organizations;

# 2023-11-14 12:00:48.493273
+\q

# 2023-11-15 12:06:48.083888
+select counT(*) from users;

# 2023-11-15 12:22:23.777359
+select * from estate_validity_reasons where estate_id = '4eD1YWYZ';;

# 2023-11-15 12:22:44.149077
+select count(*) from estate_validity_reasons;

# 2023-11-15 12:38:51.576573
+select count(*) from users;

# 2023-11-15 15:09:44.245197
+\q

# 2023-11-15 15:25:33.672411
+select count(*) from estate_plans;

# 2023-11-15 15:26:12.087380
+select ep_count.count as estate_plan_total from (select count(*) from estate_plans) ep_count;

# 2023-11-15 15:27:07.859697
+select * from estate_validity_reasons limit 1;

# 2023-11-15 15:27:45.160554
+select count(distinct estate_id) from estate_validity_reasons;

# 2023-11-15 15:27:57.847672
+select ep_count.count as estate_plan_total from (select count(*) from estate_plans) ep_count;

# 2023-11-15 15:28:06.372629
+select * from estate_plans limit 1;

# 2023-11-15 15:28:50.986660
+select created_at, last_section_completed_updated_at from estate_plans limit 1;

# 2023-11-15 15:34:07.680800
+select last_section_completed, last_section_completed_updated_at from estate_plans limit 1;

# 2023-11-15 15:34:10.308129
+select last_section_completed, last_section_completed_updated_at from estate_plans limit 10;

# 2023-11-15 15:34:41.236789
+select count(distinct estate_id) from estate_validity_reasons;

# 2023-11-15 15:34:46.932142
+select * from estate_validity_reasons limit 1;

# 2023-11-15 15:34:59.180661
+select * from estate_plans limig 1;

# 2023-11-15 15:35:00.723552
+select * from estate_plans limit 1;

# 2023-11-15 15:40:13.514007
+select ??? from estate_plans ep join estate_validity_reasons ON evr.estate_id = ep.rand_id where evr.created_at < ep.last_section_completed_updated_at and ep.last_section_completed != 'review';

# 2023-11-15 15:40:27.617864
+select count(ep.rand_id) from estate_plans ep join estate_validity_reasons ON evr.estate_id = ep.rand_id where evr.created_at < ep.last_section_completed_updated_at and ep.last_section_completed != 'review';

# 2023-11-15 15:40:37.907207
+select count(ep.rand_id) from estate_plans ep join estate_validity_reasons evr ON evr.estate_id = ep.rand_id where evr.created_at < ep.last_section_completed_updated_at and ep.last_section_completed != 'review';

# 2023-11-15 15:40:43.433000
+select count(ep.rand_id) from estate_plans ep join estate_validity_reasons evr ON evr.estate_id = ep.rand_id where evr.created_at < ep.last_section_completed_updated_at;

# 2023-11-15 15:41:50.611270
+select count(ep.rand_id) from estate_plans ep join estate_validity_reasons evr ON evr.estate_id = ep.rand_id where evr.created_at > ep.last_section_completed_updated_at;

# 2023-11-15 15:51:35.651582
+select ep_with_evr_count.count / ep_total.count from (select count(distinct estate_id) from estate_validity_reasons) ep_with_evr_count join (select count(*) from estate_plans) ep_total on true;

# 2023-11-15 15:51:41.546280
+select ep_with_evr_count.count, ep_total.count from (select count(distinct estate_id) from estate_validity_reasons) ep_with_evr_count join (select count(*) from estate_plans) ep_total on true;

# 2023-11-15 15:52:04.770005
+select ep_with_evr_count.count::float / ep_total.count::float from (select count(distinct estate_id) from estate_validity_reasons) ep_with_evr_count join (select count(*) from estate_plans) ep_total on true;

# 2023-11-15 15:52:13.034250
+select ep_with_evr_count.count, ep_total.count from (select count(distinct estate_id) from estate_validity_reasons) ep_with_evr_count join (select count(*) from estate_plans) ep_total on true;

# 2023-11-15 15:52:32.111871
+select ep_with_evr_count.count from (select count(distinct estate_id) from estate_validity_reasons) ep_with_evr_count;

# 2023-11-15 15:52:47.632189
+select ep_total.count from (select count(*) from estate_plans) ep_total;

# 2023-11-15 15:52:53.322086
+select ep_with_evr_count.count, ep_total.count from (select count(distinct estate_id) from estate_validity_reasons) ep_with_evr_count join (select count(*) from estate_plans) ep_total on true;

# 2023-11-15 15:53:42.452089
+select ep_with_evr_count.count as estate_plans_with_validity_reasons, ep_total.count as total_estate_plans, ep_with_evr_count.count::float / ep_total.count::float as percentage_of_estate_plans_with_validity_reasons from (select count(distinct estate_id) from estate_validity_reasons) ep_with_evr_count join (select count(*) from estate_plans) ep_total on true;

# 2023-11-15 15:53:57.668925
+select ep_with_evr_count.count as estate_plans_with_validity_reasons, ep_total.count as total_estate_plans, (ep_with_evr_count.count::float / ep_total.count::float) * 100 as percentage_of_estate_plans_with_validity_reasons from (select count(distinct estate_id) from estate_validity_reasons) ep_with_evr_count join (select count(*) from estate_plans) ep_total on true;

# 2023-11-16 13:17:36.692202
+select * from estate_plans limit 1;

# 2023-11-16 13:18:15.920026
+select * from completion_events limit 10;

# 2023-11-16 13:18:25.543533
+select distinct event_type from completion_events;

# 2023-11-16 13:18:35.791410
+select distinct completion_type from completion_events;

# 2023-11-17 12:38:53.008302
+select * from completion_events limit 1;

# 2023-11-17 12:40:47.035189
+\d completion_events

# 2023-11-17 12:41:29.145113
+\d tenants

# 2023-11-17 12:41:38.758811
+select * from tenants limit 1;

# 2023-11-17 13:21:18.919195
+select * from estate_plans limit 1;

# 2023-11-20 14:21:14.232777
+select * from completion_events limit 1;

# 2023-11-20 14:21:33.726718
+select distinct completion_type from completion_events;

# 2023-11-20 14:21:46.350555
+select * from completion_events limit 1;

# 2023-11-20 14:22:24.861881
+select distinct product from completion_events;

# 2023-11-20 14:22:44.710285
+select count(distinct product_id) from completion_events where product in ('will', 'rlt');

# 2023-11-20 14:23:37.581507
+select count(distinct product_id) from completion_events where product in ('will', 'rlt') and created_at > '11-16-2023:00:00:00'::timestamp and created_at < '11-20-2023:13:00:00'::timestamp;

# 2023-11-20 14:26:46.270919
+select count(*) from estate_plans where created_at > '11-16-2023'::timestamp;

# 2023-11-28 14:17:40.672940
+select * from organizations limit 1;

# 2023-11-28 14:18:09.989831
+select * from organizations where display_name ilike '%tenderloin%community%benefit%district%';

# 2023-11-28 14:18:13.777439
+select * from organizations where display_name ilike '%tenderloin%';

# 2023-12-20 11:18:26.849944
+select * from estate_plans where rand_id = 'gAN6GSRh';

# 2023-12-20 11:21:45.682463
+select distinct last_section_completed from estate_plans;

# 2023-12-20 11:21:55.083838
+select * from estate_plans where rand_id = 'gAN6GSRh';

# 2023-12-20 11:22:05.930983
+select distinct last_section_completed from estate_plans where plan_type = 'rlt';

# 2023-12-20 11:22:33.483227
+select * from estate_plans where rand_id = 'gAN6GSRh';

# 2023-12-20 11:34:01.630321
+delete from estate_plans where profile_id = '??????/';

# 2023-12-20 11:34:19.080684
+delete from estate_plans where rand_id = 'gAN6GSRh';

# 2023-12-20 11:35:44.320369
+select * from estate_plans where rand_id = 'K5EiQXOY';

# 2023-12-20 11:35:46.071726
+select * from estate_plans where rand_id = 'K5EiQX0Y';

# 2023-12-20 11:35:59.777245
+select last_section_completed from estate_plans where rand_id = 'K5EiQX0Y';

# 2024-01-10 12:53:37.354236
+select * from organizations limit 1;

# 2024-01-10 12:53:44.877500
+select products from organizations limit 1;

# 2024-01-10 12:54:05.566405
+select products->'has_outside_bequest' from organizations limit 1;

# 2024-01-10 12:54:09.669237
+select products->'has_outside_bequest' from organizations;

# 2024-01-10 12:55:08.345387
+select * from organization_custom_urls limit 1;

# 2024-01-10 12:55:14.976865
+select product from organization_custom_urls limit 1;

# 2024-01-10 12:55:16.988536
+select product from organization_custom_urls;

# 2024-01-10 12:55:35.326290
+select count(*), product from organization_custom_urls group by product;

# 2024-01-10 14:41:40.703268
+select * from product
+;

# 2024-01-10 14:41:44.292282
+select * from products;

# 2024-01-10 14:43:21.681348
+select count(*), product from organization_custom_urls group by product;

# 2024-01-10 15:14:41.343939
+\d organization_custom_urls

# 2024-01-10 15:50:43.639050
+\d outside_bequests

# 2024-01-12 13:58:37.200232
+select * from information_schema.columns where column_name = 'product';

# 2024-01-12 13:58:43.829471
+select table_name from information_schema.columns where column_name = 'product';

# 2024-01-12 13:58:50.260381
+select * from featureships limit 1;

# 2024-01-12 13:59:02.345117
+select product, count(*) from featureships group by product;

# 2024-01-12 13:59:19.673404
+select product, count(*) from completion_events group by product;

# 2024-01-12 13:59:33.254911
+select product, count(*) from organization_custom_urls group by product;

# 2024-01-16 11:49:19.083885
+select * from organization_custom_urls limit 1;

# 2024-01-16 11:49:56.897862
+select product, count(*) from organization_custom_urls group by product;

# 2024-01-16 11:51:18.177509
+select * from organization_custom_urls where product = 'outside_bequest';

# 2024-01-16 11:51:21.899106
+select * from organization_custom_urls where product = 'outside_bequest' limit 1;

# 2024-01-16 11:52:53.189830
+select * from organization_custom_urls where customizations->'giftConfirmation' is not null;

# 2024-01-16 11:53:20.245505
+select customizations->'uri_background' from organization_custom_urls where organization_id = '1DNTdpLQ';

# 2024-01-16 11:53:46.854583
+select customizations->'uri_background' from organization_custom_urls where organization_id = '1DNTdpLQ' and customizations->'uri_background' is not null;

# 2024-01-16 11:54:07.844092
+select customizations->'gift_confirmation' from organization_custom_urls where customizations->'gift_confirmation' is not null;

# 2024-01-16 12:00:46.578948
+select * from organization_custom_urls where product = 'outside_bequest' limit 1;

# 2024-01-16 12:03:39.352427
+update organization_custom_urls set customizations = '{"gift_confirmation":{"landing_page_copy":"blah","final_page_copy":"blah blah", "gift_details_page_copy":"blah blah blah", "is_show_include_in_publications_question":"true": "is_show_ask_full_name_of_executor_question":"false"}}'::jsonb where rand_id = 'JNFskoen';

# 2024-01-16 14:46:47.692735
+\e

# 2024-01-16 14:47:07.440441
+update organization_custom_urls set customizations =
+'{gift_confirmation:{"landing_page_copy":"blah","final_page_copy":"blah blah", "gift_details_page_copy":"blah blah blah", "is_show_include_in_publications_question":"true": "is_show_ask_full_name_of_executor_question":"false"}}'::jsonb where rand_id = 'JNFskoen';

# 2024-01-16 14:47:12.620066
+\e

# 2024-01-16 14:47:31.483696
+update organization_custom_urls set customizations =
+'{"gift_confirmation":{"landing_page_copy":"blah","final_page_copy":"blah blah", "gift_details_page_copy":"blah blah blah", "is_show_include_in_publications_question":"true", "is_show_ask_full_name_of_executor_question":"false"}}'::jsonb where rand_id = 'JNFskoen';

# 2024-01-16 14:47:56.237757
+select * from organization_custom_urls where rand_id = 'JNFskoen';

# 2024-01-16 14:56:00.582402
+select count(*) from organization_custom_urls where customizations->'gift_intent_customization' is not null;

# 2024-01-16 14:56:07.526104
+select count(*) from organization_custom_urls where customizations->'gift_confirmation_customization' is not null;

# 2024-01-16 14:57:32.046491
+update organization_custom_urls set customizations =
+'{"gift_intent_confirmation":{"landing_page_copy":"blah","final_page_copy":"blah blah", "gift_details_page_copy":"blah blah blah", "is_show_include_in_publications_question":"true", "is_show_ask_full_name_of_executor_question":"false"}}'::jsonb where rand_id = 'JNFskoen';

# 2024-01-16 14:59:09.894440
+update organization_custom_urls set customizations =
+'{"gift_intent_customization":{"landing_page_copy":"blah","final_page_copy":"blah blah", "gift_details_page_copy":"blah blah blah", "is_show_include_in_publications_question":"true", "is_show_ask_full_name_of_executor_question":"false"}}'::jsonb where rand_id = 'JNFskoen';

# 2024-01-19 14:49:33.447004
+select count(*) from organization_custom_urls where customizations->'gift_confirmation_customization' is not null;

# 2024-01-19 14:49:59.615241
+update organization_custom_urls set customizations =
+'{"gift_confirmation_customization":{"landing_page_copy":"blah","final_page_copy":"blah blah", "gift_details_page_copy":"blah blah blah", "is_show_include_in_publications_question":"true", "is_show_ask_full_name_of_executor_question":"false"}}'::jsonb where rand_id = 'JNFskoen';

# 2024-01-22 14:08:31.218424
+select * from organizations where display_name ilike '%transgender%';

# 2024-01-22 14:37:35.815011
+select pg_size_pretty(pg_total_relation_size('"public"."rand_ids_in_use"'));

# 2024-01-22 14:37:42.743844
+select pg_size_pretty(pg_total_relation_size('"public"."organizations"'));

# 2024-01-22 14:37:44.208702
+select pg_size_pretty(pg_total_relation_size('"public"."rand_ids_in_use"'));

# 2024-01-22 14:38:58.095449
+select pg_size_pretty(pg_database_size('public'));

# 2024-01-22 14:39:04.471488
+select pg_size_pretty(pg_database_size('freewill_dev'));

# 2024-01-22 14:39:09.216970
+select pg_size_pretty(pg_total_relation_size('"public"."rand_ids_in_use"'));

# 2024-01-24 13:37:50.122274
+\d organization_custom_urls

# 2024-01-24 13:38:19.861843
+select customizations from organization_custom_urls limit 1;

# 2024-01-24 13:38:44.954143
+select jsonb_object_keys(customizations) from organization_custom_urls limit 1;

# 2024-01-24 13:38:48.378336
+select jsonb_object_keys(customizations) from organization_custom_urls limit 10;

# 2024-01-24 13:39:33.439867
+select array_agg(jsonb_object_keys(customizations)) from organization_custom_urls limit 10;

# 2024-01-24 13:39:37.617803
+select jsonb_object_keys(customizations) from organization_custom_urls limit 10;

# 2024-01-24 13:39:39.020562
+select jsonb_object_keys(customizations) from organization_custom_urls limit 100;

# 2024-01-24 13:39:43.351924
+select distinct jsonb_object_keys(customizations) from organization_custom_urls limit 100;

# 2024-01-24 13:39:47.815736
+select distinct jsonb_object_keys(customizations) from organization_custom_urls;

# 2024-01-24 14:02:29.265442
+select customizations from organization_custom_urls limit 1;

# 2024-01-24 14:30:43.014419
+select * from organizations where display_name ilike '%acme%';

# 2024-01-24 14:31:06.937546
+select * from organization_custom_urls limit 1;

# 2024-01-24 14:31:22.625498
+select * from organization_custom_urls where organization_id = 'flwQhVfj';

# 2024-01-26 12:41:50.071516
+select * from organization_custom_urls where rand_id = 'HXv1eEQQ';

# 2024-01-26 12:42:02.526200
+select * from organization_custom_urls where product = 'outside_bequest';

# 2024-01-26 12:43:34.409211
+select * from organization_custom_urls where rand_id = 'JNFskoen';

# 2024-01-26 13:01:45.145770
+select customizations->'gift_confirmation_customization' from organization_custom_urls where rand_id = 'JNFskoen';

# 2024-01-26 13:02:01.691965
+select customizations->'gift_confirmation_customization'->'isShowAskFullNameOfExecutorQuestion' from organization_custom_urls where rand_id = 'JNFskoen';

# 2024-01-26 13:03:28.857783
+select customizations->'gift_confirmation_customization' from organization_custom_urls where rand_id = 'JNFskoen';

# 2024-01-26 13:19:19.020765
+select count(*) from organization_custom_urls where customizations->'gift_confirmation_customization' is not null;

# 2024-01-29 13:35:30.258170
+\q

# 2024-01-29 13:36:03.949547
+select * from organization_custom_urls where organization_id in (select rand_id from organizations where display_name ilike '%paws%');

# 2024-01-29 13:36:22.781732
+select * from organization_custom_urls where organization_id in (select rand_id from organizations where display_name ilike '%paws%4%');

# 2024-01-29 13:36:35.212907
+select * from organizations where display_name ilike '%paws%';

# 2024-01-29 13:36:54.553174
+select * from organizations where display_name ilike '%4%paws%4%life%';

# 2024-01-29 13:37:10.432372
+select * from organization_custom_urls where organization_id in (select rand_id from organizations where display_name ilike '%4%paws%4%life%');

# 2024-01-29 15:16:27.377836
+select * from programs;

# 2024-01-29 15:16:38.583606
+select * from programs limit 1;

# 2024-01-29 15:16:53.319876
+select locality, count(*) from programs group by locality;

# 2024-01-29 15:17:00.838974
+select * from locality limit 1;

# 2024-01-29 15:17:07.051455
+select * from locality;

# 2024-01-29 15:17:11.977243
+\d programs

# 2024-01-29 15:17:56.499595
+select locality, count(*) from programs group by locality;

# 2024-01-29 15:18:23.486132
+select * from programs limit 1;

# 2024-01-29 15:18:46.605522
+select category, count(*) from programs group by category;

# 2024-01-29 15:19:12.719892
+select count(*) from programs where locality in (0, 1) and category is not null;

# 2024-01-29 15:21:53.344910
+create database freewill_dev_backup_01_29_24 with template freewill_dev;

# 2024-01-29 15:22:26.257599
+select count(*) from programs where locality in (0, 1) and category is not null;

# 2024-01-29 15:22:47.832115
+select category, count(*) from programs group by category;

# 2024-01-29 15:24:23.698855
+select count(*) from programs where locality in (0, 1);

# 2024-01-30 10:49:48.825228
+\c freewill_dev_backup_01_29_24; DROP DATABASE freewill_dev; CREATE DATABASE freewill_dev WITH TEMPLATE freewill_dev_backup_01_29_24; \c freewill_de;

# 2024-01-30 10:49:53.374295
+\c freewill_dev_backup_01_29_24; DROP DATABASE freewill_dev; CREATE DATABASE freewill_dev WITH TEMPLATE freewill_dev_backup_01_29_24; \c freewill_dev;

# 2024-01-30 10:50:47.342263
+select count(*) from programs;

# 2024-01-30 11:29:46.207415
+\q

# 2024-01-30 11:29:59.920802
+select * from organization_custom_urls where organization_id in (select rand_id from organizations where display_name ilike '%avaaz%');

# 2024-01-30 11:30:10.194972
+select * from organization_custom_urls where organization_id in (select rand_id from organizations where display_name ilike '%avaaz%') and product = 'outside_bequest';

# 2024-02-02 11:49:43.462673
+\d portal_legacy_gifts

# 2024-02-02 12:23:35.215930
+select * from portal_legacy_gifts where rand_id = 'BV11RHZb';

# 2024-02-02 12:23:37.732932
+select * from portal_legacy_gifts where rand_id = 'BViiRHZb';

# 2024-02-02 12:23:39.949106
+select * from portal_legacy_gifts where rand_id = 'BVIIRHZb';

# 2024-02-02 12:23:42.099808
+select * from portal_legacy_gifts where rand_id = 'BVllRHZb';

# 2024-02-02 12:23:43.900750
+select * from portal_legacy_gifts where rand_id = 'BVilRHZb';

# 2024-02-02 12:23:46.166890
+select * from portal_legacy_gifts where rand_id = 'BV1lRHZb';

# 2024-02-02 12:23:48.056225
+select * from portal_legacy_gifts where rand_id = 'BVIlRHZb';

# 2024-02-02 12:23:58.756837
+select * from portal_legacy_gifts where rand_id = 'BVi1RHZb';

# 2024-02-02 12:24:00.612049
+select * from portal_legacy_gifts where rand_id = 'BVI1RHZb';

# 2024-02-02 12:24:02.757132
+select * from portal_legacy_gifts where rand_id = 'BVl1RHZb';

# 2024-02-02 12:24:09.708356
+select * from portal_legacy_gifts where rand_id = 'BVilRHZb';

# 2024-02-02 12:24:11.420469
+select * from portal_legacy_gifts where rand_id = 'BVIlRHZb';

# 2024-02-02 12:24:13.588367
+select * from portal_legacy_gifts where rand_id = 'BV1lRHZb';

# 2024-02-02 12:24:17.213273
+select * from portal_legacy_gifts where rand_id = 'BVl1RHZb';

# 2024-02-02 12:24:19.018571
+select * from portal_legacy_gifts where rand_id = 'BVlIRHZb';

# 2024-02-02 12:24:22.116582
+select * from portal_legacy_gifts where rand_id = 'BVllRHZb';

# 2024-02-02 12:24:24.521605
+select * from portal_legacy_gifts where rand_id = 'BVliRHZb';

# 2024-02-02 12:25:02.989273
+select * from portal_legacy_gifts where rand_id = 'BVIlRHZb';

# 2024-02-02 12:25:10.931014
+\d portal_legacy_gifts

# 2024-02-02 12:25:15.603476
+select * from portal_legacy_gifts where id = 'BVIlRHZb';

# 2024-02-02 12:25:17.595473
+\d portal_legacy_gifts

# 2024-02-02 12:25:26.197520
+select * from portal_legacy_gifts where gift_id = 'BVIlRHZb';

# 2024-02-02 12:26:37.355835
+select * from outside_bequests where rand_id = 'BVIlRHZb';

# 2024-02-02 12:27:00.708549
+select * from outside_bequests where rand_id in (select gift_id from portal_legacy_gifts);

# 2024-02-02 12:27:20.304875
+select rand_id from outside_bequests where rand_id in (select gift_id from portal_legacy_gifts) limit 1;

# 2024-02-02 12:27:29.012986
+select * from portal_legacy_gifts where gift_id = 'LeJ8zuYT';

# 2024-02-02 12:32:39.705074
+select * from outside_bequests where rand_id = 'LeJ8zuYT';

# 2024-02-02 12:33:01.210498
+\d outside_bequests

# 2024-02-02 12:33:19.861671
+update outside_bequests set has_permission_for_public_recognition = true;

# 2024-02-02 12:34:01.365526
+update outside_bequests set public_recognition_name = 'firstPublicName lastPublicName';

# 2024-02-02 12:34:30.926083
+update outside_bequests set has_permission_for_public_recognition = true where rand_id = 'LeJ8zuYT';

# 2024-02-02 12:34:43.558078
+update outside_bequests set public_recognition_name = 'firstPublicName lastPublicName' where rand_id = 'LeJ8zuYT';

# 2024-02-02 12:35:03.251897
+select * from outside_bequests where executor is not null;

# 2024-02-02 12:36:48.534001
+update outside_bequests set executor = '{"fullName":"executorFirstName executorLastName","email":"someone@example.com","phone":"123-123-1234"}'::jsonb where rand_id = 'LeJ8zuYT';

# 2024-02-02 12:37:16.832649
+select * from profiles limit 1;

# 2024-02-02 12:37:28.064590
+select * from profiles where phone is not null limit 1;

# 2024-02-02 12:37:49.085679
+update outside_bequests set executor = '{"fullName":"executorFirstName executorLastName","email":"someone@example.com","phone":"(123) 123-1234"}'::jsonb where rand_id = 'LeJ8zuYT';

# 2024-02-02 12:38:04.192042
+select * from users limit 1;

# 2024-02-02 12:38:11.488367
+select * from portal_users limit 1;

# 2024-02-02 12:39:17.541776
+select phone from profiles where phone is not null limit 100;

# 2024-02-02 12:52:49.236521
+select * from outside_bequests where rand_id = 'LeJ8zuYT';

# 2024-02-02 15:35:04.980239
+select * from portal_legacy_gifts limit 1;

# 2024-02-02 15:35:15.950492
+select * from portal_legacy_gifts where gift_type = 'gift_intent';

# 2024-02-05 15:37:29.216403
+select * from outside_bequests where rand_id = 'LeJ8zuYT';

# 2024-02-05 15:38:52.780619
+select count(*) from outside_bequests where executor->'phone' is not null and executor->'phone' not ilike '(___) ___-____';

# 2024-02-05 15:39:06.630396
+select executor->'phone' from outside_bequests limit 1;

# 2024-02-05 15:39:12.877684
+select count(*) from outside_bequests where executor->'phone' is not null and executor->'phone' not ilike '(___) ___-____';

# 2024-02-05 15:39:20.031804
+select count(*) from outside_bequests where executor->'phone' is not null and executor->'phone'::text not ilike '(___) ___-____';

# 2024-02-05 15:39:28.988133
+select count(*) from outside_bequests where executor->'phone' is not null and executor->'phone'::text ilike '(___) ___-____';

# 2024-02-05 15:39:38.403719
+select count(*) from outside_bequests where executor->'phone' is not null and (executor->'phone')::text not ilike '(___) ___-____';

# 2024-02-05 15:39:50.450155
+select executor->'phone' from outside_bequests where executor->'phone' is not null and (executor->'phone')::text not ilike '(___) ___-____';

# 2024-02-05 15:40:01.508551
+select executor->'phone' from outside_bequests where executor->'phone' is not null and (executor->'phone')::text not ilike '(%) %-%';

# 2024-02-05 15:40:23.500461
+select executor->'phone' from outside_bequests where executor->'phone' is not null and (executor->'phone')::text not ilike '"(%) %-%"';

# 2024-02-05 15:40:27.508065
+select executor->'phone' from outside_bequests where executor->'phone' is not null and (executor->'phone')::text not ilike '"(%) %-____"';

# 2024-02-05 15:40:31.609989
+select executor->'phone' from outside_bequests where executor->'phone' is not null and (executor->'phone')::text not ilike '"(___) ___-____"';

# 2024-02-05 15:40:38.394050
+select count(*) from outside_bequests where executor->'phone' is not null and (executor->'phone')::text not ilike '"(___) ___-____"';

# 2024-02-05 15:41:24.449188
+select executor-->'phone' from outside_bequests where executor->'phone' is not null and (executor->'phone')::text not ilike '"(___) ___-____"';

# 2024-02-05 15:41:27.693103
+select executor->>'phone' from outside_bequests where executor->'phone' is not null and (executor->'phone')::text not ilike '"(___) ___-____"';

# 2024-02-05 15:41:33.210928
+select executor->>'phone' from outside_bequests where executor->'phone' is not null and (executor->'phone')::text ilike '"(___) ___-____"';

# 2024-02-05 15:41:38.715140
+select executor->>'phone' from outside_bequests where executor->'phone' is not null and (executor->'phone')::text ilike '(___) ___-____';

# 2024-02-05 15:41:44.034947
+select executor->>'phone' from outside_bequests where executor->'phone' is not null and (executor->>'phone')::text not ilike '(___) ___-____';

# 2024-02-05 15:41:47.194643
+select executor->>'phone' from outside_bequests where executor->'phone' is not null and (executor->>'phone')::text ilike '(___) ___-____';

# 2024-02-05 15:41:49.899004
+select executor->>'phone' from outside_bequests where executor->'phone' is not null and (executor->>'phone')::text not ilike '(___) ___-____';

# 2024-02-05 15:41:59.226150
+select executor->>'phone' from outside_bequests where executor->'phone' is not null and executor->>'phone' not ilike '(___) ___-____';

# 2024-02-05 16:02:11.801921
+select * from outside_bequests where rand_id = 'LeJ8zuYT';

# 2024-02-05 16:02:22.609878
+select * from portal_legacy_gifts where gift_type = 'gift_intent';

# 2024-02-09 12:04:57.130736
+select * from outside_bequests where rand_id = 'LeJ8zuYT';

# 2024-02-09 12:05:30.449056
+update outside_bequests set has_permission_for_public_recognition = false where rand_id = 'LeJ8zuYT';

# 2024-02-09 12:05:44.999970
+update outside_bequests set has_permission_for_public_recognition = null where rand_id = 'LeJ8zuYT';

# 2024-02-09 12:06:00.156115
+update outside_bequests set has_permission_for_public_recognition = true where rand_id = 'LeJ8zuYT';

# 2024-02-09 12:25:33.359557
+update outside_bequests set has_permission_for_public_recognition = null where rand_id = 'LeJ8zuYT';

# 2024-02-09 12:25:43.698957
+update outside_bequests set has_permission_for_public_recognition = false where rand_id = 'LeJ8zuYT';

# 2024-02-09 12:25:53.025627
+update outside_bequests set has_permission_for_public_recognition = true where rand_id = 'LeJ8zuYT';

# 2024-02-09 14:26:46.768498
+select * from organizations where display_name ilike '%acme%';

# 2024-02-09 14:27:07.854968
+select * from programs where organization_id in (select rand_id from organizations where display_name ilike '%acme%');

# 2024-02-09 14:27:37.092514
+select * from organization_custom_urls where organization_id in (select rand_id from organizations where display_name ilike '%acme%') and product = 'outside_bequest';

# 2024-02-09 14:27:58.734631
+select customizations from organization_custom_urls limit 10;

# 2024-02-09 14:28:20.357104
+select customizations from organization_custom_urls where customizations->'gift_intent_customization' is not null;

# 2024-02-09 14:28:41.010493
+select customizations->'gift_intent_customization' from organization_custom_urls where customizations->'gift_intent_customization' is not null;

# 2024-02-09 14:28:50.453645
+\q

# 2024-02-09 14:28:57.320030
+select customizations->'gift_intent_customization' from organization_custom_urls where customizations->'gift_intent_customization' is not null;

# 2024-02-09 14:29:01.709689
+\q

# 2024-02-09 14:33:49.741165
+select * from portal_legacy_gifts where rand_id = 'xEu7tEdz';

# 2024-02-09 14:33:54.240195
+select * from portal_legacy_gifts where gift_id = 'xEu7tEdz';

# 2024-02-09 14:34:58.512950
+update portal_legacy_gifts set gift_type = 'gift_intent' where gift_id = 'xEu7tEdz';

# 2024-02-09 14:36:13.755413
+select * from portal_legacy_gifts where gift_id = 'xEu7tEdz';

# 2024-02-09 14:36:29.237906
+update portal_legacy_gifts set asset_type = 'gift_intent' where gift_id = 'xEu7tEdz';

# 2024-02-09 14:36:31.317615
+select * from portal_legacy_gifts where gift_id = 'xEu7tEdz';

# 2024-02-09 14:44:28.282948
+update portal_legacy_gifts set gift_type = 'outside_bequest', asset_type = 'outside_bequest' where gift_id = 'xEu7tEdz';

# 2024-02-09 14:44:30.984618
+select * from portal_legacy_gifts where gift_id = 'xEu7tEdz';

# 2024-02-09 15:45:22.369658
+\q

# 2024-02-09 15:45:35.467717
+update outside_bequests set has_permission_for_public_recognition = true where rand_id = 'LeJ8zuYT';

# 2024-02-09 15:45:42.706776
+update outside_bequests set has_permission_for_public_recognition = false where rand_id = 'LeJ8zuYT';

# 2024-02-09 15:45:54.839756
+update outside_bequests set has_permission_for_public_recognition = null where rand_id = 'LeJ8zuYT';

# 2024-02-09 15:46:48.464421
+update outside_bequests set has_permission_for_public_recognition = false where rand_id = 'LeJ8zuYT';

# 2024-02-09 15:46:57.987198
+update outside_bequests set has_permission_for_public_recognition = true where rand_id = 'LeJ8zuYT';

# 2024-02-09 16:08:11.471475
+select * from organization_custom_urls where organization_id in (select rand_id from organizations where display_name ilike '%acme%') and product = 'gift_intent';

# 2024-02-09 16:08:16.216239
+select * from organization_custom_urls where organization_id in (select rand_id from organizations where display_name ilike '%acme%') and product = 'outside_bequest';

# 2024-02-09 16:08:20.767701
+select customizations from organization_custom_urls where organization_id in (select rand_id from organizations where display_name ilike '%acme%') and product = 'outside_bequest';

# 2024-02-16 11:22:43.937171
+select * from organizations where display_name ilike '%acme%';

# 2024-02-16 11:24:33.529354
+select * from organization_custom_urls where organization_id in (select rand_id from organizations where display_name ilike '%acme%') and product = 'will';

# 2024-02-16 11:25:16.207134
+select * from programs limit 1;

# 2024-02-16 11:25:40.316751
+select count(*) from programs;

# 2024-02-16 11:30:39.516286
+select * from programs where rand_id = 'P5q0Ar1m';

# 2024-02-16 11:31:38.971177
+update programs set locality = 0 where rand_id = 'P5q0Ar1m';

# 2024-02-16 11:32:01.747112
+update programs set locality = 1 where rand_id = 'P5q0Ar1m';

# 2024-02-16 11:32:17.222917
+update programs set locality = 2 where rand_id = 'P5q0Ar1m';

# 2024-02-16 11:32:34.343612
+select category from programs limit 10;

# 2024-02-16 11:32:39.569392
+select category from programs where category is not null;

# 2024-02-16 11:32:59.547104
+update programs set category = animal where rand_id = 'P5q0Ar1m';

# 2024-02-16 11:33:05.137695
+update programs set category = 'animal' where rand_id = 'P5q0Ar1m';

# 2024-02-16 11:33:22.554156
+update programs set locality = 1 where rand_id = 'P5q0Ar1m';

# 2024-02-16 11:33:38.297320
+update programs set locality = 0 where rand_id = 'P5q0Ar1m';

# 2024-02-16 11:33:49.457156
+update programs set locality = -1 where rand_id = 'P5q0Ar1m';

# 2024-02-21 11:21:31.298761
+\d programs

# 2024-02-21 11:23:03.224678
+select count(*) from programs where locality is null;

# 2024-03-04 15:49:48.884938
+\q

# 2024-03-04 15:50:01.929687
+select * from programs where rand_id = 'HDtQfVt2';

# 2024-03-04 15:51:09.021070
+select * from programs where rand_id = 'SPSy3JGp';

# 2024-03-04 16:00:41.040498
+select associated_zip_codes from programs where associated_zip_codes is null;

# 2024-03-04 16:00:47.752894
+select associated_zip_codes from programs where associated_zip_codes = '';

# 2024-03-04 16:01:12.032834
+select * from programs where rand_id = 'SPSy3JGp';

# 2024-03-04 16:19:31.161420
+select * from programs where display_name ilike '%riley%';

# 2024-03-04 16:20:19.297835
+select * from programs where display_name ilike '%riley testing 2%';

# 2024-03-04 16:20:52.143123
+select * from programs where display_name ilike '%riley testing 3%';

# 2024-03-04 16:29:40.201165
+\q

# 2024-03-11 15:03:29.273667
+\d irs_exempt_organizations

# 2024-03-11 15:03:39.426854
+select * from irs_exempt_organizations;

# 2024-03-11 15:04:28.971237
+\d irs_exempt_organizations

# 2024-03-11 15:04:38.863610
+select * from irs_exempt_organizations;

# 2024-03-11 15:05:31.515007
+select name from irs_exempt_organizations limit 100;

# 2024-03-11 15:16:21.912430
+select * from users where email ilike '%riley%';

# 2024-03-11 15:17:03.545054
+select * from users where email ilike '%freewill.com';

# 2024-03-11 15:34:14.224148
+\l

# 2024-03-11 15:34:45.391290
+\q

# 2024-03-11 15:42:45.304491
+\l

# 2024-03-11 15:44:44.683469
+\q

# 2024-03-11 15:46:47.842349
+CREATE DATABASE freewill_dev_backup_03_11_24 WITH TEMPLATE freewill_dev;

# 2024-03-11 15:46:57.012614
+\l

# 2024-03-11 15:47:26.348086
+drop table cascade users;

# 2024-03-11 15:47:35.395020
+drop table users cascade;

# 2024-03-11 15:48:16.076326
+DROP DATABASE freewill_dev;

# 2024-03-11 15:48:27.656106
+\c freewill_dev_backup_03_11_24

# 2024-03-11 15:49:12.409197
+DROP DATABASE freewill_dev;

# 2024-03-11 15:49:33.925635
+CREATE DATABASE freewill_dev WITH TEMPLATE freewill_dev_backup_03_11_24;

# 2024-03-11 15:49:42.135589
+\c freewill_dev

# 2024-03-11 15:49:46.972465
+\d users

# 2024-03-11 15:49:50.982439
+select * from users limit 1;

# 2024-03-11 16:04:27.019950
+create table posts(id SERIAL PRIMARY KEY, body TEXT, body_search TSVECTOR GENERATED ALWAYS AS (to_tsvector(body)) STORED);

# 2024-03-11 16:05:59.850134
+CREATE TABLE posts(
+   id SERIAL PRIMARY KEY,
+   title TEXT NOT NULL,
+   body TEXT,
+   body_search TSVECTOR  
+      GENERATED ALWAYS AS (to_tsvector(body)) STORED
+);

# 2024-03-11 16:07:33.814692
+\e

# 2024-03-11 16:07:39.258179
+CREATE TABLE posts(
+   id SERIAL PRIMARY KEY,
+   title TEXT NOT NULL,
+   body TEXT NOT NULL,
+   body_search TSVECTOR
+      GENERATED ALWAYS AS (to_tsvector(body)) STORED
+);

# 2024-03-11 16:09:51.810899
+create extension pg_trgm;

# 2024-03-11 16:10:06.416285
+select name from irs_exempt_organizations limit 100;

# 2024-03-11 16:10:47.904738
+select name from irs_exempt_organizations where similarity(name, 'church') limit 10;

# 2024-03-11 16:10:58.963666
+select name from irs_exempt_organizations where similarity(name, 'church') > 0.3 limit 10;

# 2024-03-11 16:11:05.305141
+select name from irs_exempt_organizations where similarity(name, 'charch') > 0.3 limit 10;

# 2024-03-11 16:11:18.181151
+select name from irs_exempt_organizations where similarity(name, 'red') > 0.3 limit 10;

# 2024-03-11 16:11:41.600106
+select name from irs_exempt_organizations where similarity(name, 'red') > 0.3 order by similarity(name, 'red') limit 10;

# 2024-03-11 16:11:47.587572
+select name from irs_exempt_organizations where similarity(name, 'red') > 0.3 order by similarity(name, 'red') desc limit 10;

# 2024-03-11 16:12:04.070581
+select * from irs_exempt_organizations where name = 'RED P';

# 2024-03-11 16:12:20.995900
+select name from irs_exempt_organizations where similarity(name, 'red') > 0.3 order by similarity(name, 'red') desc limit 10;

# 2024-03-11 16:12:37.858154
+select name from irs_exempt_organizations where similarity(name, 'red cr') > 0.3 order by similarity(name, 'red ct') desc limit 10;

# 2024-03-11 16:12:42.632650
+select name from irs_exempt_organizations where similarity(name, 'red cr') > 0.3 order by similarity(name, 'red cr') desc limit 10;

# 2024-03-11 16:13:09.049299
+select name from irs_exempt_organizations where similarity(name, 'red cro') > 0.3 order by similarity(name, 'red cro') desc limit 10;
+

# 2024-03-11 16:13:29.925857
+select name from irs_exempt_organizations where similarity(name, 'red cros') > 0.3 order by similarity(name, 'red cros') desc limit 10;
+

# 2024-03-11 16:13:44.738308
+select name from irs_exempt_organizations where similarity(name, 'red cross') > 0.3 order by similarity(name, 'red cross') desc limit 10;
+

# 2024-03-11 16:15:32.064937
+select name from irs_exempt_organizations where name % 'red cr' order by similarity(name, 'red cr') desc limit 10;

# 2024-03-11 16:16:29.564292
+select count(*) from irs_exempt_organizations;

# 2024-03-11 16:16:37.118424
+select name from irs_exempt_organizations where name % 'red cr' order by similarity(name, 'red cr') desc limit 10;

# 2024-03-11 16:16:53.720521
+select name from irs_exempt_organizations where name % 'red cr' order by similarity(name, 'red cr') desc;

# 2024-03-11 16:17:20.158585
+select name from irs_exempt_organizations where name % 'american red cross' order by similarity(name, 'american red cross') desc;

# 2024-03-11 16:17:39.665285
+select name from irs_exempt_organizations where name % '%red cross' order by similarity(name, '%red cross') desc;

# 2024-03-11 16:17:51.395782
+select name from irs_exempt_organizations where name % 'red cross' order by similarity(name, 'red cross') desc;

# 2024-03-11 16:21:38.057612
+select word_similarity('american red cross', 'red cross');

# 2024-03-11 16:21:43.088454
+select similarity('american red cross', 'red cross');

# 2024-03-11 16:21:52.463877
+select strict_word_similarity('american red cross', 'red cross');

# 2024-03-11 16:23:56.790156
+select name from irs_exempt_organizations where name ilike '%red%cross%' order by name desc limit 10;

# 2024-03-11 16:24:32.127402
+select name from irs_exempt_organizations where name ilike '% red %cross %' order by name desc limit 10;

# 2024-03-11 16:25:06.655491
+select * from irs_exempt_organizations where name ilike '%united grand imperial coun knights%';

# 2024-03-11 16:25:34.185189
+select name from irs_exempt_organizations where name ilike '% red %cross %' order by name desc limit 10;

# 2024-03-11 16:25:46.863753
+select name from irs_exempt_organizations where name ilike '% american% red %cross %' order by name desc limit 10;

# 2024-03-11 16:25:59.195493
+select name from irs_exempt_organizations where name ilike '%american% red %cross %' order by name desc limit 10;

# 2024-03-11 16:26:07.258678
+select name from irs_exempt_organizations where name ilike '%american%red%cross %' order by name desc limit 10;

# 2024-03-11 16:26:14.211799
+select name from irs_exempt_organizations where name ilike '%american%red%cross%' order by name desc limit 10;

# 2024-03-25 13:41:45.106247
+select * from organizations where display_name ilike '%acme%';

# 2024-03-25 14:02:23.928537
+\d organizations

# 2024-03-25 14:02:42.922098
+select * from organizations where display_name ilike '%acme%';

# 2024-03-29 12:02:43.254632
+CREATE DATABASE freewill_dev_backup_03_29_24 WITH TEMPLATE freewill_dev;

# 2024-03-29 12:03:01.085852
+update organizations set donor_search_id = null where display_name ilike '%acme%';

# 2024-03-29 12:09:01.092763
+\q

# 2024-03-29 12:09:07.893988
+select * from organizations where display_name ilike '%acme%';

# 2024-03-29 12:09:12.907243
+select donor_search_id from organizations where display_name ilike '%acme%';

# 2024-03-29 12:09:16.700508
+update organizations set donor_search_id = null where display_name ilike '%acme%';

# 2024-03-29 12:09:45.043191
+update organizations set donor_search_id = '6022ec5cce602' where display_name ilike '%acme%';

# 2024-03-29 12:18:05.981206
+update organizations set donor_search_id = null where display_name ilike '%acme%';

# 2024-03-29 12:19:39.394308
+\q

# 2024-03-29 15:10:11.987846
+select * from organizations where display_name ilike '%acme%';

# 2024-03-29 15:10:33.522478
+select donor_search_id, donor_search_id_expires_at from organizations where display_name ilike '%acme%';

# 2024-03-29 15:13:33.101780
+select rand_id, donor_search_id, donor_search_id_expires_at from organizations where display_name ilike '%acme%';

# 2024-03-29 15:25:18.166468
+update organizations set donor_search_id_expires_at = '1900-01-01 00:00:00'::timestamp where rand_in in ('flwQhVfj');

# 2024-03-29 15:25:27.318599
+update organizations set donor_search_id_expires_at = '1900-01-01 00:00:00'::timestamp where rand_id in ('flwQhVfj');

# 2024-03-29 15:25:30.970194
+select rand_id, donor_search_id, donor_search_id_expires_at from organizations where display_name ilike '%acme%';

# 2024-03-29 15:27:16.655381
+\q

# 2024-03-29 15:28:11.898940
+\c freewill_dev_backup_03_29_24; DROP DATABASE freewill_dev; CREATE DATABASE freewill_dev WITH TEMPLATE freewill_dev_backup_03_29_24; \c freewill_dev;

# 2024-03-29 15:28:22.341270
+select rand_id, donor_search_id, donor_search_id_expires_at from organizations where display_name ilike '%acme%';

# 2024-03-29 15:34:13.069755
+update organizations set donor_search_id = null where display_name ilike '%acme%';

# 2024-04-01 13:23:22.115090
+\q

# 2024-04-01 13:23:37.940000
+select rand_id from organizations where legal_name ilike '%defenders%of%wildlife%';

# 2024-04-01 13:24:02.994615
+select rand_id, display_name from organizations where legal_name ilike '%southern%baptists%of%texas%foundation%';

# 2024-04-01 13:24:28.051520
+select rand_id, display_name from organizations where legal_name ilike '%acme%';

# 2024-04-10 16:49:59.129482
+select * from organizations limit 1;

# 2024-04-10 16:50:10.493739
+select postal from organizations limit 1;

# 2024-04-10 16:50:23.275155
+select postal from organizations where postal ilike '%U+200B%';

# 2024-04-10 16:51:07.026494
+select postal from organizations where postal ilike U&'%\200B%';

# 2024-04-10 16:51:14.553577
+select * from organizations where postal ilike U&'%\200B%';

# 2024-04-12 14:30:17.653171
+select display_name from organizations where postal ilike U&'%\200B%';

# 2024-04-12 14:37:49.574059
+select strict_word_similarity('american red cross', 'red cross');

# 2024-04-12 14:42:01.237757
+select name from irs_exempt_organizations where name ilike '%american%red%cross%' order by name desc limit 10;

# 2024-04-12 14:42:43.997148
+select name from irs_exempt_organizations where name % '%american%red%cross%' order by strict_word_similarity(name, '%american%red%cross%') desc limit 10;

# 2024-04-12 14:43:02.780710
+select name from irs_exempt_organizations where name % 'american red cross' order by strict_word_similarity(name, 'american red cross') desc limit 10;

# 2024-04-12 14:43:10.061037
+select name from irs_exempt_organizations where name % 'american red cross' order by strict_word_similarity(name, 'american red cross') desc limit 20;

# 2024-04-12 14:44:47.691016
+select display_name from organizations where legal_name ilike '%american%red%cross%';

# 2024-04-12 14:45:01.618951
+select name from irs_exempt_organizations where name ilike '%american%red%cross%';

# 2024-04-12 14:45:43.415459
+\d organizations

# 2024-04-12 14:45:50.813160
+\d irs_exempt_organizations

# 2024-04-12 14:46:24.179513
+select name from irs_exempt_organizations where name ilike '%american%red%cross%' union select legal_name from organizations where legal_name ilike '%american%red%cross%';

# 2024-04-12 14:46:43.449820
+select name, ein from irs_exempt_organizations where name ilike '%american%red%cross%' union select legal_name, ein from organizations where legal_name ilike '%american%red%cross%';

# 2024-04-12 14:46:45.409490
+\e

# 2024-04-12 14:47:03.855726
+select name, ein
+  from irs_exempt_organizations
+ where name ilike '%american%red%cross%'
+ union
+select legal_name, ein
+  from organizations
+ where legal_name ilike '%american%red%cross%';

# 2024-04-12 14:49:15.327592
+\e

# 2024-04-12 14:53:06.172406
+         select irseo.name, irseo.ein, o.legal_name, o.ein
+           from irs_exempt_organizations irseo
+full outer join organizations o
+             on irseo.ein = o.ein
+          where irseo.name ilike '%american%red%cross%'
+            and o.legal_name ilike '%american%red%cross%';

# 2024-04-12 14:53:10.068275
+\e

# 2024-04-12 14:53:15.762554
+         select irseo.name, irseo.ein, o.legal_name, o.ein
+           from irs_exempt_organizations irseo
+full outer join organizations o
+             on true
+          where irseo.name ilike '%american%red%cross%'
+            and o.legal_name ilike '%american%red%cross%';

# 2024-04-12 14:53:55.978917
+select name, ein
+  from irs_exempt_organizations
+ where name ilike '%american%red%cross%'
+ union
+select legal_name, ein
+  from organizations
+ where legal_name ilike '%american%red%cross%';

# 2024-04-12 14:53:57.357134
+\e

# 2024-04-12 14:55:05.282346
+select distinct on (ein) name from
+(
+select name as name, ein as ein
+  from irs_exempt_organizations
+ where name ilike '%american%red%cross%'
+ union
+select legal_name as name, ein as ein
+  from organizations
+ where legal_name ilike '%american%red%cross%'
+);

# 2024-04-12 14:55:07.460883
+\e

# 2024-04-12 14:55:10.803902
+select distinct on (ein) name from
+(
+select name as name, ein as ein
+  from irs_exempt_organizations
+ where name ilike '%american%red%cross%'
+ union
+select legal_name as name, ein as ein
+  from organizations
+ where legal_name ilike '%american%red%cross%'
+) query;

# 2024-04-12 14:55:15.637241
+\e

# 2024-04-12 14:55:18.658220
+select distinct on (ein) name, ein from
+(
+select name as name, ein as ein
+  from irs_exempt_organizations
+ where name ilike '%american%red%cross%'
+ union
+select legal_name as name, ein as ein
+  from organizations
+ where legal_name ilike '%american%red%cross%'
+) query;

# 2024-04-12 14:55:31.864456
+select name, ein
+  from irs_exempt_organizations
+ where name ilike '%american%red%cross%'
+ union
+select legal_name, ein
+  from organizations
+ where legal_name ilike '%american%red%cross%';

# 2024-04-12 14:56:55.797635
+select distinct on (ein) name, ein from
+(
+select name as name, ein as ein
+  from irs_exempt_organizations
+ where name ilike '%american%red%cross%'
+ union
+select legal_name as name, ein as ein
+  from organizations
+ where legal_name ilike '%american%red%cross%'
+) query;

# 2024-04-12 15:01:19.204298
+select ein from organizations limit 10;

# 2024-04-12 15:01:29.492447
+select ein from organizations where ein ilike '%-%';

# 2024-04-12 15:01:34.182610
+select count(*) from organizations where ein ilike '%-%';

# 2024-04-12 15:01:37.315765
+select count(*) from organizations where ein not ilike '%-%';

# 2024-04-12 15:02:43.928399
+select distinct on (ein) name, ein from
+(
+select name as name, ein as ein
+  from irs_exempt_organizations
+ where name ilike '%american%red%cross%'
+ union
+select legal_name as name, ein as ein
+  from organizations
+ where legal_name ilike '%american%red%cross%'
+) query;

# 2024-04-12 15:04:36.900129
+select count(*) from irs_exempt_organizations where ein ilike '%-%';

# 2024-04-12 15:04:40.146075
+select count(*) from irs_exempt_organizations where ein not ilike '%-%';

# 2024-04-12 15:37:28.211997
+select distinct on (ein) name, ein from
+(
+select name as name, ein as ein
+  from irs_exempt_organizations
+ where name ilike '%american%red%cross%'
+ union
+select legal_name as name, ein as ein
+  from organizations
+ where legal_name ilike '%american%red%cross%'
+) query;

# 2024-04-12 15:37:29.790364
+\e

# 2024-04-12 15:38:30.267135
+select distinct on (ein) name, ein from
+(
+select name as name, regexp_replace(ein, '-', '') as ein
+  from irs_exempt_organizations
+ where name ilike '%american%red%cross%'
+ union
+select legal_name as name, regexp_replace(ein, '-', '') as ein
+  from organizations
+ where legal_name ilike '%american%red%cross%'
+) query;

# 2024-04-12 15:43:17.070545
+\d irs_exempt_organizations

# 2024-04-12 15:43:23.244349
+\d organizations

# 2024-04-12 15:57:30.147687
+CREATE DATABASE freewill_dev_backup_04_12_24 WITH TEMPLATE freewill_dev;

# 2024-04-12 15:57:54.887379
+create table riley;

# 2024-04-12 15:57:58.027858
+create table riley
+;

# 2024-04-12 15:58:42.582863
+create table riley (name, ein);

# 2024-04-12 15:59:10.202891
+create table riley (id int primary key, name text, ein text);

# 2024-04-12 16:00:35.214139
+alter table riley add column name_vector tsvector;

# 2024-04-12 16:00:38.920887
+\d riley

# 2024-04-12 16:02:33.988638
+alter table riley drop column ein;

# 2024-04-12 16:03:28.174354
+insert into riley (id, name) values (1, 'american red cross'), (2, 'blah american red cross'), (3, 'american red cross blah'), (4, 'american blah red cross'));

# 2024-04-12 16:03:32.301908
+insert into riley (id, name) values (1, 'american red cross'), (2, 'blah american red cross'), (3, 'american red cross blah'), (4, 'american blah red cross');

# 2024-04-12 16:03:37.817288
+select * from riley;

# 2024-04-12 16:04:15.977440
+update riley set name_vector = name::tsvector;

# 2024-04-12 16:04:18.604959
+select * from riley;

# 2024-04-12 16:04:37.002477
+select 'american red cross blah'::tsvector;

# 2024-04-12 16:05:15.828796
+select * from riley where name_vector @@ 'american red cross'::tsquery;

# 2024-04-12 16:05:25.447552
+select * from riley where name_vector @@ 'american'::tsquery;

# 2024-04-12 16:05:31.479764
+select * from riley where name_vector @@ 'blah'::tsquery;

# 2024-04-12 16:05:35.242943
+select * from riley where name_vector @@ 'red cross'::tsquery;

# 2024-04-12 16:07:32.018495
+select * from riley where name_vector @@ plainto_tsquery('american red cross');

# 2024-04-12 16:07:54.227018
+select * from riley where to_tsvector(name) @@ plainto_tsquery('american red cross');

# 2024-04-12 16:09:17.186996
+1   select distinct on (ein) name, ein from
+  1  (
+  2  select name as name, regexp_replace(ein, '-', '') as ein
+  3    from irs_exempt_organizations
+  4   where to_tsvector(name) @@ plainto_tsquery('american red cross')
+  5   union
+  6  select legal_name as name, regexp_replace(ein, '-', '') as ein
+  7    from organizations
+  8   where to_tsvector(legal_name) @@ plainto_tsquery('american red cross')
+  9  ) query;
+~
+~
+
+;

# 2024-04-12 16:09:18.063180
+\e

# 2024-04-12 16:09:43.191117
+select distinct on (ein) name, ein from
+(
+  select name as name, regexp_replace(ein, '-', '') as ein
+    from irs_exempt_organizations
+   where to_tsvector(name) @@ plainto_tsquery('american red cross')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein
+    from organizations
+   where to_tsvector(legal_name) @@ plainto_tsquery('american red cross')
+) query;

# 2024-04-12 16:10:52.047809
+\e

# 2024-04-12 16:11:00.742501
+select distinct on (ein) name, ein from
+(
+  select name as name, regexp_replace(ein, '-', '') as ein
+    from irs_exempt_organizations
+   where to_tsvector(name) @@ plainto_tsquery('american red cross')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein
+    from organizations
+   where to_tsvector(legal_name) @@ plainto_tsquery('american red cross')
+) query
+ limit 20;

# 2024-04-12 16:12:00.078810
+update irs_exempt_organizations add column name_vector tsvector;

# 2024-04-12 16:12:07.113160
+alter table irs_exempt_organizations add column name_vector tsvector;

# 2024-04-12 16:12:26.704947
+update irs_exempt_organizations set name_vector = to_tsvector(name);

# 2024-04-12 16:13:10.872039
+alter table organizations add column legal_name_vector tsvector;

# 2024-04-12 16:13:42.023638
+update organizations set legal_name_vector = to_tsvector(legal_name);

# 2024-04-12 16:13:52.459782
+select legal_name_vector from organizations limit 10;

# 2024-04-12 16:15:00.033867
+select distinct on (ein) name, ein from
+ (
+ select name as name, regexp_replace(ein, '-', '') as ein
+   from irs_exempt_organizations
+  where name @@ plainto_tsquery('american red cross')
+  union
+ select legal_name as name, regexp_replace(ein, '-', '') as ein
+   from organizations
+  where legal_name @@ plainto_tsquery('american red cross')
+ ) query
+ limit 20;
+

# 2024-04-12 16:15:22.910135
+select distinct on (ein) name, ein from
+ (
+ select name as name, regexp_replace(ein, '-', '') as ein
+   from irs_exempt_organizations
+  where to_tsvector(name) @@ plainto_tsquery('american red cross')
+  union
+ select legal_name as name, regexp_replace(ein, '-', '') as ein
+   from organizations
+  where to_tsvector(legal_name) @@ plainto_tsquery('american red cross')
+ ) query
+ limit 20;
+

# 2024-04-12 16:15:42.891666
+select distinct on (ein) name, ein from
+ (
+ select name as name, regexp_replace(ein, '-', '') as ein
+   from irs_exempt_organizations
+  where name @@ plainto_tsquery('american red cross')
+  union
+ select legal_name as name, regexp_replace(ein, '-', '') as ein
+   from organizations
+  where legal_name @@ plainto_tsquery('american red cross')
+ ) query
+ limit 20;
+

# 2024-04-12 16:15:45.989046
+\e

# 2024-04-12 16:15:54.188448
+select distinct on (ein) name, ein from
+ (
+ select name as name, regexp_replace(ein, '-', '') as ein
+   from irs_exempt_organizations
+  where name @@ plainto_tsquery('red')
+  union
+ select legal_name as name, regexp_replace(ein, '-', '') as ein
+   from organizations
+  where legal_name @@ plainto_tsquery('red')
+ ) query
+ limit 20;

# 2024-04-12 16:17:45.219411
+select distinct on (ein) name, ein from
+ (
+ select name as name, regexp_replace(ein, '-', '') as ein
+   from irs_exempt_organizations
+  where name @@ plainto_tsquery('american red cross')
+  union
+ select legal_name as name, regexp_replace(ein, '-', '') as ein
+   from organizations
+  where legal_name @@ plainto_tsquery('american red cross')
+ ) query
+ limit 20;
+

# 2024-04-12 16:17:49.590840
+\e

# 2024-04-12 16:18:15.324573
+select distinct on (ein) name, ein, suggested from
+ (
+ select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+   from irs_exempt_organizations
+  where name @@ plainto_tsquery('american red cross')
+  union
+ select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+   from organizations
+  where legal_name @@ plainto_tsquery('american red cross')
+ ) query
+ limit 20;

# 2024-04-12 16:18:33.237814
+\e

# 2024-04-12 16:20:37.052361
+select distinct on (ein) name, ein, suggested from
+ (
+   select *
+     from
+   (
+     select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+       from irs_exempt_organizations
+      where name @@ plainto_tsquery('american red cross')
+      union
+     select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+       from organizations
+      where legal_name @@ plainto_tsquery('american red cross')
+   ) query_a
+   order by suggested desc
+ ) query_b
+ limit 20;

# 2024-04-12 16:20:43.644180
+\e

# 2024-04-12 16:21:07.060613
+-- select distinct on (ein) name, ein, suggested from
+-- (
+   select *
+     from
+   (
+     select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+       from irs_exempt_organizations
+      where name @@ plainto_tsquery('american red cross')
+      union
+     select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+       from organizations
+      where legal_name @@ plainto_tsquery('american red cross')
+   ) query_a
+   order by suggested desc;
+-- ) query_b
+--  limit 20;

# 2024-04-12 16:21:12.835179
+\e

# 2024-04-12 16:21:17.497948
+   select *
+     from
+   (
+     select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+       from irs_exempt_organizations
+      where name @@ plainto_tsquery('american red cross')
+      union
+     select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+       from organizations
+      where legal_name @@ plainto_tsquery('american red cross')
+   ) query_a
+   order by suggested desc;

# 2024-04-12 16:21:28.779571
+\e

# 2024-04-12 16:23:40.716768
+select distinct on (ein)
+       name,
+       ein,
+       suggested
+  from (
+         select name,
+                ein,
+                suggested
+           from (
+                  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+                    from irs_exempt_organizations
+                   where name @@ plainto_tsquery('american red cross')
+                   union
+                  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+                    from organizations
+                   where legal_name @@ plainto_tsquery('american red cross')
+                ) query_a
+          order by suggested desc
+       ) query_b
+ limit 20;

# 2024-04-12 16:23:48.601372
+\e

# 2024-04-12 16:24:05.463069
+select distinct on (ein, suggested)
+       name,
+       ein,
+       suggested
+  from (
+         select name,
+                ein,
+                suggested
+           from (
+                  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+                    from irs_exempt_organizations
+                   where name @@ plainto_tsquery('american red cross')
+                   union
+                  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+                    from organizations
+                   where legal_name @@ plainto_tsquery('american red cross')
+                ) query_a
+          order by suggested desc
+       ) query_b
+ order by suggested
+ limit 20;

# 2024-04-12 16:24:10.042415
+\e

# 2024-04-12 16:24:13.636738
+select distinct on (ein, suggested)
+       name,
+       ein,
+       suggested
+  from (
+         select name,
+                ein,
+                suggested
+           from (
+                  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+                    from irs_exempt_organizations
+                   where name @@ plainto_tsquery('american red cross')
+                   union
+                  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+                    from organizations
+                   where legal_name @@ plainto_tsquery('american red cross')
+                ) query_a
+          order by suggested desc
+       ) query_b
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:24:30.241070
+\e

# 2024-04-12 16:25:22.686483
+select name, ein, suggested
+  from (
+         select distinct on (ein)
+                name,
+                ein,
+                suggested
+           from (
+                  select name,
+                         ein,
+                         suggested
+                    from (
+                           select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+                             from irs_exempt_organizations
+                            where name @@ plainto_tsquery('american red cross')
+                            union
+                           select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+                             from organizations
+                            where legal_name @@ plainto_tsquery('american red cross')
+                         ) query_a
+                   order by suggested desc
+                ) query_b
+
+       )
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:25:25.190582
+\e

# 2024-04-12 16:25:29.855561
+select name, ein, suggested
+  from (
+         select distinct on (ein)
+                name,
+                ein,
+                suggested
+           from (
+                  select name,
+                         ein,
+                         suggested
+                    from (
+                           select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+                             from irs_exempt_organizations
+                            where name @@ plainto_tsquery('american red cross')
+                            union
+                           select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+                             from organizations
+                            where legal_name @@ plainto_tsquery('american red cross')
+                         ) query_a
+                   order by suggested desc
+                ) query_b
+
+       ) query_c
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:25:55.241707
+\e

# 2024-04-12 16:27:50.381128
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('american red cross')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('american red cross')
+),
+
+select name, ein, suggested
+  from (
+         select distinct on (ein)
+                name,
+                ein,
+                suggested
+           from (
+                  select name,
+                         ein,
+                         suggested
+                    from (
+                         ) query_a
+                   order by suggested desc
+                ) query_b
+
+       ) query_c
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:27:55.033275
+\e

# 2024-04-12 16:28:37.121602
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('american red cross')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('american red cross')
+   order by suggested desc
+)
+select * from matching_orgs;
+
+/*
+select name, ein, suggested
+  from (
+         select distinct on (ein)
+                name,
+                ein,
+                suggested
+           from (
+                  select name,
+                         ein,
+                         suggested
+                    from (
+                         ) query_a
+                   order by suggested desc
+                ) query_b
+
+       ) query_c
+ order by suggested desc
+ limit 20;
+ */
+ 

# 2024-04-12 16:28:45.672460
+\e

# 2024-04-12 16:30:05.103333
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('american red cross')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('american red cross')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:30:23.839400
+\e

# 2024-04-12 16:30:46.367979
+\explain analyze with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('american red cross')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('american red cross')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:30:52.950699
+explain analyze with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('american red cross')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('american red cross')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:32:15.047039
+\e

# 2024-04-12 16:32:27.280288
+explain analyze with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('red')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('red')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:33:00.381959
+\e

# 2024-04-12 16:33:06.157319
+explain analyze with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('r')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('r')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:33:12.622538
+\e

# 2024-04-12 16:33:22.879765
+explain analyze with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('national american red cross')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('national american red cross')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:34:07.642826
+select count(*) from organizations;

# 2024-04-12 16:34:23.229298
+select count(*) from irs_exempt_organizations;

# 2024-04-12 16:35:27.366120
+explain analyze with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('national american red cross')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('national american red cross')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:35:32.349366
+\e

# 2024-04-12 16:35:42.541234
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('e')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('e')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:36:02.053631
+\e

# 2024-04-12 16:36:30.215715
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('e')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('e')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  -- from unique_matching_orgs
+  from matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:36:36.396563
+\e

# 2024-04-12 16:36:59.485939
+with matching_orgs as (
+  /*
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('e')
+   union
+   */
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('e')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:37:01.562760
+\e

# 2024-04-12 16:37:13.571890
+with matching_orgs as (
+  /*
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('e')
+   union
+   */
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('e')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  -- from unique_matching_orgs
+  from matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:39:45.178373
+\e

# 2024-04-12 16:39:57.418823
+with matching_orgs as (
+  /*
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('e')
+   union
+   */
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('e')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  -- from unique_matching_orgs
+  from matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:41:05.609605
+select legal_name, ein from organizations order by ts_rank(legal_name_vector, planto_tsquery('e'));

# 2024-04-12 16:41:09.764708
+select legal_name, ein from organizations order by ts_rank(legal_name_vector, plainto_tsquery('e'));

# 2024-04-12 16:41:17.641241
+\e

# 2024-04-12 16:41:41.093193
+select legal_name, ein, ts_rank(legal_name_vector, plainto_tsquery('e')) from organizations order by ts_rank(legal_name_vector, plainto_tsquery('e'));

# 2024-04-12 16:44:24.458227
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('e')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('e')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  -- from unique_matching_orgs
+  from matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:44:29.193429
+\e

# 2024-04-12 16:44:35.438752
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('red')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('red')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  -- from unique_matching_orgs
+  from matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:44:39.505952
+\e

# 2024-04-12 16:44:45.260699
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('red')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('red')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:44:57.745540
+\e

# 2024-04-12 16:46:49.281428
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name_vector @@ plainto_tsquery('red')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name_vector @@ plainto_tsquery('red')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;

# 2024-04-12 16:48:37.366655
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name @@ plainto_tsquery('red')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name @@ plainto_tsquery('red')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;
+

# 2024-04-12 16:48:46.681114
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name_vector @@ plainto_tsquery('red')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name_vector @@ plainto_tsquery('red')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)                                                                                                        select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;
+

# 2024-04-12 16:48:55.258010
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where to_tsvector(name) @@ plainto_tsquery('red')
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where to_tsvector(legal_name) @@ plainto_tsquery('red')
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)                                                                                                        select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;
+

# 2024-04-12 16:49:44.773726
+/* takes 1.746s locally */
+
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name ilike '%red%'
+   union
+  select legal_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where legal_name ilike '%red%'
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs                                                                               order by suggested desc
+ limit 20;
+

# 2024-04-12 16:55:40.982013
+alter table organizations add column display_name_vector tsvector;

# 2024-04-12 16:55:55.749968
+update organizations set display_name_vector = to_tsvector(display_name);

# 2024-04-12 16:56:21.444860
+with matching_orgs as (
+  select name as name, regexp_replace(ein, '-', '') as ein, false as suggested
+    from irs_exempt_organizations
+   where name % 'red'
+   union
+  select display_name as name, regexp_replace(ein, '-', '') as ein, true as suggested
+    from organizations
+   where display_name % 'red'
+   order by suggested desc
+), unique_matching_orgs as (
+  select distinct on (ein)
+         name,
+         ein,
+         suggested
+    from matching_orgs
+)
+select name,
+       ein,
+       suggested
+  from unique_matching_orgs
+ order by suggested desc
+ limit 20;
+

# 2024-04-15 14:13:17.696625
+\timing

# 2024-04-15 14:30:55.041514
+WITH matching_orgs AS (
+  SELECT name AS name, regexp_replace(ein, '-', '') AS ein, FALSE AS suggested
+    FROM irs_exempt_organizations
+   WHERE name ilike '%red%'
+   UNION 
+  SELECT display_name AS name, regexp_replace(ein, '-', '') AS ein, TRUE AS suggested
+    FROM organizations
+   WHERE display_name ilike '%red%'
+   ORDER BY suggested, name DESC
+), unique_matching_orgs AS (
+  SELECT DISTINCT On (ein)
+         name,        
+         ein,         
+         suggested    
+    FROM matching_orgs
+)                     
+SELECT name,
+       ein,
+       suggested
+  FROM unique_matching_orgs
+ ORDER BY suggested, name DESC
+ LIMIT 20;

# 2024-04-15 14:32:14.259162
+WITH matching_orgs AS (
+  SELECT name AS name, regexp_replace(ein, '-', '') AS ein, FALSE AS suggested
+    FROM irs_exempt_organizations
+   WHERE name ilike '%red%'
+   UNION 
+  SELECT display_name AS name, regexp_replace(ein, '-', '') AS ein, TRUE AS suggested
+    FROM organizations
+   WHERE display_name ilike '%red%'
+   ORDER BY suggested DESC, name ASC
+), unique_matching_orgs AS (    
+  SELECT DISTINCT On (ein)      
+         name,                  
+         ein,         
+         suggested    
+    FROM matching_orgs
+)                     
+SELECT name,
+       ein,
+       suggested
+  FROM unique_matching_orgs
+ ORDER BY suggested DESC, name ASC
+ LIMIT 20;                    
+

# 2024-04-15 14:43:00.857786
+WITH orgs AS (
+  SELECT name AS name, 
+         regexp_replace(ein, '-', '') AS ein, 
+         FALSE AS suggested,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   UNION 
+  SELECT display_name AS name, 
+         regexp_replace(ein, '-', '') AS ein, 
+         TRUE AS suggested,
+         similarity(display_name, 'red') AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity 
+    FROM unique_orgs
+   ORDER BY similarity
+   LIMIT 20
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC
+;

# 2024-04-15 14:43:30.650266
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   UNION 
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         similarity(display_name, 'red') AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity 
+    FROM unique_orgs
+   ORDER BY similarity
+   LIMIT 20
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 14:44:08.687884
+select name from irs_exempt_organizations order by similarity(name, 'red') limit 20;

# 2024-04-15 14:44:31.712980
+similarity('ccrn', 'red')
+;

# 2024-04-15 14:44:37.520316
+select similarity('ccrn', 'red');

# 2024-04-15 14:44:46.314041
+select name from irs_exempt_organizations order by similarity(name, 'red') desc limit 20;

# 2024-04-15 14:45:04.140536
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   UNION 
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         similarity(display_name, 'red') AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity 
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20           
+)                     
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 14:45:24.663657
+\e

# 2024-04-15 14:45:28.170381
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   UNION 
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         similarity(display_name, 'red') AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity 
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20           
+)                     
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 14:45:29.327288
+\e

# 2024-04-15 14:45:35.148049
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         similarity(display_name, 'red') AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20
+)
+SELECT name,
+       ein,
+       suggested,
+       similarity
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 14:46:15.893101
+select display_name, similarity(display_name, 'red') from organizations order by similarity(display_name, 'red') desc limit 20;

# 2024-04-15 14:46:43.565976
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         word_similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   UNION 
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         word_similarity(display_name, 'red') AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity 
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20           
+)                     
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 14:50:05.965668
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   UNION 
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         similarity(display_name, 'red') AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity 
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20           
+)                     
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 14:50:07.825081
+\e

# 2024-04-15 14:50:13.647265
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         similarity(display_name, 'red') AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 50
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 14:53:56.285077
+select ts_rank_cd(to_tsvector('national american red cross'), plainto_tsquery('red'));

# 2024-04-15 14:54:50.304880
+select display_name, ts_rank_cd(to_tsvector(display_name), plainto_tsquery('red')) from organizations order by (ts_rank_cd(to_tsvector(display_name), plainto_tsquery('red'))) limit 20;

# 2024-04-15 14:54:58.104344
+select display_name, ts_rank_cd(to_tsvector(display_name), plainto_tsquery('red')) from organizations order by (ts_rank_cd(to_tsvector(display_name), plainto_tsquery('red'))) desc limit 20;

# 2024-04-15 14:55:15.319709
+select display_name, ts_rank(to_tsvector(display_name), plainto_tsquery('red')) from organizations order by (ts_rank(to_tsvector(display_name), plainto_tsquery('red'))) desc limit 20;

# 2024-04-15 14:58:06.709493
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested
+         ts_rank(name_vector, plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   UNION                     
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(display_name_vector, plainto_tsquery('red')) AS similarity
+    FROM organizations               
+   ORDER BY suggested DESC           
+), unique_orgs AS (                  
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 14:58:23.788315
+select display_name, ts_rank(to_tsvector(display_name), plainto_tsquery('red')) from organizations order by (ts_rank(to_tsvector(display_name), plainto_tsquery('red'))) desc limit 20;

# 2024-04-15 14:58:25.980038
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested
+         ts_rank(name_vector, plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   UNION                     
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(display_name_vector, plainto_tsquery('red')) AS similarity
+    FROM organizations               
+   ORDER BY suggested DESC           
+), unique_orgs AS (                  
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 14:58:37.978871
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(name_vector, plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   UNION                     
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(display_name_vector, plainto_tsquery('red')) AS similarity
+    FROM organizations               
+   ORDER BY suggested DESC           
+), unique_orgs AS (                  
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 14:58:51.671722
+\e

# 2024-04-15 14:59:01.992289
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(name_vector, plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(display_name_vector, plainto_tsquery('red')) AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20
+)
+SELECT name,
+       ein,
+       suggested,
+       similarity
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 14:59:30.452063
+select display_name, ts_rank(to_tsvector(display_name), plainto_tsquery('red')) from organizations order by (ts_rank(to_tsvector(display_name), plainto_tsquery('red'))) desc limit 20;

# 2024-04-15 14:59:35.221337
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(name_vector, plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(display_name_vector, plainto_tsquery('red')) AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20
+)
+SELECT name,
+       ein,
+       suggested,
+       similarity
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 14:59:55.407214
+\e

# 2024-04-15 15:00:09.400433
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(name_vector, plainto_tsquery('e')) AS similarity
+    FROM irs_exempt_organizations
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(display_name_vector, plainto_tsquery('e')) AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20
+)
+SELECT name,
+       ein,
+       suggested,
+       similarity
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 15:02:54.189372
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   UNION 
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity 
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 15:04:41.079800
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(to_tsvector(name), plainto_tsquery('e')) AS similarity
+    FROM irs_exempt_organizations
+   UNION 
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('e')) AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity 
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 20
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 16:14:05.140809
+select display_name from organizations;

# 2024-04-15 16:17:36.098444
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   WHERE name % 'red'
+   UNION        
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         similarity(display_name, 'red') AS similarity
+    FROM organizations
+   WHERE display_name % 'red'
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity 
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 16:17:42.923677
+\e

# 2024-04-15 16:17:46.877382
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         similarity(display_name, 'red') AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 16:21:55.075060
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE ts_rank(to_tsvector(name), plainto_tsquery('red')) > 0
+   UNION 
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM organizations
+   WHERE ts_rank(to_tsvector(display_name), plainto_tsquery('red')) > 0
+   ORDER BY suggested DESC  
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 16:22:02.916669
+\e

# 2024-04-15 16:22:06.953622
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM organizations
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 16:25:22.907125
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%red%'
+   UNION 
+  SELECT display_name AS name, regexp_replace(ein, '-', '') AS ein, TRUE AS suggested
+    FROM organizations
+   WHERE display_name ILIKE '%red%'
+   ORDER BY suggested DESC, name ASC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)  
+         name, 
+         ein,
+         suggested
+    FROM matching_orgs
+)        
+SELECT name,
+       ein,
+       suggested
+  FROM unique_matching_orgs
+ ORDER BY suggested DESC, name ASC
+ LIMIT 10;
+

# 2024-04-15 16:25:31.844574
+\e

# 2024-04-15 16:25:41.086416
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%e%'
+   UNION
+  SELECT display_name AS name, regexp_replace(ein, '-', '') AS ein, TRUE AS suggested
+    FROM organizations
+   WHERE display_name ILIKE '%e%'
+   ORDER BY suggested DESC, name ASC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested
+    FROM matching_orgs
+)
+SELECT name,
+       ein,
+       suggested
+  FROM unique_matching_orgs
+ ORDER BY suggested DESC, name ASC
+ LIMIT 10;

# 2024-04-15 16:41:40.763501
+WITH orgs AS (                                                  
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE ts_rank(to_tsvector(name), plainto_tsquery('red')) > 0
+   UNION 
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM organizations
+   WHERE ts_rank(to_tsvector(display_name), plainto_tsquery('red')) > 0
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;
+

# 2024-04-15 16:42:36.727529
+\e

# 2024-04-15 16:43:00.390293
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(to_tsvector(name), plainto_tsquery('american red cross')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE ts_rank(to_tsvector(name), plainto_tsquery('american red cross')) > 0
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('american red cross')) AS similarity
+    FROM organizations
+   WHERE ts_rank(to_tsvector(display_name), plainto_tsquery('american red cross')) > 0
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 16:43:22.967838
+\e

# 2024-04-15 16:44:21.292457
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(to_tsvector(name), plainto_tsquery('american red cross')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('american red cross')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('american red cross')) AS similarity
+    FROM organizations
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('american red cross')
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 16:44:27.111127
+ \e

# 2024-04-15 16:44:35.133031
+WITH orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(to_tsvector(name), plainto_tsquery('american red cross')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('american red cross')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('american red cross')) AS similarity
+    FROM organizations
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('american red cross')
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 16:44:46.078195
+\e

# 2024-04-15 16:53:53.424803
+WITH irs_vectors AS (
+  SELECT name AS name
+         to_tsvector(name) AS name_vector,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         plainto_tsquery('american red cross') AS irs_tsquery
+    FROM irs_exempt_organizations
+), org_vectors AS (
+  SELECT display_name AS display_name,
+         to_tsvector(display_name) as display_name_vector,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE as suggested,
+         plainto_tsquery('american red cross') AS org_tsquery
+    FROM organizations
+), orgs AS (
+  SELECT name AS name,
+         ein AS ein,
+         FALSE AS suggested,
+         ts_rank(name_vector, irs_tsquery) AS similarity
+    FROM irs_vectors
+   WHERE name_vector @@ irs_tsquery
+   UNION
+  SELECT display_name AS name,
+         ein AS ein
+         TRUE AS suggested,
+         ts_rank(display_name_vector, org_tsquery) AS similarity
+    FROM organizations
+   WHERE display_name_vector @@ org_tsquery
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 16:53:57.896291
+\e

# 2024-04-15 16:54:02.840500
+WITH irs_vectors AS (
+  SELECT name AS name,
+         to_tsvector(name) AS name_vector,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         plainto_tsquery('american red cross') AS irs_tsquery
+    FROM irs_exempt_organizations
+), org_vectors AS (
+  SELECT display_name AS display_name,
+         to_tsvector(display_name) as display_name_vector,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE as suggested,
+         plainto_tsquery('american red cross') AS org_tsquery
+    FROM organizations
+), orgs AS (
+  SELECT name AS name,
+         ein AS ein,
+         FALSE AS suggested,
+         ts_rank(name_vector, irs_tsquery) AS similarity
+    FROM irs_vectors
+   WHERE name_vector @@ irs_tsquery
+   UNION
+  SELECT display_name AS name,
+         ein AS ein
+         TRUE AS suggested,
+         ts_rank(display_name_vector, org_tsquery) AS similarity
+    FROM organizations
+   WHERE display_name_vector @@ org_tsquery
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 16:54:04.352383
+\e

# 2024-04-15 16:54:31.266972
+WITH irs_vectors AS (
+  SELECT name AS name,
+         to_tsvector(name) AS name_vector,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         plainto_tsquery('american red cross') AS irs_tsquery
+    FROM irs_exempt_organizations
+), org_vectors AS (
+  SELECT display_name AS display_name,
+         to_tsvector(display_name) AS display_name_vector,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         plainto_tsquery('american red cross') AS org_tsquery
+    FROM organizations
+), orgs AS (
+  SELECT name AS name,
+         ein AS ein,
+         FALSE AS suggested,
+         ts_rank(name_vector, irs_tsquery) AS similarity
+    FROM irs_vectors
+   WHERE name_vector @@ irs_tsquery
+   UNION
+  SELECT display_name AS name,
+         ein AS ein
+         TRUE AS suggested,
+         ts_rank(display_name_vector, org_tsquery) AS similarity
+    FROM org_vectors
+   WHERE display_name_vector @@ org_tsquery
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 16:54:32.998845
+\e

# 2024-04-15 16:54:52.873391
+WITH irs_vectors AS (
+  SELECT name AS name,
+         to_tsvector(name) AS name_vector,
+         regexp_replace(ein, '-', '') AS ein,
+         plainto_tsquery('american red cross') AS irs_tsquery
+    FROM irs_exempt_organizations
+), org_vectors AS (
+  SELECT display_name AS display_name,
+         to_tsvector(display_name) AS display_name_vector,
+         regexp_replace(ein, '-', '') AS ein,
+         plainto_tsquery('american red cross') AS org_tsquery
+    FROM organizations
+), orgs AS (
+  SELECT name AS name,
+         ein AS ein,
+         FALSE AS suggested,
+         ts_rank(name_vector, irs_tsquery) AS similarity
+    FROM irs_vectors
+   WHERE name_vector @@ irs_tsquery
+   UNION
+  SELECT display_name AS name,
+         ein AS ein,
+         TRUE AS suggested,
+         ts_rank(display_name_vector, org_tsquery) AS similarity
+    FROM org_vectors
+   WHERE display_name_vector @@ org_tsquery
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 16:54:59.382811
+\e

# 2024-04-15 16:55:36.305492
+WITH irs_vectors AS (
+  SELECT name AS name,
+         to_tsvector(name) AS name_vector,
+         regexp_replace(ein, '-', '') AS ein,
+         plainto_tsquery('american red cross') AS irs_tsquery
+    FROM irs_exempt_organizations
+), org_vectors AS (
+  SELECT display_name AS display_name,
+         to_tsvector(display_name) AS display_name_vector,
+         regexp_replace(ein, '-', '') AS ein,
+         plainto_tsquery('american red cross') AS org_tsquery
+    FROM organizations
+), orgs AS (
+  SELECT name AS name,
+         ein AS ein,
+         FALSE AS suggested,
+         ts_rank(name_vector, irs_tsquery) AS similarity
+    FROM irs_vectors
+   WHERE name_vector @@ irs_tsquery
+   UNION
+  SELECT display_name AS name,
+         ein AS ein,
+         TRUE AS suggested,
+         ts_rank(display_name_vector, org_tsquery) AS similarity
+    FROM org_vectors
+   WHERE display_name_vector @@ org_tsquery
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-15 16:59:40.394221
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%red%'
+   UNION 
+  SELECT display_name AS name, regexp_replace(ein, '-', '') AS ein, TRUE AS suggested
+    FROM organizations
+   WHERE display_name ILIKE '%red%'
+   ORDER BY suggested DESC, name ASC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name, 
+         ein,
+         suggested
+    FROM matching_orgs
+)        
+SELECT name,
+       ein,
+       suggested
+  FROM unique_matching_orgs
+ ORDER BY suggested DESC, name ASC
+ LIMIT 10;
+

# 2024-04-15 16:59:41.768807
+\e

# 2024-04-15 16:59:49.353830
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%e%'
+   UNION
+  SELECT display_name AS name, regexp_replace(ein, '-', '') AS ein, TRUE AS suggested
+    FROM organizations
+   WHERE display_name ILIKE '%e%'
+   ORDER BY suggested DESC, name ASC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested
+    FROM matching_orgs
+)
+SELECT name,
+       ein,
+       suggested
+  FROM unique_matching_orgs
+ ORDER BY suggested DESC, name ASC
+ LIMIT 10;

# 2024-04-16 13:18:20.584596
+INSERT INTO public.organizations (id, rand_id, ein, address, created_at, updated_at, is_ministry_customer, description, old_id, deprecated, address_1, address_2, city, state, postal, products, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, is_fake, cause_area, legal_name, display_name, has_bequest_gift_intent, donor_search_id, identity_phrase, allowed_domains, show_public_programs_after_partner_gift, gender_input_style, country, ntee_family, updated_source, categories, show_preferred_pronouns_input, organization_size, billing_contact_email, logo_is_hidden_for_featureships, vendor_id, feature_background_image, feature_logo, donor_search_id_expires_at, chariot_connect_id) VALUES (2420, 's91TUvhy', '91-1250104', 'PO Box 603, Walla Walla, WA 99362', '2024-04-01 16:43:47.601000', '2024-04-06 14:18:09.539000', false, '<p><br></p>', null, null, 'PO Box 603', '', 'Walla Walla', 'WA', '99362               ', '{"has_daf": "never", "has_qcd": "never", "has_will": "current", "has_crypto": "never", "has_stock_gift": "never", "has_beneficiaries": "current", "has_outside_bequest": "current", "has_ren_pilot_enabled": "never"}', '', '', '', '', '', '', '', '', null, '', '', '', null, '', false, null, 'Blue Mountain Community Foundation', 'Blue Mountain Community Foundation', false, '', '', '["bluemountainfoundation.org"]', true, null, 'US', 'Philanthropy, Voluntarism & Grantmaking Foundations', 'admin', '[]', false, 'Emerging', '', false, null, '', '', null, null);

# 2024-04-16 13:18:22.259498
+\e

# 2024-04-16 13:18:40.131521
+select rand_id from
+    organizations where ein = '91-1250104';

# 2024-04-16 13:18:57.833510
+
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21151, 'mhwAqktq', 's91TUvhy', null, null, '2024-04-11 12:47:13.826000', '2024-04-11 12:47:13.826000', '', '[]', null, false, '[""]', 'pfxrXavU', 5, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Milton-Freewater Athena Weston Forever Fund', 'Milton-Freewater Athena Weston Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21152, 'iE2Vbycq', 's91TUvhy', null, null, '2024-04-11 12:47:36.432000', '2024-04-11 12:47:36.432000', '', '[]', null, false, '[""]', 'pfxrXavU', 6, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Walla Walla County Forever Fund', 'Walla Walla County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21050, 'pfxrXavU', 's91TUvhy', null, null, '2024-04-08 14:05:00.602000', '2024-04-08 14:05:00.602000', '', '[]', null, true, '[""]', null, 0, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Blue Mountain Community Foundation', 'Blue Mountain Community Foundation', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21146, 'YxKjDSbx', 's91TUvhy', null, null, '2024-04-11 12:45:30.317000', '2024-04-11 12:45:30.317000', '', '[]', null, false, '[""]', 'pfxrXavU', 0, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Columbia County Forever Fund', 'Columbia County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21147, 'XIUxtpG2', 's91TUvhy', null, null, '2024-04-11 12:45:52.743000', '2024-04-11 12:45:52.743000', '', '[]', null, false, '[""]', 'pfxrXavU', 1, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Columbia County LaunchNW Scholarship Fund', 'Columbia County LaunchNW Scholarship Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21150, 'PQ6avjTF', 's91TUvhy', null, null, '2024-04-11 12:46:56.505000', '2024-04-11 12:46:56.505000', '', '[]', null, false, '[""]', 'pfxrXavU', 4, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Greater Hermiston Forever Fund', 'Greater Hermiston Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21148, 'j9bFlQMS', 's91TUvhy', null, null, '2024-04-11 12:46:10.726000', '2024-04-11 12:46:10.726000', '', '[]', null, false, '[""]', 'pfxrXavU', 2, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Garfield County Forever Fund', 'Garfield County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21149, 'or0ZHnSl', 's91TUvhy', null, null, '2024-04-11 12:46:34.210000', '2024-04-11 12:46:34.210000', '', '[]', null, false, '[""]', 'pfxrXavU', 3, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Garfield County LaunchNW Scholarship Fund', 'Garfield County LaunchNW Scholarship Fund', false, 'none', null, null, null, null, null, null);

# 2024-04-16 13:18:59.176699
+\e

# 2024-04-16 13:19:43.494328
+
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21151, 'mhwAqktq', 'd0tBrBBA', null, null, '2024-04-11 12:47:13.826000', '2024-04-11 12:47:13.826000', '', '[]', null, false, '[""]', 'pfxrXavU', 5, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Milton-Freewater Athena Weston Forever Fund', 'Milton-Freewater Athena Weston Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21152, 'iE2Vbycq', 'd0tBrBBA', null, null, '2024-04-11 12:47:36.432000', '2024-04-11 12:47:36.432000', '', '[]', null, false, '[""]', 'pfxrXavU', 6, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Walla Walla County Forever Fund', 'Walla Walla County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21050, 'pfxrXavU', 'd0tBrBBA', null, null, '2024-04-08 14:05:00.602000', '2024-04-08 14:05:00.602000', '', '[]', null, true, '[""]', null, 0, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Blue Mountain Community Foundation', 'Blue Mountain Community Foundation', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21146, 'YxKjDSbx', 'd0tBrBBA', null, null, '2024-04-11 12:45:30.317000', '2024-04-11 12:45:30.317000', '', '[]', null, false, '[""]', 'pfxrXavU', 0, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Columbia County Forever Fund', 'Columbia County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21147, 'XIUxtpG2', 'd0tBrBBA', null, null, '2024-04-11 12:45:52.743000', '2024-04-11 12:45:52.743000', '', '[]', null, false, '[""]', 'pfxrXavU', 1, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Columbia County LaunchNW Scholarship Fund', 'Columbia County LaunchNW Scholarship Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21150, 'PQ6avjTF', 'd0tBrBBA', null, null, '2024-04-11 12:46:56.505000', '2024-04-11 12:46:56.505000', '', '[]', null, false, '[""]', 'pfxrXavU', 4, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Greater Hermiston Forever Fund', 'Greater Hermiston Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21148, 'j9bFlQMS', 'd0tBrBBA', null, null, '2024-04-11 12:46:10.726000', '2024-04-11 12:46:10.726000', '', '[]', null, false, '[""]', 'pfxrXavU', 2, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Garfield County Forever Fund', 'Garfield County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21149, 'or0ZHnSl', 'd0tBrBBA', null, null, '2024-04-11 12:46:34.210000', '2024-04-11 12:46:34.210000', '', '[]', null, false, '[""]', 'pfxrXavU', 3, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Garfield County LaunchNW Scholarship Fund', 'Garfield County LaunchNW Scholarship Fund', false, 'none', null, null, null, null, null, null);

# 2024-04-16 13:32:37.206367
+\q

# 2024-04-16 13:32:52.872995
+INSERT INTO public.organizations (id, rand_id, ein, address, created_at, updated_at, is_ministry_customer, description, old_id, deprecated, address_1, address_2, city, state, postal, products, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, is_fake, cause_area, legal_name, display_name, has_bequest_gift_intent, donor_search_id, identity_phrase, allowed_domains, show_public_programs_after_partner_gift, gender_input_style, country, ntee_family, updated_source, categories, show_preferred_pronouns_input, organization_size, billing_contact_email, logo_is_hidden_for_featureships, vendor_id, feature_background_image, feature_logo, donor_search_id_expires_at, chariot_connect_id) VALUES (2420, 's91TUvhy', '91-1250104', 'PO Box 603, Walla Walla, WA 99362', '2024-04-01 16:43:47.601000', '2024-04-06 14:18:09.539000', false, '<p><br></p>', null, null, 'PO Box 603', '', 'Walla Walla', 'WA', '99362               ', '{"has_daf": "never", "has_qcd": "never", "has_will": "current", "has_crypto": "never", "has_stock_gift": "never", "has_beneficiaries": "current", "has_outside_bequest": "current", "has_ren_pilot_enabled": "never"}', '', '', '', '', '', '', '', '', null, '', '', '', null, '', false, null, 'Blue Mountain Community Foundation', 'Blue Mountain Community Foundation', false, '', '', '["bluemountainfoundation.org"]', true, null, 'US', 'Philanthropy, Voluntarism & Grantmaking Foundations', 'admin', '[]', false, 'Emerging', '', false, null, '', '', null, null);

# 2024-04-16 13:32:58.666156
+select rand_id from
+    organizations where ein = '91-1250104';

# 2024-04-16 13:33:14.065863
+
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21151, 'mhwAqktq', 's91TUvhy', null, null, '2024-04-11 12:47:13.826000', '2024-04-11 12:47:13.826000', '', '[]', null, false, '[""]', 'pfxrXavU', 5, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Milton-Freewater Athena Weston Forever Fund', 'Milton-Freewater Athena Weston Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21152, 'iE2Vbycq', 's91TUvhy', null, null, '2024-04-11 12:47:36.432000', '2024-04-11 12:47:36.432000', '', '[]', null, false, '[""]', 'pfxrXavU', 6, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Walla Walla County Forever Fund', 'Walla Walla County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21050, 'pfxrXavU', 's91TUvhy', null, null, '2024-04-08 14:05:00.602000', '2024-04-08 14:05:00.602000', '', '[]', null, true, '[""]', null, 0, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Blue Mountain Community Foundation', 'Blue Mountain Community Foundation', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21146, 'YxKjDSbx', 's91TUvhy', null, null, '2024-04-11 12:45:30.317000', '2024-04-11 12:45:30.317000', '', '[]', null, false, '[""]', 'pfxrXavU', 0, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Columbia County Forever Fund', 'Columbia County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21147, 'XIUxtpG2', 's91TUvhy', null, null, '2024-04-11 12:45:52.743000', '2024-04-11 12:45:52.743000', '', '[]', null, false, '[""]', 'pfxrXavU', 1, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Columbia County LaunchNW Scholarship Fund', 'Columbia County LaunchNW Scholarship Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21150, 'PQ6avjTF', 's91TUvhy', null, null, '2024-04-11 12:46:56.505000', '2024-04-11 12:46:56.505000', '', '[]', null, false, '[""]', 'pfxrXavU', 4, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Greater Hermiston Forever Fund', 'Greater Hermiston Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21148, 'j9bFlQMS', 's91TUvhy', null, null, '2024-04-11 12:46:10.726000', '2024-04-11 12:46:10.726000', '', '[]', null, false, '[""]', 'pfxrXavU', 2, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Garfield County Forever Fund', 'Garfield County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21149, 'or0ZHnSl', 's91TUvhy', null, null, '2024-04-11 12:46:34.210000', '2024-04-11 12:46:34.210000', '', '[]', null, false, '[""]', 'pfxrXavU', 3, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Garfield County LaunchNW Scholarship Fund', 'Garfield County LaunchNW Scholarship Fund', false, 'none', null, null, null, null, null, null);

# 2024-04-16 13:33:15.022528
+\e

# 2024-04-16 13:33:39.405226
+
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21151, 'mhwAqktq', 'eZ3dRmFa', null, null, '2024-04-11 12:47:13.826000', '2024-04-11 12:47:13.826000', '', '[]', null, false, '[""]', 'pfxrXavU', 5, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Milton-Freewater Athena Weston Forever Fund', 'Milton-Freewater Athena Weston Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21152, 'iE2Vbycq', 'eZ3dRmFa', null, null, '2024-04-11 12:47:36.432000', '2024-04-11 12:47:36.432000', '', '[]', null, false, '[""]', 'pfxrXavU', 6, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Walla Walla County Forever Fund', 'Walla Walla County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21050, 'pfxrXavU', 'eZ3dRmFa', null, null, '2024-04-08 14:05:00.602000', '2024-04-08 14:05:00.602000', '', '[]', null, true, '[""]', null, 0, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Blue Mountain Community Foundation', 'Blue Mountain Community Foundation', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21146, 'YxKjDSbx', 'eZ3dRmFa', null, null, '2024-04-11 12:45:30.317000', '2024-04-11 12:45:30.317000', '', '[]', null, false, '[""]', 'pfxrXavU', 0, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Columbia County Forever Fund', 'Columbia County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21147, 'XIUxtpG2', 'eZ3dRmFa', null, null, '2024-04-11 12:45:52.743000', '2024-04-11 12:45:52.743000', '', '[]', null, false, '[""]', 'pfxrXavU', 1, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Columbia County LaunchNW Scholarship Fund', 'Columbia County LaunchNW Scholarship Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21150, 'PQ6avjTF', 'eZ3dRmFa', null, null, '2024-04-11 12:46:56.505000', '2024-04-11 12:46:56.505000', '', '[]', null, false, '[""]', 'pfxrXavU', 4, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Greater Hermiston Forever Fund', 'Greater Hermiston Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21148, 'j9bFlQMS', 'eZ3dRmFa', null, null, '2024-04-11 12:46:10.726000', '2024-04-11 12:46:10.726000', '', '[]', null, false, '[""]', 'pfxrXavU', 2, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Garfield County Forever Fund', 'Garfield County Forever Fund', false, 'none', null, null, null, null, null, null);
+INSERT INTO public.programs (id, rand_id, organization_id, ein, address, created_at, updated_at, description, states, locality, show_publicly, associated_zip_codes, parent_program_id, display_order, is_split, old_sub_program_id, old_id, address_1, address_2, city, state, postal, products, category, brokerage_dtc_number, brokerage_name, brokerage_account_number, brokerage_account_name, contact_name, brokerage_contact_name, brokerage_contact_phone_number, contact_phone_number, brokerage_financial_institution_id, brokerage_address_1, brokerage_address_2, brokerage_city, brokerage_state, brokerage_postal, legal_name, display_name, is_description_enabled, endowment_type_v2, vendor_id, liquidation_fee_value, liquidation_fee_type, feature_background_image, feature_logo, chariot_connect_id) VALUES (21149, 'or0ZHnSl', 'eZ3dRmFa', null, null, '2024-04-11 12:46:34.210000', '2024-04-11 12:46:34.210000', '', '[]', null, false, '[""]', 'pfxrXavU', 3, null, null, null, null, null, null, null, '                    ', '{"has_daf": false, "has_qcd": false, "has_will": true, "has_stock_gift": false}', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'Garfield County LaunchNW Scholarship Fund', 'Garfield County LaunchNW Scholarship Fund', false, 'none', null, null, null, null, null, null);

# 2024-04-16 13:33:44.254234
+\q

# 2024-04-17 13:28:39.389247
+select count(*) from programs;

# 2024-04-17 13:28:44.246286
+select count(*) from organizations;

# 2024-04-17 13:28:54.645688
+\d programs

# 2024-04-17 13:28:58.738717
+select * from programs;

# 2024-04-19 12:41:40.427480
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%{USER_PROVIDED_STRING}%'
+   UNION 
+  SELECT display_name AS name, regexp_replace(ein, '-', '') AS ein, TRUE AS suggested
+    FROM programs
+   WHERE display_name ILIKE '%{USER_PROVIDED_STRING}%'
+   ORDER BY suggested DESC, name ASC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name, 
+         ein,
+         suggested
+    FROM matching_orgs
+)        
+SELECT name,
+       ein,
+       suggested
+  FROM unique_matching_orgs
+ ORDER BY suggested DESC, name ASC
+ LIMIT 10;

# 2024-04-19 12:41:45.617852
+\e

# 2024-04-19 12:44:40.916546
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%red%'
+   UNION
+  SELECT display_name AS name, regexp_replace(ein, '-', '') AS ein, TRUE AS suggested, show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%red%'
+   ORDER BY suggested DESC, show_publicly DESC, name ASC;

# 2024-04-19 12:44:42.250830
+\e

# 2024-04-19 12:45:06.752879
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         FALSE AS show_publicly
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%red%'
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%red%'
+   ORDER BY suggested DESC, show_publicly DESC, name ASC;

# 2024-04-19 12:45:13.361845
+\e

# 2024-04-19 12:45:19.855371
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%red%'
+   ORDER BY suggested DESC, show_publicly DESC, name ASC;

# 2024-04-19 12:45:35.528612
+\e

# 2024-04-19 12:45:43.107677
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%red%'
+   ORDER BY suggested DESC, show_publicly ASC, name ASC;

# 2024-04-19 12:45:47.034811
+\e

# 2024-04-19 12:46:57.575388
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%e%'
+   ORDER BY suggested DESC, show_publicly ASC, name ASC;

# 2024-04-19 12:47:20.994365
+\e

# 2024-04-19 12:47:53.628873
+select display_name, show_publicly from organizations order by show_publicly;

# 2024-04-19 12:48:13.109424
+select display_name, show_publicly from programs order by show_publicly;

# 2024-04-19 12:48:28.068023
+select display_name, distinct show_publicly from programs order by show_publicly;

# 2024-04-19 12:48:34.900623
+select distinct show_publicly from programs;

# 2024-04-19 12:48:40.492694
+select distinct show_publicly from programs order by show_publicly;;

# 2024-04-19 12:48:45.493427
+select distinct show_publicly from programs order by show_publicly desc;

# 2024-04-19 12:49:02.796144
+select count(*), show_publicly from programs group by show_publicly order by show_publicly desc;

# 2024-04-19 12:49:09.029412
+select count(*), show_publicly from programs group by show_publicly order by show_publicly asc;

# 2024-04-19 12:49:11.340879
+select count(*), show_publicly from programs group by show_publicly order by show_publicly desc;

# 2024-04-19 12:54:01.750399
+select count(*), show_publicly from programs group by show_publicly order by show_publicly desc nulls last;

# 2024-04-19 12:54:15.125150
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%{USER_PROVIDED_STRING}%'
+   UNION 
+  SELECT display_name AS name, regexp_replace(ein, '-', '') AS ein, TRUE AS suggested
+    FROM programs
+   WHERE display_name ILIKE '%{USER_PROVIDED_STRING}%'
+   ORDER BY suggested DESC, name ASC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name, 
+         ein,
+         suggested
+    FROM matching_orgs
+)        
+SELECT name,
+       ein,
+       suggested
+  FROM unique_matching_orgs
+ ORDER BY suggested DESC, name ASC
+ LIMIT 10;

# 2024-04-19 12:54:16.484145
+\e

# 2024-04-19 12:54:50.664063
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL as show_publicly
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%{USER_PROVIDED_STRING}%'
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%{USER_PROVIDED_STRING}%'
+   ORDER BY suggested DESC, show_publicly DESC NULLS LAST, name ASC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested
+    FROM matching_orgs
+)
+SELECT name,
+       ein,
+       suggested
+  FROM unique_matching_orgs
+ ORDER BY suggested DESC, name ASC
+ LIMIT 10;

# 2024-04-19 12:54:53.765105
+\e

# 2024-04-19 12:55:08.799780
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL as show_publicly
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%red%'
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%red%'
+   ORDER BY suggested DESC, show_publicly DESC NULLS LAST, name ASC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested
+    FROM matching_orgs
+)
+SELECT name,
+       ein,
+       suggested
+  FROM unique_matching_orgs
+ ORDER BY suggested DESC, name ASC
+ LIMIT 10;

# 2024-04-19 12:55:22.404236
+\e

# 2024-04-19 12:55:30.504223
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL as show_publicly
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%red%'
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%red%'
+   ORDER BY suggested DESC, show_publicly DESC NULLS LAST, name ASC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly
+    FROM matching_orgs
+)
+SELECT name,
+       ein,
+       suggested,
+       show_publicly
+  FROM unique_matching_orgs
+ ORDER BY suggested DESC, name ASC
+ LIMIT 10;

# 2024-04-19 12:55:58.870893
+\e

# 2024-04-19 12:56:52.359466
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL as show_publicly
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%red%'
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%red%'
+   ORDER BY suggested DESC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly
+    FROM matching_orgs
+)
+SELECT name,
+       ein,
+       suggested,
+       show_publicly
+  FROM unique_matching_orgs
+ ORDER BY suggested DESC, show_publicly DESC NULLS LAST, name ASC
+ LIMIT 10;

# 2024-04-19 12:57:18.573889
+\e

# 2024-04-19 12:59:36.060654
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         similarity(name, '{USER_PROVIDED_STRING}') AS similarity
+    FROM irs_exempt_organizations
+   WHERE similarity(name, '{USER_PROVIDED_STRING}') > 0.3
+   UNION 
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         similarity(display_name, '{USER_PROVIDED_STRING}') AS similarity
+    FROM programs   
+   WHERE similarity(display_name, '{USER_PROVIDED_STRING}') > 0.3
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-19 12:59:39.138907
+\e

# 2024-04-19 13:01:22.268484
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         similarity(name, '{USER_PROVIDED_STRING}') AS similarity
+    FROM irs_exempt_organizations
+   WHERE similarity(name, '{USER_PROVIDED_STRING}') > 0.3
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         similarity(display_name, '{USER_PROVIDED_STRING}') AS similarity
+    FROM programs
+   WHERE similarity(display_name, '{USER_PROVIDED_STRING}') > 0.3
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested
+    FROM limited_unique_orgs
+ORDER BY suggested DESC, show_publicly DESC NULLS LAST;

# 2024-04-19 13:01:24.630470
+\e

# 2024-04-19 13:01:42.056899
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         similarity(name, '{USER_PROVIDED_STRING}') AS similarity
+    FROM irs_exempt_organizations
+   WHERE similarity(name, '{USER_PROVIDED_STRING}') > 0.3
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         similarity(display_name, '{USER_PROVIDED_STRING}') AS similarity
+    FROM programs
+   WHERE similarity(display_name, '{USER_PROVIDED_STRING}') > 0.3
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC, show_publicly DESC NULLS LAST;

# 2024-04-19 13:01:53.502678
+\e

# 2024-04-19 13:02:08.948480
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   WHERE similarity(name, 'red') > 0.3
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         similarity(display_name, 'red') AS similarity
+    FROM programs
+   WHERE similarity(display_name, 'red') > 0.3
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC, show_publicly DESC NULLS LAST;

# 2024-04-19 13:02:16.030418
+\e

# 2024-04-19 13:02:28.721579
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         similarity(name, 'red cross') AS similarity
+    FROM irs_exempt_organizations
+   WHERE similarity(name, 'red cross') > 0.3
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         similarity(display_name, 'red cross') AS similarity
+    FROM programs
+   WHERE similarity(display_name, 'red cross') > 0.3
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC, show_publicly DESC NULLS LAST;

# 2024-04-19 13:03:01.992947
+insert into programs (select * from programs where display_name = 'American Red Cross');

# 2024-04-19 13:03:34.289764
+insert into programs (select null as rand_id, * from programs where display_name = 'American Red Cross');

# 2024-04-19 13:04:32.346106
+insert into programs (display_name, show_publicly, ein) values ('American Red Cross', false, '444444444');

# 2024-04-19 13:04:50.416861
+select org_id from programs where display_name = 'American Red Cross';

# 2024-04-19 13:04:56.323945
+select organization_id from programs where display_name = 'American Red Cross';

# 2024-04-19 13:05:08.210110
+insert into programs (display_name, show_publicly, ein, organization_id) values ('American Red Cross', false, '444444444', 'SgaHy3Bb');

# 2024-04-19 13:05:24.529709
+insert into programs (display_name, show_publicly, ein, organization_id, legal_name) values ('American Red Cross', false, '444444444', 'SgaHy3Bb', 'American Red Cross');

# 2024-04-19 13:05:43.041928
+select endowment_type_v2 from programs where display_name = 'American Red Cross';

# 2024-04-19 13:05:56.423307
+insert into programs (display_name, show_publicly, ein, organization_id, legal_name, endowment_type_v2) values ('American Red Cross', false, '444444444', 'SgaHy3Bb', 'American Red Cross', 'none');

# 2024-04-19 13:06:02.247843
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         similarity(name, 'red cross') AS similarity
+    FROM irs_exempt_organizations
+   WHERE similarity(name, 'red cross') > 0.3
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         similarity(display_name, 'red cross') AS similarity
+    FROM programs
+   WHERE similarity(display_name, 'red cross') > 0.3
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC, show_publicly DESC NULLS LAST;

# 2024-04-19 13:06:11.768159
+\e

# 2024-04-19 13:10:25.466099
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red cross')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red cross')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red cross')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red cross')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 13:10:31.075040
+\e

# 2024-04-19 13:10:43.752613
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red cross')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red cross')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red cross')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red cross')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 13:11:01.289445
+\e

# 2024-04-19 13:11:12.021686
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 13:14:36.197936
+insert into programs (display_name, show_publicly, ein, organization_id, legal_name, endowment_type_v2) values ('Red', false, '444444445', 'SgaHy3Bb', 'American Red Cross', 'none');

# 2024-04-19 13:14:47.157443
+insert into programs (display_name, show_publicly, ein, organization_id, legal_name, endowment_type_v2) values ('Red', true, '444444446', 'SgaHy3Bb', 'American Red Cross', 'none');

# 2024-04-19 13:14:50.059256
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 13:14:57.882734
+\e

# 2024-04-19 13:17:00.282768
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 13:17:27.571862
+select to_tsvector('red') @@ plainto_tsquery('red');

# 2024-04-19 13:17:39.724291
+select ts_rank(to_tsvector('red'), plainto_tsquery('red'));

# 2024-04-19 13:17:47.310135
+select ts_rank(to_tsvector('american red cross'), plainto_tsquery('red'));

# 2024-04-19 13:18:07.780711
+select ts_rank(to_tsvector('RED OAK MEMORIAL ASSOCIATION RED OAK CEMETERY ASSOCIATION'), plainto_tsquery('red'));

# 2024-04-19 13:19:04.076963
+select ts_rank(to_tsvector('RED RIVER THEATERS INC'), plainto_tsquery('red'));

# 2024-04-19 13:19:08.428304
+select ts_rank(to_tsvector('RED RIVER THEATRES INC'), plainto_tsquery('red'));

# 2024-04-19 13:19:13.210935
+select ts_rank(to_tsvector('american red cross'), plainto_tsquery('red'));

# 2024-04-19 13:42:00.709845
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 13:42:04.968383
+\e

# 2024-04-19 13:42:18.747239
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY suggested DESC;

# 2024-04-19 13:42:27.104437
+\e

# 2024-04-19 13:42:35.635582
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 13:43:41.218513
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 13:43:42.022479
+\e

# 2024-04-19 13:44:12.105238
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST
+)
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs;

# 2024-04-19 13:45:21.635980
+\e

# 2024-04-19 13:45:53.554450
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+)
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs;
+ORDER BY suggested DESC, show_publicly DESC NULLS LAST
+;

# 2024-04-19 13:46:03.113157
+\e

# 2024-04-19 13:47:31.765797
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY ein, suggested DESC, show_publicly DESC NULLS LAST;

# 2024-04-19 13:48:00.339648
+\e

# 2024-04-19 13:48:21.295298
+  select count(*), suggested from (SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY ein, suggested DESC, show_publicly DESC NULLS LAST
+) query group by suggested;

# 2024-04-19 13:48:35.652208
+\e

# 2024-04-19 13:48:42.576781
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY ein, suggested DESC, show_publicly DESC NULLS LAST;

# 2024-04-19 13:48:43.724328
+\e

# 2024-04-19 13:48:54.793156
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY suggested DESC, show_publicly DESC NULLS LAST;

# 2024-04-19 13:49:35.967304
+select * from programs where ein = '530196605';

# 2024-04-19 13:49:42.736384
+select * from programs where ein ilike '%53%0196605%';

# 2024-04-19 13:49:50.201227
+select count(*) from programs where ein ilike '%53%0196605%';

# 2024-04-19 13:50:00.428068
+select display_name, ein from programs where ein ilike '%53%0196605%';

# 2024-04-19 13:50:40.442950
+select name, ein from irs_exempt_organizations where ein ilike '%53%0196605%';

# 2024-04-19 13:51:05.778509
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         ts_rank(to_tsvector(name), plainto_tsquery('{USER_PROVIDED_STRING}')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('{USER_PROVIDED_STRING}')
+   UNION 
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('{USER_PROVIDED_STRING}')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('{USER_PROVIDED_STRING}')
+   ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         similarity
+    FROM unique_orgs
+   ORDER BY similarity DESC
+   LIMIT 10
+)
+SELECT name,
+       ein,
+       suggested
+  FROM limited_unique_orgs
+ ORDER BY suggested DESC;

# 2024-04-19 13:51:06.679889
+\e

# 2024-04-19 13:51:54.811666
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('{USER_PROVIDED_STRING}')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('{USER_PROVIDED_STRING}')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('{USER_PROVIDED_STRING}')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('{USER_PROVIDED_STRING}')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 13:51:55.898145
+\e

# 2024-04-19 13:52:19.847579
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('{USER_PROVIDED_STRING}')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('{USER_PROVIDED_STRING}')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('{USER_PROVIDED_STRING}')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('{USER_PROVIDED_STRING}')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 13:52:21.556495
+\e

# 2024-04-19 13:52:33.666887
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('{USER_PROVIDED_STRING}')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE to_tsvector(name) @@ plainto_tsquery('{USER_PROVIDED_STRING}')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('{USER_PROVIDED_STRING}')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('{USER_PROVIDED_STRING}')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 13:52:38.350495
+\e

# 2024-04-19 14:10:20.855294
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL as show_publicly
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%{USER_PROVIDED_STRING}%'
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%{USER_PROVIDED_STRING}%'
+ORDER BY suggested DESC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly
+    FROM matching_orgs
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM unique_matching_orgs
+ORDER BY suggested DESC, 
+         show_publicly DESC NULLS LAST, 
+         name ASC 
+   LIMIT 10; 
+

# 2024-04-19 14:10:30.238643
+select * from irs_exempt_organizations limit 1;

# 2024-04-19 14:10:40.977680
+select code from irs_exempt_organizations limit 10;

# 2024-04-19 14:10:46.099040
+select code from irs_exempt_organizations where code is not null;

# 2024-04-19 14:10:56.044109
+select count(*) from irs_exempt_organizations where code is not null;

# 2024-04-19 14:11:00.635520
+select count(*) from irs_exempt_organizations where code is not null = 'PC';

# 2024-04-19 14:11:05.340248
+select count(*) from irs_exempt_organizations where code = 'PC';

# 2024-04-19 14:11:17.091753
+select count(*) from irs_exempt_organizations;

# 2024-04-19 14:11:29.468924
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL as show_publicly
+    FROM irs_exempt_organizations
+   WHERE name ILIKE '%{USER_PROVIDED_STRING}%'
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%{USER_PROVIDED_STRING}%'
+ORDER BY suggested DESC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly
+    FROM matching_orgs
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM unique_matching_orgs
+ORDER BY suggested DESC, 
+         show_publicly DESC NULLS LAST, 
+         name ASC 
+   LIMIT 10; 
+

# 2024-04-19 14:11:30.540080
+\e

# 2024-04-19 14:11:52.222794
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL as show_publicly
+    FROM irs_exempt_organizations
+   WHERE code = 'PC'
+     AND name ILIKE '%{USER_PROVIDED_STRING}%'
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%{USER_PROVIDED_STRING}%'
+ORDER BY suggested DESC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly
+    FROM matching_orgs
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM unique_matching_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST,
+         name ASC
+   LIMIT 10;

# 2024-04-19 14:11:54.979752
+\e

# 2024-04-19 14:12:02.263696
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL as show_publicly
+    FROM irs_exempt_organizations
+   WHERE code = 'PC'
+     AND name ILIKE '%red%'
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%red%'
+ORDER BY suggested DESC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly
+    FROM matching_orgs
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM unique_matching_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST,
+         name ASC
+   LIMIT 10;

# 2024-04-19 14:12:06.037256
+\e

# 2024-04-19 14:12:12.463192
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL as show_publicly
+    FROM irs_exempt_organizations
+   WHERE code = 'PC'
+     AND name ILIKE '%e%'
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%e%'
+ORDER BY suggested DESC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly
+    FROM matching_orgs
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM unique_matching_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST,
+         name ASC
+   LIMIT 10;

# 2024-04-19 14:12:29.565985
+\e

# 2024-04-19 14:14:46.749716
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL as show_publicly
+    FROM irs_exempt_organizations
+   WHERE code = 'PC'
+     AND name ILIKE '%e%'
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly
+    FROM programs
+   WHERE display_name ILIKE '%e%'
+ORDER BY suggested DESC
+), unique_matching_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly
+    FROM matching_orgs
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM unique_matching_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST,
+         name ASC
+   LIMIT 10;

# 2024-04-19 14:14:54.353525
+select * from irs_exempt_organizations limit 1;

# 2024-04-19 14:15:11.683851
+select count(*) from irs_exempt_organizations where subsection = '03';

# 2024-04-19 14:15:16.100588
+select count(*) from irs_exempt_organizations;

# 2024-04-19 14:15:24.549246
+select count(*) from irs_exempt_organizations where subsection = '03' and code = 'PC';

# 2024-04-19 14:29:36.665417
+alter table irs_exempt_organizations add index name;

# 2024-04-19 14:29:40.822618
+\d irs_exempt_organizations

# 2024-04-19 14:30:19.857125
+create index on irs_exempt_organizations name;

# 2024-04-19 14:30:37.322188
+create index on irs_exempt_organizations ON name;

# 2024-04-19 14:30:45.298466
+create index on irs_exempt_organizations (name);

# 2024-04-19 14:30:56.891338
+create index on programs (display_name);

# 2024-04-19 14:31:19.505147
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('{USER_PROVIDED_STRING}')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE code = 'PC'
+     AND to_tsvector(name) @@ plainto_tsquery('{USER_PROVIDED_STRING}')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('{USER_PROVIDED_STRING}')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('{USER_PROVIDED_STRING}')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 14:31:24.964099
+\e

# 2024-04-19 14:31:39.396920
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE code = 'PC'
+     AND to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 14:31:54.859966
+\d irs_exempt_organizations

# 2024-04-19 14:32:06.706921
+drop index irs_exempt_organizations_name_idx;

# 2024-04-19 14:32:15.990301
+drop index programs_name_idx;

# 2024-04-19 14:32:19.061341
+\d programs

# 2024-04-19 14:32:39.381711
+drop index programs_display_name_idx;

# 2024-04-19 14:32:51.765569
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         ts_rank(to_tsvector(name), plainto_tsquery('red')) AS similarity
+    FROM irs_exempt_organizations
+   WHERE code = 'PC'
+     AND to_tsvector(name) @@ plainto_tsquery('red')
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         ts_rank(to_tsvector(display_name), plainto_tsquery('red')) AS similarity
+    FROM programs
+   WHERE to_tsvector(display_name) @@ plainto_tsquery('red')
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 14:33:13.878248
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         similarity(name, '{USER_PROVIDED_STRINg}') AS similarity
+    FROM irs_exempt_organizations
+   WHERE code = 'PC'
+     AND similarity(name, '{USER_PROVIDED_STRING}') > 0.3 
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         similarity(display_name, '{USER_PROVIDED_STRING}') AS similarity
+    FROM programs
+   WHERE similarity(display_name, '{USER_PROVIDED_STRING}') > 0.3 
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC, 
+         show_publicly DESC NULLS LAST;

# 2024-04-19 14:33:20.206148
+\e

# 2024-04-19 14:33:45.238902
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   WHERE code = 'PC'
+     AND similarity(name, 'red') > 0.3
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         similarity(display_name, 'red') AS similarity
+    FROM programs
+   WHERE similarity(display_name, 'red') > 0.3
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-19 14:34:05.202700
+create index on irs_exempt_organizations (name);  index on programs (display_name);

# 2024-04-19 14:34:14.362074
+create index on irs_exempt_organizations (name); create index on programs (display_name);

# 2024-04-19 14:34:19.430093
+WITH matching_orgs AS (
+  SELECT name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         FALSE AS suggested,
+         NULL AS show_publicly,
+         similarity(name, 'red') AS similarity
+    FROM irs_exempt_organizations
+   WHERE code = 'PC'
+     AND similarity(name, 'red') > 0.3
+   UNION
+  SELECT display_name AS name,
+         regexp_replace(ein, '-', '') AS ein,
+         TRUE AS suggested,
+         show_publicly AS show_publicly,
+         similarity(display_name, 'red') AS similarity
+    FROM programs
+   WHERE similarity(display_name, 'red') > 0.3
+ORDER BY suggested DESC
+), unique_orgs AS (
+  SELECT DISTINCT ON (ein)
+         name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM matching_orgs
+), limited_unique_orgs AS (
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly,
+         similarity
+    FROM unique_orgs
+ORDER BY similarity DESC
+   LIMIT 10
+)
+  SELECT name,
+         ein,
+         suggested,
+         show_publicly
+    FROM limited_unique_orgs
+ORDER BY suggested DESC,
+         show_publicly DESC NULLS LAST;

# 2024-04-23 10:28:05.190892
+select * from information_schema.columns limit 10;

# 2024-04-23 10:44:37.927628
+\q

# 2024-04-23 11:11:15.617194
+\l

# 2024-04-23 11:11:18.446328
+\du

# 2024-04-23 11:11:31.079342
+\q

# 2024-04-23 11:11:38.949955
+\l

# 2024-04-23 11:12:07.319447
+create user postgres superuser;

# 2024-04-23 11:12:22.085187
+\q

# 2024-04-23 11:13:54.731551
+\l

# 2024-04-23 11:13:58.923749
+create database freewill_dev;

# 2024-04-23 11:14:00.650245
+\q

# 2024-04-23 15:14:02.135013
+select count(*) from irs_exempt_organizations;

# 2024-04-23 15:14:13.366625
+select * from users where email ilike '%riley%';

# 2024-04-23 15:14:19.769498
+select * from users where email ilike '%riley@freewill.com%';

# 2024-04-23 15:14:35.785501
+\d irs_exempt_organizations

# 2024-04-24 12:23:37.578757
+select count(*) from irs_exempt_organizations;

# 2024-04-24 15:40:06.942012
+\d irs_exempt_organizations

# 2024-04-29 12:33:31.740070
+select * from irs_exempt_organizations limit 1;

# 2024-04-29 12:33:55.160860
+select subsection from irs_exempt_organizations limit 10;

# 2024-04-29 12:34:02.670726
+select distinct subsection from irs_exempt_organizations;

# 2024-05-06 16:38:09.249726
+select * from users where email ilike '%riley@freewill.com%';

# 2024-05-06 16:38:16.724719
+select * from users where email ilike 'riley@freewill.com';
