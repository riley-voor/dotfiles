#!/bin/bash

# skip all pre-push hooks for now!
exit 0

# not set for some reason?
GIT_DIR="$(pwd)/.git"

source $GIT_DIR/hooks/lib.sh

exit_if_commit_hooks_should_not_run

echo "-PRE-PUSH HOOKS-----------------------------------------------------------------------------------"

# Comments to the JIRA Issue referenced by the commits about to be pushed upstream
# with who, what, and where, plus the commit message.

# get the list of commits that are about to be pushed upstream, but are not part of merge commits
# this _should_ only be the set of commits for which the author has just written and would like to push
commits=`git log --format="%H" --cherry HEAD...origin/master`

# nothing to do if there are no commits
if [[ -z "$commits" ]] ; then
    exit 0
fi

color_echo yellow "Commenting issues on JIRA..."

while read commit ; do
    # get the commit's sha
    commit_sha="$commit"

    # get the commit's issue, if one exists
    commit_issue=`git log -1 $commit_sha --format="%s" | awk '{print $1}' | tr -d '\n'`

    # check if ticket matches JIRA format
    declare -a ticket_formats=(
       'PROD-[0-9]+'
       'TEST-[0-9]+'
       'THDIC-[0-9]+'
       'XERP-[0-9]+'
       'SCOR-[0-9]+'
       'SS-[0-9]+'
       'DVO-[0-9]+'
       'DOC-[0-9]+'
    )

    # list of ignored issues that should not post comments
    declare -a ignore_issues=(
        'XERP-1'
        'DVO-3'
    )

    # only continue if the ticket matches a valid JIRA ticket format
    matches_regex_element "$commit_issue" "${ticket_formats[@]}"
    if [[ $? == 0 ]] ; then
        # check if the ticket is NOT an ignored issue
        matches_glob_element "$commit_issue" "${ignore_issues[@]}"
        if [[ $? != 0 ]] ; then
            # non-ignored issue, add a comment
            # get the api user information
            api=`get_credentials jira | jq '.api' -r`
            user=`get_credentials jira | jq '.username' -r`
            pass=`get_credentials jira | jq '.password' -r`

            # get the information to put into the comment
            branch=`git rev-parse --abbrev-ref HEAD`
            author=`git log -1 $commit_sha --format="%an"`
            sha_short=`git log -1 $commit_sha --format="%h"`
            sha_full=`git log -1 $commit_sha --format="%H"`
            message=`git log -1 $commit_sha --format="%B" | sed ':a;N;$!ba;s|\n|\\\\n|g'` # replace newline with literal '\n'

            # parse commit message for potential JIRA Tickets referenced (minus the commit_issue)
            issues_referenced=`echo $message | grep -o -P "(XERP|DVO|DOC|TEST|PROD|THDIC|SCOR|SS)-\d+" | grep -v "$commit_issue" | tr '\n' ' '`

            # build the JIRA comment
             comment="{panel:borderColor=#cccccc|bgColor=#f5f5f5}\n"
            comment+="$author "
            comment+="pushed commit [$sha_short|https://bitbucket.org/neadwerx/xerp/commits/$sha_full] "
            comment+="to branch [$branch|https://bitbucket.org/neadwerx/xerp/branch/$branch] "
            comment+="with message:\n"
            comment+="{noformat:bgColor=#e3e3e3}\n"
            comment+="$message"
            comment+="{noformat}\n"

            # only add isues referenced if there are issues :)
            if [[ -n "$issues_referenced" ]] ; then
                comment+="----\n" # horizontal rule
                comment+="Issues Referenced: $issues_referenced\n"
            fi

            # close the panel
            comment+="{panel}"

            # call curl and save the output
            output=`curl -q -u "$user:$pass" "$api/issue/$commit_issue/comment" \
                         -H "Content-Type: application/json" -X POST --data \
                         "{\"body\": \"$comment\"}" 2>/dev/null`

            # check the result
            if [[ $? != 0 ]] || echo "$output" | jq -e 'has("id") | not' >/dev/null ; then
                # problem with curl, inform the user
                echo ""
                color_echo red "Error posting comment to JIRA Issue $commit_issue"
                color_echo green "Please add the following comment manually (https://neadwerx.atlassian.net/browse/$commit_issue)"
                echo ""
                echo -e "$comment"
                echo ""
                color_echo yellow "If you're still experiencing problem, please contact kirk@merchlogix.com."
                echo ""
                color_echo red "Failed to comment on $commit_issue for commit $sha_short"
            else
                color_echo green "Commented on $commit_issue for commit $sha_short"
            fi
        fi
    fi
done <<< "$commits"

exit 0
