#!/bin/bash

source $GIT_DIR/hooks/lib.sh
source $GIT_DIR/hooks/commit_hook_lib.sh

# Make sure that common merge characters do not appear in committed code, e.g.:
# <<<<<<< HEAD  
# =======  
# >>>>>>> XERP-13763 (v5.20) Add test for THDCA-prod-login

# MAIN PROGRAM

get_files_to_check files '.*' 'AMCR'

# if there are no files, then don't worry about it :)
if [ -z "$files" ] ; then
    exit 0
fi

hook_set_changes_hash "$files"
skip_hook_if_record_matches

offending_files=`ag -l "<<<<<<<" $(echo "$files" | tr '\n' ' ') /dev/null 2>/dev/null`

if ! [ -z "$offending_files" ] ; then
    hook_error "$(
        color_echo red "The special merge conflict character sequence <<<<<<< may not appear in any code."
        color_echo yellow "Offending files:"
        print_files "\t" "$offending_files"
    )"
fi

offending_files=`ag -l ">>>>>>>" $(echo "$files" | tr '\n' ' ') /dev/null 2>/dev/null`

if ! [ -z "$offending_files" ] ; then
    hook_error "$(
        color_echo red "The special merge conflict character sequence >>>>>>> may not appear in any code."
        color_echo yellow "Offending files:"
        print_files "\t" "$offending_files"
    )"
fi

offending_files=`ag -l "=======" $(echo "$files" | tr '\n' ' ') /dev/null 2>/dev/null`

if ! [ -z "$offending_files" ] ; then
    hook_error "$(
        color_echo red "The special merge conflict character sequence ======= may not appear in any code."
        color_echo yellow "Offending files:"
        print_files "\t" "$offending_files"
    )"
fi

hook_exit
