#!/bin/bash

source $GIT_DIR/hooks/lib.sh
source $GIT_DIR/hooks/commit_hook_lib.sh

# This script checks that GUCs and Config values are
# interacted with correctly in xerp with the database.
#   - `current_setting()` should never be directly called
#   - `set_config()` should never be directly called
#   - the following GUCs should never be directly referenced
#       - xerp.entity
#       - xerp.effective_entity
#       - xerp.locale
#       - xerp.default_locale
#   - all access to configs and settings should be done through the following functions
#       - fn_set_config_value()
#       - fn_get_config_value()
#   - EXCEPT for the following files and functions
#       - sql/functions/fn_set_config_value.sql
#       - sql/functions/fn_get_config_value.sql
#       - sql/functions/fn_setup_entity_session.sql
#       - sql/functions/fn_get_session_locale.sql
#       - sql/functions/fn_get_session_entity.sql
#       - sql/functions/fn_get_effective_entity.sql

# MAIN PROGRAM

get_files_to_check files '.*' 'AMR'

declare -a exception_files=(
    'sql/functions/fn_set_config_value.sql'
    'sql/functions/fn_get_config_value.sql'
    'sql/functions/fn_setup_entity_session.sql'
    'sql/functions/fn_get_session_locale.sql'
    'sql/functions/fn_get_session_entity.sql'
    'sql/functions/fn_get_effective_entity.sql'
)

# remove the exception_files from the set of files to check
declare -a search_files=()
for file in $files ; do
    matches_glob_element "$file" "${exception_files[@]}"
    if [[ $? != 0 ]] ; then
        search_files+=" $file"
    fi
done

# nothing to search for, everything is good
if [[ -z "$search_files" ]] ; then
    exit 0
fi

hook_set_changes_hash "$search_files"
skip_hook_if_record_matches

# get the sets of files that potentially violate this commit hook in one way or another
current_setting_files=`ag 'current_setting\(' -l $search_files /dev/null 2>/dev/null`

set_config_files=`ag 'perform set_config\(' -l $search_files /dev/null 2>/dev/null`

raw_guc_files=`ag '(?<!(fn_(g|s)et_config_value\()|(fn_(g|s)et_config_value\( )).xerp\.(entity|effective_entity|locale|default_locale)' -l $search_files /dev/null 2>/dev/null`

if [[ ! -z "$current_setting_files" ]] ; then
    hook_error "$(
        color_echo red 'Prohibited function `current_setting()` used in files:'
        print_files "\t" "$current_setting_files"
        echo 'Hint: Use `fn_get_config_value()` instead.'
    )"
fi

if [[ ! -z "$set_config_files" ]] ; then
    hook_error "$(
        color_echo red 'Prohibited function `set_config()` used in files:'
        print_files "\t" "$set_config_files"
        echo 'Hint: Use `fn_set_config_value()` instead.'
    )"
fi

if [[ ! -z "$raw_guc_files" ]] ; then
    hook_error "$(
        color_echo red 'Prohibited use of raw GUC found in files:'
        print_files "\t" "$raw_guc_files"
        echo 'Hint: Use `fn_get_config_value()` or `fn_set_config_value()` instead.'
    )"
fi

hook_exit
