#!/bin/bash

source $GIT_DIR/hooks/lib.sh
source $GIT_DIR/hooks/commit_hook_lib.sh

# This script checks edited files (not config/*.json) for:
#   - file specific configs do not appear in a different file
#   - commented out configs
#   - no config by name found in config/*.json files

get_files_to_check files '.*(?!^config\/.*[.]json)' 'AMCR'

# if there are no files, then don't worry about it :)
if [ -z "$files" ] ; then
    exit 0
fi

hook_set_changes_hash "$files"
skip_hook_if_record_matches

files_with_configs=`ag -l "['\"]config:\w+" $(echo "$files" | tr '\n' ' ') /dev/null 2>/dev/null`

for file in ${files_with_configs[@]} ; do
    # for each line in the file
    line_number=-1
    while read line ; do
    line_number=$((line_number + 1))
    # save on whitespace, no indent
    regex="['\"]config:\w+"
    if [[ "$line" =~ $regex ]] ; then
        # found the config line

        # check for commented out
        regex="^\s*(#|//|/\*)"
        if [[ "$line" =~ $regex ]] ; then
            hook_error "$(
                color_echo red "Found config usage in a comment in file '$file'"
                color_echo yellow "Near line ($line_number): $line"
                echo "Hint: Refrain from using 'config:' in comments to help with auto-documentation."
            )"
            continue
        fi

        config_name=`echo "$line" | grep -P -o "\b(?<=config:)[^'\"]+" | sed 's/\*//'`

        # check for config existence
        ag -Q "$config_name" $(find config/ -name '*.json') >/dev/null 2>&1
        if [[ $? != 0 ]] ; then
            hook_error "$(
                color_echo red "No config '$config_name' found in any config/*.json file!"
                color_echo yellow "Offending file: $file"
                color_echo yellow "Near line ($line_number): $line"
            )"
            continue
        fi

    fi
    done < $file
done

hook_exit
