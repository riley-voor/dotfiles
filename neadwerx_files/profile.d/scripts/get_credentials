#!/usr/bin/perl

#### STRICTURES ####
use strict;
use warnings;
use feature qw( say );

#### NEADWERX MODULES ####
use Carp;
use Readonly;
use Perl6::Export::Attrs;
use English qw( -no_match_vars );
use Fatal qw( open );
use Params::Validate qw( :all );

#### INTERNAL MODULES ####

#### CPAN MODULES ####
use Data::Dumper;
use Getopt::Long;
use JSON::Tiny qw( decode_json encode_json to_json );
use Try::Tiny;
use Perl6::Slurp;

#### READONLYS ####
Readonly my $FALSE           => 0;
Readonly my $TRUE            => 1;
Readonly my $CREDENTIAL_FILE => '/etc/neadwerx/credentials.json';

use vars qw( $CREDENTIALS $IS_LIST $IS_FETCH_ALL );

#### PRIVATE SUBROUTINES ####

# Prints the message and usage information.
# Params   : message (string)
# Comments : Exits with status code -1
sub _usage($)
{
    my ( $message ) = validate_pos( @_, { type => SCALAR, default => '' } );

    say "$message";
    say "Usage: $PROGRAM_NAME <CREDENTIAL...>";
    say ' Returns each credential information requested as a json block';
    say ' If only one credential is given, then it will be soley returned,';
    say ' otherwise the blocks are keyed by their credential name.';
    say ' --list | -l : Lists available credentials';
    say ' --all  | -a : Returns all credentials';
    say ' --help | -h : Prints this help.';

    exit -1;
}

# Parses the command line for arguments and options.
sub _parse_command_line
{
    my $show_help = $FALSE;

    # defaults
    $IS_LIST      = $FALSE;
    $IS_FETCH_ALL = $FALSE;

    GetOptions(
        '<>'     => \&_parse_arg,
        'l|list' => \$IS_LIST,
        'a|all'  => \$IS_FETCH_ALL,
        'h|help' => \$show_help
    ) or _usage( 'Failed to parse command line arguments.' );

    if( $show_help == $TRUE )
    {
        _usage( '' );
    }

    unless( -f $CREDENTIAL_FILE )
    {
        say "Missing credentials file '$CREDENTIAL_FILE'!";
        exit 1;
    }

    unless( $CREDENTIALS || $IS_LIST || $IS_FETCH_ALL )
    {
        _usage( 'Missing required credential(s) to retrieve.' );
    }

    return;
}

# Handler for arguments from the command line.
# Params   : arg (getopts)
sub _parse_arg($)
{
    my ( $arg ) = validate_pos( @_, 1 );

    push( @$CREDENTIALS, $arg );

    return;
}

# Reads the credentials file and returns the json as a hashref.
# Returns  : hashref (hashref)
# Throws   : Exits with failure if the json can't be read.
sub _get_credentials_file_as_hashref
{
    my $hashref;

    # read the json into memory
    try {
        my $file_text = slurp( $CREDENTIAL_FILE );

        $hashref = decode_json( $file_text );
    } catch {
        say "Failed to read credentials file.";
        exit 1;
    };
    
    return $hashref;
}

# Prints out the credential file as json.
sub _fetch_all_credentials
{
    my $hashref = _get_credentials_file_as_hashref();

    # print out the hash as json
    print encode_json( $hashref );

    return;
}

# Prints out all available credentials to retrieve.
sub _list_all_credentials
{
    my $hashref = _get_credentials_file_as_hashref();

    for my $credential_name (keys %$hashref)
    {
        say "$credential_name: $hashref->{$credential_name}{'description'}";
    }

    return;
}

# Prints out the requested credential.
# Throws   : Exits with failure if the credential is not found.
sub _fetch_credential($)
{
    my ( $credential ) = validate_pos( @_, { type => SCALAR } );
    
    my $hashref = _get_credentials_file_as_hashref();

    unless( $hashref->{$credential} )
    {
        say 'Could not find credential!';
        exit 1;
    }

    print encode_json( $hashref->{$credential} );

    return;
}

# Prints out the requested credentials.
# Throws   : Exits with failure if any credential is not found.
sub _fetch_credentials($)
{
    my ( $credentials ) = validate_pos( @_, { type => ARRAYREF } );
    
    my $hashref = _get_credentials_file_as_hashref();

    my $credential_hash;

    for my $credential (@$credentials)
    {
        unless( $hashref->{$credential} )
        {
            say "Could not find credential '$credential'!";
            exit 1;
        }

        $credential_hash->{$credential} = $hashref->{$credential};
    }

    print encode_json( $credential_hash );

    return;
}

#### MAIN PROGRAM ####
_parse_command_line();

if( $IS_FETCH_ALL )
{
    _fetch_all_credentials();
}
elsif( $IS_LIST )
{
    _list_all_credentials();
}
else
{
    if( scalar @$CREDENTIALS == 1 )
    {
        _fetch_credential( $CREDENTIALS->[0] );
    }
    else
    {
        _fetch_credentials( $CREDENTIALS );
    }
}

exit 0;

__END__

=pod

=head1 NAME

get_credentials - Retrieves credentials from /etc/neadwerx/credentials.json

=head1 SYNOPSIS

    get_credentials jira
    get_credentials --list
    get_credentials all
    get_credentials jira qa

=head1 DESCRIPTION

This script should be distributed through puppet nodes for those
machines that need access to the credentials file (also distributed
via puppet). The script simple serves as a look up table for the
credentials stored in the credentials.json file.

=head1 AUTHOR

Harrison Katz <harrison@merchlogix.com>

=cut
